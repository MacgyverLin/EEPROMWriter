0001   0000                                 .include "8051.h"
0001+  0000             ;*************************************************************
0002+  0000             ;*  TASM 8051/8052/80154 SFR BIT/BYTE MNEMONIC EQUATES LIST  *
0003+  0000             ;*************************************************************
0004+  0000             
0005+  0000             P0      .equ    080H    ;Port 0
0006+  0000             SP      .equ    081H    ;Stack pointer
0007+  0000             DPL     .equ    082H
0008+  0000             DPH     .equ    083H
0009+  0000             PCON    .equ    087H
0010+  0000             TCON    .equ    088H
0011+  0000             TMOD    .equ    089H
0012+  0000             TL0     .equ    08AH
0013+  0000             TL1     .equ    08BH
0014+  0000             TH0     .equ    08CH
0015+  0000             TH1     .equ    08DH
0016+  0000             P1      .equ    090H    ;Port 1
0017+  0000             SCON    .equ    098H
0018+  0000             SBUF    .equ    099H
0019+  0000             P2      .equ    0A0H    ;Port 2
0020+  0000             IE      .equ    0A8H
0021+  0000             P3      .equ    0B0H    ;Port 3
0022+  0000             IP      .equ    0B8H
0023+  0000             T2CON   .equ    0C8H    ;8052, 80154 only
0024+  0000             RCAP2L  .equ    0CAH    ;8052, 80154 only
0025+  0000             RCAP2H  .equ    0CBH    ;8052, 80154 only
0026+  0000             TL2     .equ    0CCH    ;8052, 80154 only
0027+  0000             TH2     .equ    0CDH    ;8052, 80154 only
0028+  0000             PSW     .equ    0D0H
0029+  0000             ACC     .equ    0E0H    ;Accumulator
0030+  0000             B       .equ    0F0H    ;Secondary Accumulator
0031+  0000             IOCON   .equ    0F8H    ;80154 only
0032+  0000             
0033+  0000             ;PORT 0 BITS
0034+  0000             P0.0    .equ    080H    ;Port 0 bit 0
0035+  0000             P0.1    .equ    081H    ;Port 0 bit 1
0036+  0000             P0.2    .equ    082H    ;Port 0 bit 2
0037+  0000             P0.3    .equ    083H    ;Port 0 bit 3
0038+  0000             P0.4    .equ    084H    ;Port 0 bit 4
0039+  0000             P0.5    .equ    085H    ;Port 0 bit 5
0040+  0000             P0.6    .equ    086H    ;Port 0 bit 6
0041+  0000             P0.7    .equ    087H    ;Port 0 bit 7
0042+  0000             
0043+  0000             ;PORT 1 BITS
0044+  0000             P1.0    .equ    090H    ;Port 1 bit 0
0045+  0000             P1.1    .equ    091H    ;Port 1 bit 1
0046+  0000             P1.2    .equ    092H    ;Port 1 bit 2
0047+  0000             P1.3    .equ    093H    ;Port 1 bit 3
0048+  0000             P1.4    .equ    094H    ;Port 1 bit 4
0049+  0000             P1.5    .equ    095H    ;Port 1 bit 5
0050+  0000             P1.6    .equ    096H    ;Port 1 bit 6
0051+  0000             P1.7    .equ    097H    ;Port 1 bit 7
0052+  0000             
0053+  0000             ;PORT 2 BITS
0054+  0000             P2.0    .equ    0A0H    ;Port 2 bit 0
0055+  0000             P2.1    .equ    0A1H    ;Port 2 bit 1
0056+  0000             P2.2    .equ    0A2H    ;Port 2 bit 2
0057+  0000             P2.3    .equ    0A3H    ;Port 2 bit 3
0058+  0000             P2.4    .equ    0A4H    ;Port 2 bit 4
0059+  0000             P2.5    .equ    0A5H    ;Port 2 bit 5
0060+  0000             P2.6    .equ    0A6H    ;Port 2 bit 6
0061+  0000             P2.7    .equ    0A7H    ;Port 2 bit 7
0062+  0000             
0063+  0000             ;PORT 3 BITS
0064+  0000             P3.0    .equ    0B0H    ;Port 3 bit 0
0065+  0000             P3.1    .equ    0B1H    ;Port 3 bit 1
0066+  0000             P3.2    .equ    0B2H    ;Port 3 bit 2
0067+  0000             P3.3    .equ    0B3H    ;Port 3 bit 3
0068+  0000             P3.4    .equ    0B4H    ;Port 3 bit 4
0069+  0000             P3.5    .equ    0B5H    ;Port 3 bit 5
0070+  0000             P3.6    .equ    0B6H    ;Port 3 bit 6
0071+  0000             P3.7    .equ    0B7H    ;Port 3 bit 7
0072+  0000             
0073+  0000             ;ACCUMULATOR BITS
0074+  0000             ACC.0   .equ    0E0H    ;Acc bit 0
0075+  0000             ACC.1   .equ    0E1H    ;Acc bit 1
0076+  0000             ACC.2   .equ    0E2H    ;Acc bit 2
0077+  0000             ACC.3   .equ    0E3H    ;Acc bit 3
0078+  0000             ACC.4   .equ    0E4H    ;Acc bit 4
0079+  0000             ACC.5   .equ    0E5H    ;Acc bit 5
0080+  0000             ACC.6   .equ    0E6H    ;Acc bit 6
0081+  0000             ACC.7   .equ    0E7H    ;Acc bit 7
0082+  0000             
0083+  0000             ;B REGISTER BITS
0084+  0000             B.0     .equ    0F0H    ;Breg bit 0
0085+  0000             B.1     .equ    0F1H    ;Breg bit 1
0086+  0000             B.2     .equ    0F2H    ;Breg bit 2
0087+  0000             B.3     .equ    0F3H    ;Breg bit 3
0088+  0000             B.4     .equ    0F4H    ;Breg bit 4
0089+  0000             B.5     .equ    0F5H    ;Breg bit 5
0090+  0000             B.6     .equ    0F6H    ;Breg bit 6
0091+  0000             B.7     .equ    0F7H    ;Breg bit 7
0092+  0000             
0093+  0000             ;PSW REGISTER BITS
0094+  0000             P       .equ    0D0H    ;Parity flag
0095+  0000             F1      .equ    0D1H    ;User flag 1
0096+  0000             OV      .equ    0D2H    ;Overflow flag
0097+  0000             RS0     .equ    0D3H    ;Register bank select 1
0098+  0000             RS1     .equ    0D4H    ;Register bank select 0
0099+  0000             F0      .equ    0D5H    ;User flag 0
0100+  0000             AC      .equ    0D6H    ;Auxiliary carry flag
0101+  0000             CY      .equ    0D7H    ;Carry flag
0102+  0000             
0103+  0000             ;TCON REGISTER BITS
0104+  0000             IT0     .equ    088H    ;Intr 0 type control
0105+  0000             IE0     .equ    089H    ;Intr 0 edge flag
0106+  0000             IT1     .equ    08AH    ;Intr 1 type control
0107+  0000             IE1     .equ    08BH    ;Intr 1 edge flag
0108+  0000             TR0     .equ    08CH    ;Timer 0 run
0109+  0000             TF0     .equ    08DH    ;Timer 0 overflow
0110+  0000             TR1     .equ    08EH    ;Timer 1 run
0111+  0000             TF1     .equ    08FH    ;Timer 1 overflow
0112+  0000             
0113+  0000             ;SCON REGISTER BITS
0114+  0000             RI      .equ    098H    ;RX Intr flag
0115+  0000             TI      .equ    099H    ;TX Intr flag
0116+  0000             RB8     .equ    09AH    ;RX 9th bit
0117+  0000             TB8     .equ    09BH    ;TX 9th bit
0118+  0000             REN     .equ    09CH    ;Enable RX flag
0119+  0000             SM2     .equ    09DH    ;8/9 bit select flag
0120+  0000             SM1     .equ    09EH    ;Serial mode bit 1
0121+  0000             SM0     .equ    09FH    ;Serial mode bit 0
0122+  0000             
0123+  0000             ;IE REGISTER BITS
0124+  0000             EX0     .equ    0A8H    ;External intr 0
0125+  0000             ET0     .equ    0A9H    ;Timer 0 intr
0126+  0000             EX1     .equ    0AAH    ;External intr 1
0127+  0000             ET1     .equ    0ABH    ;Timer 1 intr
0128+  0000             ES      .equ    0ACH    ;Serial port intr
0129+  0000             ET2     .equ    0ADH    ;Timer 2 intr
0130+  0000             ;Reserved       0AEH    Reserved
0131+  0000             EA      .equ    0AFH    ;Global intr enable
0132+  0000             
0133+  0000             ;IP REGISTER BITS
0134+  0000             PX0     .equ    0B8H    ;Priority level-External intr 0
0135+  0000             PT0     .equ    0B9H    ;Priority level-Timer 0 intr
0136+  0000             PX1     .equ    0BAH    ;Priority level-External intr 1
0137+  0000             PT1     .equ    0BBH    ;Priority level-Timer 1 intr
0138+  0000             PS      .equ    0BCH    ;Priority level-Serial port intr
0139+  0000             PT2     .equ    0BDH    ;Priority level-Timer 2 intr
0140+  0000             ;Reserved       0BEH    Reserved
0141+  0000             PCT     .equ    0BFH    ;Global priority level
0142+  0000             
0143+  0000             ;IOCON REGISTER BITS  80154 ONLY
0144+  0000             ALF     .equ    0F8H    ;Power down port condition
0145+  0000             P1HZ    .equ    0F9H    ;Port 1 control
0146+  0000             P2HZ    .equ    0FAH    ;Port 2 control
0147+  0000             P3HZ    .equ    0FBH    ;Port 3 control
0148+  0000             IZC     .equ    0FCH    ;Pullup select
0149+  0000             SERR    .equ    0FDH    ;Serial reception error
0150+  0000             T32     .equ    0FEH    ;32 bit timer config
0151+  0000             WDT     .equ    0FFH    ;Watchdog config
0152+  0000             
0153+  0000             ;T2CON REGISTER BITS  8052/80154 ONLY
0154+  0000             CP/RL2  .equ    0C8H    ;Timer 2 capture/reload flag
0155+  0000             C/T2    .equ    0C9H    ;Timer 2 timer/counter select
0156+  0000             TR2     .equ    0CAH    ;Timer 2 start/stop
0157+  0000             EXEN2   .equ    0CBH    ;Timer 2 external enable
0158+  0000             TCLK    .equ    0CCH    ;TX clock flag
0159+  0000             RCLK    .equ    0CDH    ;RX clock flag
0160+  0000             EXF2    .equ    0CEH    ;Timer 2 external flag
0161+  0000             TF2     .equ    0CFH    ;Timer 2 overflow
0162+  0000             
0002   0000                                 .AVSYM
0003   0000             
0004   0000             RESET_VECTOR        .EQU            0000H
0005   0000             EXTERNAL0_VECTOR    .EQU            0003H
0006   0000             TIMER0_VECTOR       .EQU            000BH
0007   0000             EXTERNAL1_VECTOR    .EQU            0013H
0008   0000             TIMER1_VECTOR       .EQU            001BH
0009   0000             SERIAL_VECTOR       .EQU            0023H
0010   0000             
0011   0000                                 .ORG            RESET_VECTOR
0012   0000 01 26       					AJMP			START
0013   0002             
0014   0003                                 .ORG            EXTERNAL0_VECTOR
0015   0003 01 25       					AJMP			EXTERNAL0
0016   0005             
0017   000B                                 .ORG            TIMER0_VECTOR
0018   000B 01 25       					AJMP			TIMER0
0019   000D             
0020   0013                                 .ORG            EXTERNAL1_VECTOR
0021   0013 01 25       					AJMP			EXTERNAL1
0022   0015             
0023   001B                                 .ORG            TIMER1_VECTOR
0024   001B 01 25       					AJMP			TIMER1
0025   001D             
0026   0023                                 .ORG            SERIAL_VECTOR
0027   0023 01 25       					AJMP			SERIAL
0028   0025             EXTERNAL0:
0029   0025             TIMER0:
0030   0025             EXTERNAL1:
0031   0025             TIMER1:
0032   0025 22          SERIAL:             RET
0033   0026             
0034   0026             					.TEXT
0035   0026             START:
0036   0026             BOOT_SEQUENCE:		;ACALL			LED_TEST
0037   0026             					;ACALL			PIO0_TEST
0038   0026             					;ACALL			PIO1_TEST
0039   0026 11 E8                           ACALL          CF_0_TEST
0040   0028             					;ACALL			CLR_MEMORY
0041   0028 31 E1       					ACALL           COPYBIOS
0042   002A 31 F1       					ACALL           CMPBIOS
0043   002C B4 00 07    					CJNE			A, #0, BOOT_FAILED
0044   002F             
0045   002F 51 05       BOOT_SUCCESS:		ACALL			EXIT_BOOT
0046   0031 75 90 01    BOOT_SUCCESS_1:		MOV				P1, #01h
0047   0034 01 31       					AJMP            BOOT_SUCCESS_1
0048   0036             
0049   0036 75 90 02    BOOT_FAILED:		MOV				P1, #02h
0050   0039 01 36                           AJMP            BOOT_FAILED
0051   003B             
0052   003B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0053   003B             ; DELAY FUNCTION
0054   003B 7D 01       DELAY:				MOV				R5, #01; #50
0055   003D 7E 01       DELAY1:				MOV				R6, #01; #100
0056   003F 7F 01       DELAY2:				MOV				R7, #01; #100
0057   0041 DF FE       DELAY3:				DJNZ			R7, DELAY3
0058   0043 DE FA       					DJNZ			R6, DELAY2
0059   0045 DD F6       					DJNZ			R5, DELAY1
0060   0047 22          					RET
0061   0048             
0062   0048             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063   0048             ; TEST 8255
0064   0048 78 0A       PIO0_TEST:		    MOV				R0, #10
0065   004A 74 80       					MOV				A, #080h
0066   004C 11 A2       					ACALL           PIO0_WRITE_CTRL
0067   004E E4          					CLR				A
0068   004F             
0069   004F 11 AC       PIO0_TEST_LP:		ACALL			PIO0_WRITE_PORT_A
0070   0051 11 3B       					ACALL			DELAY
0071   0053 04          					INC				A
0072   0054             
0073   0054 11 B1       					ACALL			PIO0_WRITE_PORT_B
0074   0056 11 3B       					ACALL			DELAY
0075   0058 04          					INC				A
0076   0059             
0077   0059 11 B6       					ACALL			PIO0_WRITE_PORT_C
0078   005B 11 3B       					ACALL			DELAY
0079   005D 04          					INC				A
0080   005E             
0081   005E D8 EF       					DJNZ			R0, PIO0_TEST_LP
0082   0060 22          					RET
0083   0061             
0084   0061 78 0A       PIO1_TEST:		    MOV				R0, #10
0085   0063 74 80       					MOV				A, #080h
0086   0065 11 A7       					ACALL           PIO1_WRITE_CTRL
0087   0067 E4          					CLR				A
0088   0068             
0089   0068 11 BB       PIO1_TEST_LP:		ACALL			PIO1_WRITE_PORT_A
0090   006A 11 3B       					ACALL			DELAY
0091   006C 04          					INC				A
0092   006D             
0093   006D 11 C0       					ACALL			PIO1_WRITE_PORT_B
0094   006F 11 3B       					ACALL			DELAY
0095   0071 04          					INC				A
0096   0072             
0097   0072 11 C5       					ACALL			PIO1_WRITE_PORT_C
0098   0074 11 3B       					ACALL			DELAY
0099   0076 04          					INC				A
0100   0077             
0101   0077 D8 EF       					DJNZ			R0, PIO1_TEST_LP
0102   0079 22          					RET
0103   007A             
0104   007A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0105   007A             ; TEST LED
0106   007A 75 90 01    LED_TEST:			MOV				P1, #01h
0107   007D 11 3B       					ACALL			DELAY
0108   007F 75 90 02    					MOV				P1, #02h
0109   0082 11 3B       					ACALL			DELAY
0110   0084 75 90 04    					MOV				P1, #04h
0111   0087 11 3B       					ACALL			DELAY
0112   0089 75 90 08    					MOV				P1, #08h
0113   008C 11 3B       					ACALL			DELAY
0114   008E 75 90 10    					MOV				P1, #10h
0115   0091 11 3B       					ACALL			DELAY
0116   0093 75 90 20    					MOV				P1, #20h
0117   0096 11 3B       					ACALL			DELAY
0118   0098 75 90 40    					MOV				P1, #40h
0119   009B 11 3B       					ACALL			DELAY
0120   009D 22          					RET
0121   009E             
0122   009E             ;========================================================================================================
0123   009E             ; IOWRITE
0124   009E             ; PARAMETER: A, DATA
0125   009E             ; PARAMETER: DPTR, ADDRESS
0126   009E             ;*************************************************************
0127   009E F0          IOWRITE:	            	MOVX			@DPTR, A
0128   009F 22          					        RET
0129   00A0             
0130   00A0             ;*************************************************************
0131   00A0             ; IOREAD
0132   00A0             ; PARAMETER: DPTR, ADDRESS
0133   00A0             ; RETURN: A, DATA
0134   00A0             ;*************************************************************
0135   00A0 E0          IOREAD:	        	        MOVX			A, @DPTR
0136   00A1 22          					        RET
0137   00A2             
0138   00A2             ;========================================================================================================
0139   00A2             PIO0_BASE          .EQU            0FF00H
0140   00A2             PIO0_PORT_A        .EQU            PIO0_BASE+0
0141   00A2             PIO0_PORT_B        .EQU            PIO0_BASE+1
0142   00A2             PIO0_PORT_C        .EQU            PIO0_BASE+2
0143   00A2             PIO0_PORT_CTRL     .EQU            PIO0_BASE+3
0144   00A2             
0145   00A2             PIO1_BASE          .EQU            0FF10H
0146   00A2             PIO1_PORT_A        .EQU            PIO1_BASE+0
0147   00A2             PIO1_PORT_B        .EQU            PIO1_BASE+1
0148   00A2             PIO1_PORT_C        .EQU            PIO1_BASE+2
0149   00A2             PIO1_PORT_CTRL     .EQU            PIO1_BASE+3
0150   00A2             ;*************************************************************
0151   00A2             ; INIT_8255_0, INIT_8255_1
0152   00A2             ; INPUT: A, MODE
0153   00A2             ; 76543210 
0154   00A2             ; |||||||+--------- PC0-3  ,  1:INPUT ,  0:OUTPUT
0155   00A2             ; ||||||+---------- PB     ,  1:INPUT ,  0:OUTPUT
0156   00A2             ; |||||+----------- PB MODE,  0:MODE 0,  1:MODE 1
0157   00A2             ; ||||+------------ PC4-7  ,  1:INPUT ,  0:OUTPUT
0158   00A2             ; |||+------------- PA     ,  1:INPUT ,  0:OUTPUT
0159   00A2             ; ||+-------------- PA MODE, 00:MODE 0, 01:MODE 1
0160   00A2             ; |+--------------- PA MODE, 10:MODE 2, 11:X
0161   00A2             ; +---------------- ALWAYS 1
0162   00A2             ;*************************************************************
0163   00A2 90 FF 03    PIO0_WRITE_CTRL:            MOV             DPTR, #PIO0_PORT_CTRL
0164   00A5 01 9E       					        AJMP            IOWRITE
0165   00A7             	
0166   00A7 90 FF 13    PIO1_WRITE_CTRL:            MOV             DPTR, #PIO1_PORT_CTRL
0167   00AA 01 9E                                   AJMP            IOWRITE
0168   00AC             
0169   00AC             ;*************************************************************
0170   00AC             ; WRITE_PIO_0_PORT_A
0171   00AC             ; PARAMETER: A, DATA
0172   00AC             ;*************************************************************
0173   00AC 90 FF 00    PIO0_WRITE_PORT_A:		    MOV				DPTR, #PIO0_PORT_A
0174   00AF 01 9E       					        AJMP            IOWRITE
0175   00B1             
0176   00B1             ;*************************************************************
0177   00B1             ; WRITE_PIO_0_PORT_B
0178   00B1             ; PARAMETER: A, DATA
0179   00B1             ;*************************************************************
0180   00B1 90 FF 01    PIO0_WRITE_PORT_B:		    MOV				DPTR, #PIO0_PORT_B
0181   00B4 01 9E       					        AJMP            IOWRITE
0182   00B6             
0183   00B6             ;*************************************************************
0184   00B6             ; WRITE_PIO_0_PORT_C
0185   00B6             ; PARAMETER: A, DATA
0186   00B6             ;*************************************************************
0187   00B6 90 FF 02    PIO0_WRITE_PORT_C:	    	MOV				DPTR, #PIO0_PORT_C
0188   00B9 01 9E       	    				    AJMP            IOWRITE
0189   00BB             
0190   00BB             ;*************************************************************
0191   00BB             ; WRITE_PIO_1_PORT_A
0192   00BB             ; PARAMETER: A, DATA
0193   00BB             ;*************************************************************
0194   00BB 90 FF 10    PIO1_WRITE_PORT_A:		    MOV				DPTR, #PIO1_PORT_A
0195   00BE 01 9E                                   AJMP            IOWRITE
0196   00C0             
0197   00C0             ;*************************************************************
0198   00C0             ; WRITE_PIO_1_PORT_B
0199   00C0             ; PARAMETER: A, DATA
0200   00C0             ;*************************************************************
0201   00C0 90 FF 11    PIO1_WRITE_PORT_B:		    MOV				DPTR, #PIO1_PORT_B
0202   00C3 01 9E                                   AJMP            IOWRITE
0203   00C5             
0204   00C5             ;*************************************************************
0205   00C5             ; WRITE_PIO_1_PORT_C
0206   00C5             ; PARAMETER: A, DATA
0207   00C5             ;*************************************************************
0208   00C5 90 FF 12    PIO1_WRITE_PORT_C:		    MOV				DPTR, #PIO1_PORT_C
0209   00C8 01 9E                                   AJMP            IOWRITE
0210   00CA             
0211   00CA             ;*************************************************************
0212   00CA             ; READ_PIO_0_PORT_A
0213   00CA             ; RETURN: A, DATA
0214   00CA             ;*************************************************************
0215   00CA 90 FF 00    PIO0_READ_PORT_A:	        MOV				DPTR, #PIO0_PORT_A
0216   00CD 01 A0       					        AJMP            IOREAD
0217   00CF             
0218   00CF             ;*************************************************************
0219   00CF             ; READ_PIO_0_PORT_B
0220   00CF             ; RETURN: A, DATA
0221   00CF             ;*************************************************************
0222   00CF 90 FF 01    PIO0_READ_PORT_B:	        MOV				DPTR, #PIO0_PORT_B
0223   00D2 01 A0       					        AJMP            IOREAD
0224   00D4             
0225   00D4             ;*************************************************************
0226   00D4             ; READ_PIO_0_PORT_C
0227   00D4             ; RETURN: A, DATA
0228   00D4             ;*************************************************************
0229   00D4 90 FF 02    PIO0_READ_PORT_C:	        MOV				DPTR, #PIO0_PORT_C
0230   00D7 01 A0       					        AJMP            IOREAD
0231   00D9             
0232   00D9             ;*************************************************************
0233   00D9             ; READ_PIO_1_PORT_A
0234   00D9             ; RETURN: A, DATA
0235   00D9             ;*************************************************************
0236   00D9 90 FF 10    PIO1_READ_PORT_A:	       	MOV				DPTR, #PIO1_PORT_A
0237   00DC 01 A0                                   AJMP            IOREAD
0238   00DE             
0239   00DE             ;*************************************************************
0240   00DE             ; READ_PIO_1_PORT_B
0241   00DE             ; RETURN: A, DATA
0242   00DE             ;*************************************************************
0243   00DE 90 FF 11    PIO1_READ_PORT_B:	       	MOV				DPTR, #PIO1_PORT_B
0244   00E1 01 A0                                   AJMP            IOREAD
0245   00E3             
0246   00E3             ;*************************************************************
0247   00E3             ; READ_PIO_1_PORT_C
0248   00E3             ; RETURN: A, DATA
0249   00E3             ;*************************************************************
0250   00E3 90 FF 12    PIO1_READ_PORT_C:	       	MOV				DPTR, #PIO1_PORT_C
0251   00E6 01 A0                                   AJMP            IOREAD
0252   00E8             
0253   00E8             
0254   00E8             
0255   00E8             ;========================================================================================================
0256   00E8             ;*************************************************************
0257   00E8             ; https://z80project.wordpress.com/2015/07/06/z80-8-bit-compact-flash-card-interface-part-1/
0258   00E8             ; 
0259   00E8             ; check data from sector 0 HxD
0260   00E8             ; https://mh-nexus.de/en/hxd/
0261   00E8             ;*************************************************************
0262   00E8             CF_0_BASE                        .EQU            0FF20H
0263   00E8             CF_0_PORT_DATA                   .EQU            CF_0_BASE+0
0264   00E8             CF_0_PORT_ERROR                  .EQU            CF_0_BASE+1
0265   00E8             CF_0_PORT_FEATURES               .EQU            CF_0_BASE+1
0266   00E8             CF_0_PORT_SECTOR_COUNT           .EQU            CF_0_BASE+2
0267   00E8             CF_0_PORT_LBA_0                  .EQU            CF_0_BASE+3
0268   00E8             CF_0_PORT_LBA_1                  .EQU            CF_0_BASE+4
0269   00E8             CF_0_PORT_LBA_2                  .EQU            CF_0_BASE+5
0270   00E8             CF_0_PORT_LBA_3                  .EQU            CF_0_BASE+6
0271   00E8             CF_0_PORT_STATUS                 .EQU            CF_0_BASE+7
0272   00E8             CF_0_PORT_COMMAND                .EQU            CF_0_BASE+7
0273   00E8             
0274   00E8             TEST_BUFFER_PTR                  .EQU            01000h
0275   00E8             TEST_BUFFER_SIZE                 .EQU            00200h
0276   00E8             
0277   00E8 74 01       CF_0_TEST:                      MOV             A, #001h                    
0278   00EA 31 5B                                       ACALL           CF0_WRITE_FEATURES    ; set 8 bit mode to features port
0279   00EC             
0280   00EC 74 EF                                       MOV             A, #0EFh                    
0281   00EE 31 7E                                       ACALL           CF0_WRITE_COMMAND     ; command 'set features'
0282   00F0                                             
0283   00F0 22                                          RET
0284   00F1             
0285   00F1 31 38       CF_0_READ_SECTOR:               ACALL           CF0_LOOP_BUSY
0286   00F3 74 01                                       MOV             A, #001h                    
0287   00F5 31 65                                       ACALL           CF0_WRITE_SECTOR_COUNT; read 1 sector at a time
0288   00F7                                             
0289   00F7 31 38                                       ACALL           CF0_LOOP_BUSY
0290   00F9 74 00                                       MOV             A, #000h                    
0291   00FB 31 6A                                       ACALL           CF0_WRITE_LBA_0       ; read from lba 0
0292   00FD             
0293   00FD 31 38                                       ACALL           CF0_LOOP_BUSY
0294   00FF 74 00                                       MOV             A, #000h                    
0295   0101 31 6F                                       ACALL           CF0_WRITE_LBA_1       ; read from lba 0
0296   0103             
0297   0103 31 38                                       ACALL           CF0_LOOP_BUSY
0298   0105 74 00                                       MOV             A, #000h                    
0299   0107 31 74                                       ACALL           CF0_WRITE_LBA_2       ; read from lba 0
0300   0109             
0301   0109 31 38                                       ACALL           CF0_LOOP_BUSY
0302   010B 74 E0                                       MOV             A, #0E0h                    
0303   010D 31 79                                       ACALL           CF0_WRITE_LBA_3       ; read from lba 0, notes E0h means LBA mode
0304   010F 31 12                                       ACALL           CF0_READ_CMD
0305   0111 22                                          RET             
0306   0112             
0307   0112 31 3F       CF0_READ_CMD:                   ACALL           CF0_LOOP_CMD_RDY
0308   0114 74 20                                       MOV             A, #020h                    
0309   0116 31 7E                                       ACALL           CF0_WRITE_COMMAND     ; command 'read sector'
0310   0118                                             
0311   0118 31 48                                       ACALL           CF0_LOOP_DAT_RDY
0312   011A 31 83                                       ACALL           CF0_READ_STATUS
0313   011C 54 01       	                            ANL		        A, #%00000001         ; Mask Error bit
0314   011E 70 F2       	                            JNZ		        CF0_READ_CMD      	  ; 
0315   0120                                             
0316   0120 90 10 00    CF0_READ_SECTOR:                MOV             DPTR, #TEST_BUFFER_PTR
0317   0123 78 00                                       MOV             R0, #00h
0318   0125 31 48       CF0_READ_SECTOR_LP:             ACALL           CF0_LOOP_DAT_RDY
0319   0127 31 56                                       ACALL           CF0_READ_DATA
0320   0129 75 83 00                                    MOV             DPH, #TEST_BUFFER_PTR
0321   012C F0                                          MOVX            @DPTR, A
0322   012D                                             
0323   012D 31 48                                       ACALL           CF0_LOOP_DAT_RDY
0324   012F 31 56                                       ACALL           CF0_READ_DATA
0325   0131 75 82 00                                    MOV             DPL, #TEST_BUFFER_PTR
0326   0134 F0                                          MOVX            @DPTR, A
0327   0135                                             
0328   0135 D8 EE                                       DJNZ            R0, CF0_READ_SECTOR_LP                        
0329   0137 22                                          RET
0330   0138             
0331   0138             ;***************************************************************************
0332   0138             ; LOOP_BUSY
0333   0138             ; Function: Loops until status register bit 7 (busy) is 0
0334   0138             ;***************************************************************************	
0335   0138 31 83       CF0_LOOP_BUSY:                  ACALL           CF0_READ_STATUS
0336   013A 54 80       	                            ANL		        A, #%10000000               ; Mask busy bit
0337   013C 70 FA       	                            JNZ		        CF0_LOOP_BUSY			    ; Loop until busy(7) is 0
0338   013E 22          	                            RET
0339   013F             
0340   013F             ;***************************************************************************
0341   013F             ;LOOP_CMD_RDY
0342   013F             ;Function: Loops until status register bit 7 (busy) is 0 and drvrdy(6) is 1
0343   013F             ;***************************************************************************	
0344   013F 31 83       CF0_LOOP_CMD_RDY:               ACALL           CF0_READ_STATUS
0345   0141 54 C0       	                            ANL		        A, #%11000000               ; Mask busy and rdy bits
0346   0143 64 40                                       XRL		        A, #%01000000               ; we want busy(7) to be 0 and drvrdy(6) to be 1
0347   0145 70 F8       	                            JNZ		        CF0_LOOP_CMD_RDY    		; 
0348   0147 22          	                            RET
0349   0148             
0350   0148             ;***************************************************************************
0351   0148             ; LOOP_DAT_RDY
0352   0148             ; Function: Loops until status register bit 7 (busy) is 0 and drq(3) is 1
0353   0148             ;***************************************************************************		
0354   0148 31 83       CF0_LOOP_DAT_RDY:               ACALL           CF0_READ_STATUS
0355   014A 54 88       	                            ANL		        A, #%10001000               ; Mask busy and drq bits
0356   014C 64 08                                       XRL		        A, #%00001000               ; we want busy(7) to be 0 and drq(3) to be 1
0357   014E 70 F8       	                            JNZ		        CF0_LOOP_DAT_RDY    		; 
0358   0150 22          	                            RET
0359   0151             
0360   0151             ;*************************************************************
0361   0151             ; WRITE_CF_0_DATA
0362   0151             ; PARAMETER: A, DATA
0363   0151             ;*************************************************************
0364   0151 90 FF 20    CF0_WRITE_DATA:		            MOV				DPTR, #CF_0_PORT_DATA
0365   0154 01 9E                                       AJMP            IOWRITE
0366   0156             
0367   0156 90 FF 20    CF0_READ_DATA:		            MOV				DPTR, #CF_0_PORT_DATA
0368   0159 01 A0                                       AJMP            IOREAD
0369   015B             
0370   015B 90 FF 21    CF0_WRITE_FEATURES:	        	MOV				DPTR, #CF_0_PORT_FEATURES
0371   015E 01 9E                                       AJMP            IOWRITE
0372   0160             
0373   0160 90 FF 21    CF0_READ_ERROR:		            MOV				DPTR, #CF_0_PORT_ERROR
0374   0163 01 A0                                       AJMP            IOREAD
0375   0165             
0376   0165 90 FF 22    CF0_WRITE_SECTOR_COUNT:	        MOV		    	DPTR, #CF_0_PORT_SECTOR_COUNT
0377   0168 01 9E                                       AJMP            IOWRITE                                
0378   016A             
0379   016A 90 FF 23    CF0_WRITE_LBA_0:		        MOV				DPTR, #CF_0_PORT_LBA_0
0380   016D 01 9E                                       AJMP            IOWRITE                                
0381   016F             
0382   016F 90 FF 24    CF0_WRITE_LBA_1:		        MOV				DPTR, #CF_0_PORT_LBA_1
0383   0172 01 9E                                       AJMP            IOWRITE                                
0384   0174             
0385   0174 90 FF 25    CF0_WRITE_LBA_2:		        MOV				DPTR, #CF_0_PORT_LBA_2
0386   0177 01 9E                                       AJMP            IOWRITE                                
0387   0179             
0388   0179 90 FF 26    CF0_WRITE_LBA_3:		        MOV				DPTR, #CF_0_PORT_LBA_3
0389   017C 01 9E                                       AJMP            IOWRITE                                
0390   017E             
0391   017E 90 FF 27    CF0_WRITE_COMMAND:		        MOV				DPTR, #CF_0_PORT_COMMAND
0392   0181 01 9E                                       AJMP            IOWRITE                                
0393   0183             
0394   0183             ;****************************************************************
0395   0183             ;    7       6       5       4       3       2       1       0      
0396   0183             ;+-------+-------+-------+-------+-------+-------+-------+-------+     
0397   0183             ;|  BSY  | DRDY  |  DWF  |  DSC  |  DRQ  | CORR  |  IDX  |  ERR  |      
0398   0183             ;+-------+-------+-------+-------+-------+-------+-------+-------+
0399   0183             ;****************************************************************
0400   0183 90 FF 27    CF0_READ_STATUS:		        MOV				DPTR, #CF_0_PORT_STATUS
0401   0186 01 A0                                       AJMP            IOREAD
0402   0188             
0403   0188             
0404   0188             ;========================================================================================================
0405   0188             UART0_BASE              .EQU            0FF30H
0406   0188             UART0_DATA              .EQU            UART0_BASE + 0	    ;Data in/out
0407   0188             UART0_RXX               .EQU            UART0_BASE + 1      ;Check RX
0408   0188             UART0_INTR              .EQU            UART0_BASE + 2      ;Interrupts
0409   0188             UART0_LINE_CTRL         .EQU            UART0_BASE + 3      ;Line control
0410   0188             UART0_MODEM_CTRL        .EQU            UART0_BASE + 4      ;Modem control
0411   0188             UART0_LINE_STATUS       .EQU            UART0_BASE + 5      ;Line status
0412   0188             UART0_MODEM_STATUS      .EQU            UART0_BASE + 6      ;Modem status
0413   0188             UART0_SCRATCH           .EQU            UART0_BASE + 7      ;Scratch register		
0414   0188             		
0415   0188             ;***************************************************************************
0416   0188             ;UART_INIT
0417   0188             ;Function: Initialize the UART to BAUD Rate 9600 (1.8432 MHz clock input)
0418   0188             ;***************************************************************************
0419   0188 90 FF 33    UART_INIT:                      MOV				DPTR, #UART0_LINE_CTRL
0420   018B 74 08                                       MOV             A, #08h
0421   018D F0                                          MOVX            @DPTR, A                ;Mask to Set DLAB Flag
0422   018E             
0423   018E 90 FF 30                                    MOV				DPTR, #UART0_DATA
0424   0191 74 0C                                       MOV             A, #12                  ;Divisor = 12 @ 9600bps w/ 1.8432 Mhz
0425   0193 F0                                          MOVX            @DPTR, A                ;Set BAUD rate to 9600
0426   0194             
0427   0194 90 FF 31                                    MOV				DPTR, #UART0_RXX
0428   0197 74 00                                       MOV             A, #00                  
0429   0199 F0                                          MOVX            @DPTR, A                
0430   019A             
0431   019A 90 FF 33                                    MOV				DPTR, #UART0_LINE_CTRL  ;Set 8-bit data, 1 stop bit, reset DLAB Flag
0432   019D 74 03                                       MOV             A, #03             
0433   019F F0                                          MOVX            @DPTR, A                                                
0434   01A0             
0435   01A0 90 FF 31                                    MOV				DPTR, #UART0_RXX         ;Enable receive data available interrupt only
0436   01A3 74 01                                       MOV             A, #01           
0437   01A5 F0                                          MOVX            @DPTR, A                                                                                
0438   01A6 22                              			RET		
0439   01A7             		
0440   01A7             ;***************************************************************************
0441   01A7             ;UART_PRNT_STR:
0442   01A7             ;Function: Print out string starting at MEM location (HL) to 16550 UART
0443   01A7             ;***************************************************************************
0444   01A7             EOS                             .EQU            0
0445   01A7             UART0_PRINT_STR:                
0446   01A7 E0          UART0_PRINT_STR_LP:             MOVX            A, @DPTR
0447   01A8 B4 00 06                                    CJNE            A, #EOS, UART0_PRINT_STR_END
0448   01AB 31 BB       			                    ACALL	        UART0_TX
0449   01AD A3                                          INC		        DPTR					;Increment pointer to next char
0450   01AE 02 01 A7                                    LJMP	        UART0_PRINT_STR_LP	    ;Transmit loop
0451   01B1 22          UART0_PRINT_STR_END:            RET	 
0452   01B2             			 	
0453   01B2             ;***************************************************************************
0454   01B2             ;UART_TX_READY
0455   01B2             ;Function: Check if UART is ready to transmit
0456   01B2             ;***************************************************************************
0457   01B2             UART0_TX_RDY:                    
0458   01B2 90 FF 35    UART0_TX_RDY_LP:			     MOV            DPTR, #UART0_LINE_STATUS
0459   01B5 E0                                           MOVX           A, @DPTR
0460   01B6 54 20                                        ANL            A, #%00100000
0461   01B8 60 F8                                        JZ             UART0_TX_RDY_LP
0462   01BA             			                     
0463   01BA 22          			                     RET
0464   01BB             
0465   01BB             ;***************************************************************************
0466   01BB             ;UART_TX
0467   01BB             ;Function: Transmit character in A to UART
0468   01BB             ;***************************************************************************
0469   01BB 31 B2       UART0_TX:                       ACALL           UART0_TX_RDY			;Make sure UART is ready to receive
0470   01BD 90 FF 30                                    MOV				DPTR, #UART0_DATA
0471   01C0 F0                                          MOVX            @DPTR, A                ;Set BAUD rate to 9600
0472   01C1 22          			                    RET
0473   01C2             				
0474   01C2             ;***************************************************************************
0475   01C2             ;UART_TX_READY
0476   01C2             ;Function: Check if UART is ready to transmit
0477   01C2             ;***************************************************************************
0478   01C2             UART0_RX_RDY:                    
0479   01C2 90 FF 35    UART0_RX_RDY_LP:			     MOV            DPTR, #UART0_LINE_STATUS
0480   01C5 E0                                           MOVX           A, @DPTR
0481   01C6 54 01                                        ANL            A, #%00000001
0482   01C8 60 F8                                        JZ             UART0_RX_RDY_LP
0483   01CA             			                     
0484   01CA 22          			                     RET
0485   01CB             	
0486   01CB             ;***************************************************************************
0487   01CB             ;UART_RX
0488   01CB             ;Function: Receive character in UART to A
0489   01CB             ;***************************************************************************
0490   01CB 31 C2       UART0_RX:                       ACALL           UART0_RX_RDY			;Make sure UART is ready to receive
0491   01CD 90 FF 30                                    MOV				DPTR, #UART0_DATA
0492   01D0 E0                                          MOVX            A, @DPTR                ;Set BAUD rate to 9600
0493   01D1 22          			                    RET
0494   01D2             
0495   01D2             ;========================================================================================================
0496   01D2             ;*************************************************************
0497   01D2             ; CLEAR_MEMORTY FUNCTION
0498   01D2 90 00 00    CLR_MEMORY:			        MOV				DPTR, #0000h
0499   01D5 7E FF       CLR_MEMORY_1:		        MOV				R6, #0FFH
0500   01D7 7F F0       CLR_MEMORY_2:		        MOV				R7, #0F0H
0501   01D9 E4          CLR_MEMORY_3:		        CLR				A
0502   01DA F0          					        MOVX			@DPTR,A
0503   01DB A3          					        INC				DPTR
0504   01DC DF FB       					        DJNZ			R7, CLR_MEMORY_3
0505   01DE DE F7       					        DJNZ			R6, CLR_MEMORY_2
0506   01E0 22          CLR_MEMORY_END:		        RET
0507   01E1             
0508   01E1             ;*************************************************************
0509   01E1             ; COPY_BIOS FUNCTION
0510   01E1             ;*************************************************************
0511   01E1 90 00 00    COPYBIOS:			        MOV				DPTR, #0000h
0512   01E4 7E 80       COPYBIOS_1:			        MOV				R6, #080H
0513   01E6 7F 00       COPYBIOS_2:			        MOV				R7, #000H
0514   01E8 E4          COPYBIOS_3:			        CLR				A
0515   01E9 93          					        MOVC			A, @A+DPTR
0516   01EA F0          					        MOVX			@DPTR,A
0517   01EB A3          					        INC				DPTR
0518   01EC DF FA       					        DJNZ			R7, COPYBIOS_3
0519   01EE DE F6       					        DJNZ			R6, COPYBIOS_2
0520   01F0 22          COPYBIOS_END:		        RET				
0521   01F1             
0522   01F1             ;*************************************************************
0523   01F1             ; COMPARE_BIOS FUNCTION
0524   01F1             ;*************************************************************
0525   01F1 90 00 00    CMPBIOS:			        MOV				DPTR, #0000h
0526   01F4 7E 80       CMPBIOS_1:			        MOV				R6, #080H
0527   01F6 7F 00       CMPBIOS_2:			        MOV				R7, #000H
0528   01F8 E4          CMPBIOS_3:			        CLR				A
0529   01F9 93          					        MOVC			A, @A+DPTR
0530   01FA F8          					        MOV				R0, A
0531   01FB E0          					        MOVX			A, @DPTR
0532   01FC 98          					        SUBB			A, R0
0533   01FD 70 05       					        JNZ				CMPBIOS_END
0534   01FF A3          					        INC				DPTR
0535   0200 DF F6       					        DJNZ			R7, CMPBIOS_3
0536   0202 DE F2       					        DJNZ			R6, CMPBIOS_2
0537   0204 22          CMPBIOS_END:		        RET	
0538   0205             
0539   0205             ;========================================================================================================
0540   0205             ;*************************************************************
0541   0205             ; EXIT_BOOT FUNCTION
0542   0205             ;*************************************************************
0543   0205             PORT_EXIT_BOOT		.EQU            0FF70h
0544   0205             PORT_ENTER_ISP		.EQU            0FF71h
0545   0205             PORT_WARM_BOOT		.EQU            0FF72h
0546   0205             
0547   0205 90 FF 70    EXIT_BOOT:			        MOV				DPTR, #PORT_EXIT_BOOT
0548   0208 01 9E       					        AJMP            IOWRITE
0549   020A             
0550   020A             ;*************************************************************
0551   020A             ; ENTER_ISP FUNCTION
0552   020A             ;*************************************************************
0553   020A 90 FF 71    ENTER_ISP:			        MOV				DPTR, #PORT_ENTER_ISP
0554   020D 01 9E       					        AJMP            IOWRITE
0555   020F             
0556   020F             ;*************************************************************
0557   020F             ; WARM_BOOT FUNCTION
0558   020F             ;*************************************************************
0559   020F 90 FF 72    WARM_BOOT:			        MOV				DPTR, #PORT_WARM_BOOT
0560   0212 01 9E       					        AJMP            IOWRITE
0561   0214             
0562   0214                                         .END
ADDR  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
-----------------------------------------------------
0000  01 26 00 01 25 00 00 00 00 00 00 01 25 00 00 00
0010  00 00 00 01 25 00 00 00 00 00 00 01 25 00 00 00
0020  00 00 00 01 25 22 11 E8 31 E1 31 F1 B4 00 07 51
0030  05 75 90 01 01 31 75 90 02 01 36 7D 01 7E 01 7F
0040  01 DF FE DE FA DD F6 22 78 0A 74 80 11 A2 E4 11
0050  AC 11 3B 04 11 B1 11 3B 04 11 B6 11 3B 04 D8 EF
0060  22 78 0A 74 80 11 A7 E4 11 BB 11 3B 04 11 C0 11
0070  3B 04 11 C5 11 3B 04 D8 EF 22 75 90 01 11 3B 75
0080  90 02 11 3B 75 90 04 11 3B 75 90 08 11 3B 75 90
0090  10 11 3B 75 90 20 11 3B 75 90 40 11 3B 22 F0 22
00A0  E0 22 90 FF 03 01 9E 90 FF 13 01 9E 90 FF 00 01
00B0  9E 90 FF 01 01 9E 90 FF 02 01 9E 90 FF 10 01 9E
00C0  90 FF 11 01 9E 90 FF 12 01 9E 90 FF 00 01 A0 90
00D0  FF 01 01 A0 90 FF 02 01 A0 90 FF 10 01 A0 90 FF
00E0  11 01 A0 90 FF 12 01 A0 74 01 31 5B 74 EF 31 7E
00F0  22 31 38 74 01 31 65 31 38 74 00 31 6A 31 38 74
0100  00 31 6F 31 38 74 00 31 74 31 38 74 E0 31 79 31
0110  12 22 31 3F 74 20 31 7E 31 48 31 83 54 01 70 F2
0120  90 10 00 78 00 31 48 31 56 75 83 00 F0 31 48 31
0130  56 75 82 00 F0 D8 EE 22 31 83 54 80 70 FA 22 31
0140  83 54 C0 64 40 70 F8 22 31 83 54 88 64 08 70 F8
0150  22 90 FF 20 01 9E 90 FF 20 01 A0 90 FF 21 01 9E
0160  90 FF 21 01 A0 90 FF 22 01 9E 90 FF 23 01 9E 90
0170  FF 24 01 9E 90 FF 25 01 9E 90 FF 26 01 9E 90 FF
0180  27 01 9E 90 FF 27 01 A0 90 FF 33 74 08 F0 90 FF
0190  30 74 0C F0 90 FF 31 74 00 F0 90 FF 33 74 03 F0
01A0  90 FF 31 74 01 F0 22 E0 B4 00 06 31 BB A3 02 01
01B0  A7 22 90 FF 35 E0 54 20 60 F8 22 31 B2 90 FF 30
01C0  F0 22 90 FF 35 E0 54 01 60 F8 22 31 C2 90 FF 30
01D0  E0 22 90 00 00 7E FF 7F F0 E4 F0 A3 DF FB DE F7
01E0  22 90 00 00 7E 80 7F 00 E4 93 F0 A3 DF FA DE F6
01F0  22 90 00 00 7E 80 7F 00 E4 93 F8 E0 98 70 05 A3
0200  DF F6 DE F2 22 90 FF 70 01 9E 90 FF 71 01 9E 90
0210  FF 72 01 9E 00 00 00 00 00 00 00 00 00 00 00 00


tasm: Number of errors = 0
