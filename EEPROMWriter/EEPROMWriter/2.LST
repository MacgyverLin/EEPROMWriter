0001   0000                                 .include "8051.h"
0001+  0000             ;*************************************************************
0002+  0000             ;*  TASM 8051/8052/80154 SFR BIT/BYTE MNEMONIC EQUATES LIST  *
0003+  0000             ;*************************************************************
0004+  0000             
0005+  0000             P0      .equ    080H    ;Port 0
0006+  0000             SP      .equ    081H    ;Stack pointer
0007+  0000             DPL     .equ    082H
0008+  0000             DPH     .equ    083H
0009+  0000             PCON    .equ    087H
0010+  0000             TCON    .equ    088H
0011+  0000             TMOD    .equ    089H
0012+  0000             TL0     .equ    08AH
0013+  0000             TL1     .equ    08BH
0014+  0000             TH0     .equ    08CH
0015+  0000             TH1     .equ    08DH
0016+  0000             P1      .equ    090H    ;Port 1
0017+  0000             SCON    .equ    098H
0018+  0000             SBUF    .equ    099H
0019+  0000             P2      .equ    0A0H    ;Port 2
0020+  0000             IE      .equ    0A8H
0021+  0000             P3      .equ    0B0H    ;Port 3
0022+  0000             IP      .equ    0B8H
0023+  0000             T2CON   .equ    0C8H    ;8052, 80154 only
0024+  0000             RCAP2L  .equ    0CAH    ;8052, 80154 only
0025+  0000             RCAP2H  .equ    0CBH    ;8052, 80154 only
0026+  0000             TL2     .equ    0CCH    ;8052, 80154 only
0027+  0000             TH2     .equ    0CDH    ;8052, 80154 only
0028+  0000             PSW     .equ    0D0H
0029+  0000             ACC     .equ    0E0H    ;Accumulator
0030+  0000             B       .equ    0F0H    ;Secondary Accumulator
0031+  0000             IOCON   .equ    0F8H    ;80154 only
0032+  0000             
0033+  0000             ;PORT 0 BITS
0034+  0000             P0.0    .equ    080H    ;Port 0 bit 0
0035+  0000             P0.1    .equ    081H    ;Port 0 bit 1
0036+  0000             P0.2    .equ    082H    ;Port 0 bit 2
0037+  0000             P0.3    .equ    083H    ;Port 0 bit 3
0038+  0000             P0.4    .equ    084H    ;Port 0 bit 4
0039+  0000             P0.5    .equ    085H    ;Port 0 bit 5
0040+  0000             P0.6    .equ    086H    ;Port 0 bit 6
0041+  0000             P0.7    .equ    087H    ;Port 0 bit 7
0042+  0000             
0043+  0000             ;PORT 1 BITS
0044+  0000             P1.0    .equ    090H    ;Port 1 bit 0
0045+  0000             P1.1    .equ    091H    ;Port 1 bit 1
0046+  0000             P1.2    .equ    092H    ;Port 1 bit 2
0047+  0000             P1.3    .equ    093H    ;Port 1 bit 3
0048+  0000             P1.4    .equ    094H    ;Port 1 bit 4
0049+  0000             P1.5    .equ    095H    ;Port 1 bit 5
0050+  0000             P1.6    .equ    096H    ;Port 1 bit 6
0051+  0000             P1.7    .equ    097H    ;Port 1 bit 7
0052+  0000             
0053+  0000             ;PORT 2 BITS
0054+  0000             P2.0    .equ    0A0H    ;Port 2 bit 0
0055+  0000             P2.1    .equ    0A1H    ;Port 2 bit 1
0056+  0000             P2.2    .equ    0A2H    ;Port 2 bit 2
0057+  0000             P2.3    .equ    0A3H    ;Port 2 bit 3
0058+  0000             P2.4    .equ    0A4H    ;Port 2 bit 4
0059+  0000             P2.5    .equ    0A5H    ;Port 2 bit 5
0060+  0000             P2.6    .equ    0A6H    ;Port 2 bit 6
0061+  0000             P2.7    .equ    0A7H    ;Port 2 bit 7
0062+  0000             
0063+  0000             ;PORT 3 BITS
0064+  0000             P3.0    .equ    0B0H    ;Port 3 bit 0
0065+  0000             P3.1    .equ    0B1H    ;Port 3 bit 1
0066+  0000             P3.2    .equ    0B2H    ;Port 3 bit 2
0067+  0000             P3.3    .equ    0B3H    ;Port 3 bit 3
0068+  0000             P3.4    .equ    0B4H    ;Port 3 bit 4
0069+  0000             P3.5    .equ    0B5H    ;Port 3 bit 5
0070+  0000             P3.6    .equ    0B6H    ;Port 3 bit 6
0071+  0000             P3.7    .equ    0B7H    ;Port 3 bit 7
0072+  0000             
0073+  0000             ;ACCUMULATOR BITS
0074+  0000             ACC.0   .equ    0E0H    ;Acc bit 0
0075+  0000             ACC.1   .equ    0E1H    ;Acc bit 1
0076+  0000             ACC.2   .equ    0E2H    ;Acc bit 2
0077+  0000             ACC.3   .equ    0E3H    ;Acc bit 3
0078+  0000             ACC.4   .equ    0E4H    ;Acc bit 4
0079+  0000             ACC.5   .equ    0E5H    ;Acc bit 5
0080+  0000             ACC.6   .equ    0E6H    ;Acc bit 6
0081+  0000             ACC.7   .equ    0E7H    ;Acc bit 7
0082+  0000             
0083+  0000             ;B REGISTER BITS
0084+  0000             B.0     .equ    0F0H    ;Breg bit 0
0085+  0000             B.1     .equ    0F1H    ;Breg bit 1
0086+  0000             B.2     .equ    0F2H    ;Breg bit 2
0087+  0000             B.3     .equ    0F3H    ;Breg bit 3
0088+  0000             B.4     .equ    0F4H    ;Breg bit 4
0089+  0000             B.5     .equ    0F5H    ;Breg bit 5
0090+  0000             B.6     .equ    0F6H    ;Breg bit 6
0091+  0000             B.7     .equ    0F7H    ;Breg bit 7
0092+  0000             
0093+  0000             ;PSW REGISTER BITS
0094+  0000             P       .equ    0D0H    ;Parity flag
0095+  0000             F1      .equ    0D1H    ;User flag 1
0096+  0000             OV      .equ    0D2H    ;Overflow flag
0097+  0000             RS0     .equ    0D3H    ;Register bank select 1
0098+  0000             RS1     .equ    0D4H    ;Register bank select 0
0099+  0000             F0      .equ    0D5H    ;User flag 0
0100+  0000             AC      .equ    0D6H    ;Auxiliary carry flag
0101+  0000             CY      .equ    0D7H    ;Carry flag
0102+  0000             
0103+  0000             ;TCON REGISTER BITS
0104+  0000             IT0     .equ    088H    ;Intr 0 type control
0105+  0000             IE0     .equ    089H    ;Intr 0 edge flag
0106+  0000             IT1     .equ    08AH    ;Intr 1 type control
0107+  0000             IE1     .equ    08BH    ;Intr 1 edge flag
0108+  0000             TR0     .equ    08CH    ;Timer 0 run
0109+  0000             TF0     .equ    08DH    ;Timer 0 overflow
0110+  0000             TR1     .equ    08EH    ;Timer 1 run
0111+  0000             TF1     .equ    08FH    ;Timer 1 overflow
0112+  0000             
0113+  0000             ;SCON REGISTER BITS
0114+  0000             RI      .equ    098H    ;RX Intr flag
0115+  0000             TI      .equ    099H    ;TX Intr flag
0116+  0000             RB8     .equ    09AH    ;RX 9th bit
0117+  0000             TB8     .equ    09BH    ;TX 9th bit
0118+  0000             REN     .equ    09CH    ;Enable RX flag
0119+  0000             SM2     .equ    09DH    ;8/9 bit select flag
0120+  0000             SM1     .equ    09EH    ;Serial mode bit 1
0121+  0000             SM0     .equ    09FH    ;Serial mode bit 0
0122+  0000             
0123+  0000             ;IE REGISTER BITS
0124+  0000             EX0     .equ    0A8H    ;External intr 0
0125+  0000             ET0     .equ    0A9H    ;Timer 0 intr
0126+  0000             EX1     .equ    0AAH    ;External intr 1
0127+  0000             ET1     .equ    0ABH    ;Timer 1 intr
0128+  0000             ES      .equ    0ACH    ;Serial port intr
0129+  0000             ET2     .equ    0ADH    ;Timer 2 intr
0130+  0000             ;Reserved       0AEH    Reserved
0131+  0000             EA      .equ    0AFH    ;Global intr enable
0132+  0000             
0133+  0000             ;IP REGISTER BITS
0134+  0000             PX0     .equ    0B8H    ;Priority level-External intr 0
0135+  0000             PT0     .equ    0B9H    ;Priority level-Timer 0 intr
0136+  0000             PX1     .equ    0BAH    ;Priority level-External intr 1
0137+  0000             PT1     .equ    0BBH    ;Priority level-Timer 1 intr
0138+  0000             PS      .equ    0BCH    ;Priority level-Serial port intr
0139+  0000             PT2     .equ    0BDH    ;Priority level-Timer 2 intr
0140+  0000             ;Reserved       0BEH    Reserved
0141+  0000             PCT     .equ    0BFH    ;Global priority level
0142+  0000             
0143+  0000             ;IOCON REGISTER BITS  80154 ONLY
0144+  0000             ALF     .equ    0F8H    ;Power down port condition
0145+  0000             P1HZ    .equ    0F9H    ;Port 1 control
0146+  0000             P2HZ    .equ    0FAH    ;Port 2 control
0147+  0000             P3HZ    .equ    0FBH    ;Port 3 control
0148+  0000             IZC     .equ    0FCH    ;Pullup select
0149+  0000             SERR    .equ    0FDH    ;Serial reception error
0150+  0000             T32     .equ    0FEH    ;32 bit timer config
0151+  0000             WDT     .equ    0FFH    ;Watchdog config
0152+  0000             
0153+  0000             ;T2CON REGISTER BITS  8052/80154 ONLY
0154+  0000             CP/RL2  .equ    0C8H    ;Timer 2 capture/reload flag
0155+  0000             C/T2    .equ    0C9H    ;Timer 2 timer/counter select
0156+  0000             TR2     .equ    0CAH    ;Timer 2 start/stop
0157+  0000             EXEN2   .equ    0CBH    ;Timer 2 external enable
0158+  0000             TCLK    .equ    0CCH    ;TX clock flag
0159+  0000             RCLK    .equ    0CDH    ;RX clock flag
0160+  0000             EXF2    .equ    0CEH    ;Timer 2 external flag
0161+  0000             TF2     .equ    0CFH    ;Timer 2 overflow
0162+  0000             
0002   0000                                 .AVSYM
0003   0000             
0004   0000             RESET_VECTOR        .EQU            0000H
0005   0000             EXTERNAL0_VECTOR    .EQU            0003H
0006   0000             TIMER0_VECTOR       .EQU            000BH
0007   0000             EXTERNAL1_VECTOR    .EQU            0013H
0008   0000             TIMER1_VECTOR       .EQU            001BH
0009   0000             SERIAL_VECTOR       .EQU            0023H
0010   0000             
0011   0000                                 .ORG            RESET_VECTOR
0012   0000 02 01 00    					LJMP			START
0013   0003             
0014   0003                                 .ORG            EXTERNAL0_VECTOR
0015   0003 02 00 26    					LJMP			EXTERNAL0
0016   0006             
0017   000B                                 .ORG            TIMER0_VECTOR
0018   000B 02 00 26    					LJMP			TIMER0
0019   000E             
0020   0013                                 .ORG            EXTERNAL1_VECTOR
0021   0013 02 00 26    					LJMP			EXTERNAL1
0022   0016             
0023   001B                                 .ORG            TIMER1_VECTOR
0024   001B 02 00 26    					LJMP			TIMER1
0025   001E             
0026   0023                                 .ORG            SERIAL_VECTOR
0027   0023 02 00 26    					LJMP			SERIAL
0028   0026             EXTERNAL0:
0029   0026             TIMER0:
0030   0026             EXTERNAL1:
0031   0026             TIMER1:
0032   0026 22          SERIAL:             RET
0033   0027             
0034   0100             					.ORG			0100h
0035   0100             START:
0036   0100 75 81 20    BOOT_SEQUENCE:		MOV				SP, #020h
0037   0103 12 01 9B    					LCALL			LED_TEST
0038   0106             					;LCALL			PIO0_TEST
0039   0106 12 01 69    					LCALL			PIO1_TEST
0040   0109                                 ;LCALL          CF_0_TEST
0041   0109             					;LCALL			CLR_MEMORY
0042   0109 75 90 11    					MOV				P1, #11h
0043   010C 12 03 49    					LCALL           COPYBIOS
0044   010F 75 90 12    					MOV				P1, #12h
0045   0112 12 03 59    					LCALL           CMPBIOS
0046   0115 75 90 13    					MOV				P1, #13h
0047   0118 B4 00 09    					CJNE			A, #0, BOOT_FAILED
0048   011B             
0049   011B 12 03 6D    BOOT_SUCCESS:		LCALL			EXIT_BOOT
0050   011E 75 90 14    BOOT_SUCCESS_1:		MOV				P1, #14h
0051   0121 02 01 1E    					LJMP            BOOT_SUCCESS_1
0052   0124             
0053   0124 75 90 15    BOOT_FAILED:		MOV				P1, #15h
0054   0127 02 01 24                        LJMP            BOOT_FAILED
0055   012A             
0056   012A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057   012A             ; DELAY FUNCTION
0058   012A 7D 32       DELAY:				MOV				R5, #50
0059   012C 7E 64       DELAY1:				MOV				R6, #100
0060   012E 7F 64       DELAY2:				MOV				R7, #100
0061   0130 DF FE       DELAY3:				DJNZ			R7, DELAY3
0062   0132 DE FA       					DJNZ			R6, DELAY2
0063   0134 DD F6       					DJNZ			R5, DELAY1
0064   0136 22          					RET
0065   0137             
0066   0137             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0067   0137             ; TEST 8255
0068   0137 75 90 00    PIO0_TEST:			MOV				P1, #00h
0069   013A 74 80       					MOV				A, #080h
0070   013C 12 01 D0    					LCALL           PIO0_WRITE_CTRL
0071   013F 75 90 01    					MOV				P1, #01h
0072   0142             
0073   0142 74 5A       					MOV				A, #05Ah
0074   0144 75 90 02    PIO0_TEST_A:		MOV				P1, #02h
0075   0147 12 01 DC    					LCALL			PIO0_WRITE_PORT_A
0076   014A 75 90 03    					MOV				P1, #03h
0077   014D             					;LCALL			DELAY
0078   014D 75 90 04    					MOV				P1, #04h
0079   0150             					;INC				A
0080   0150             					;JNZ				PIO0_TEST_A
0081   0150             
0082   0150 75 90 05    PIO0_TEST_B:		MOV				P1, #05h
0083   0153 12 01 E8    					LCALL			PIO0_WRITE_PORT_B
0084   0156 75 90 06    					MOV				P1, #06h
0085   0159             					;LCALL			DELAY
0086   0159 75 90 07    					MOV				P1, #07h
0087   015C             					;INC				A
0088   015C             					;JNZ				PIO0_TEST_B
0089   015C             
0090   015C 75 90 08    PIO0_TEST_C:		MOV				P1, #08h
0091   015F 12 01 EE    					LCALL			PIO0_WRITE_PORT_C
0092   0162 75 90 09    					MOV				P1, #09h
0093   0165             					;LCALL			DELAY
0094   0165 75 90 10    					MOV				P1, #10h
0095   0168             					;INC				A
0096   0168             					;JNZ				PIO0_TEST_C
0097   0168 22          					RET
0098   0169             
0099   0169             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0100   0169             ; TEST 8255
0101   0169 75 90 80    PIO1_TEST:			MOV				P1, #80h
0102   016C 74 80       					MOV				A, #080h
0103   016E 12 01 D6    					LCALL           PIO1_WRITE_CTRL
0104   0171 75 90 81    					MOV				P1, #81h
0105   0174             
0106   0174 74 A5       					MOV				A, #0A5h
0107   0176 75 90 82    PIO1_TEST_A:		MOV				P1, #82h
0108   0179 12 01 F4    					LCALL			PIO1_WRITE_PORT_A
0109   017C 75 90 83    					MOV				P1, #83h
0110   017F             					;LCALL			DELAY
0111   017F 75 90 84    					MOV				P1, #84h
0112   0182             					;INC				A
0113   0182             					;JNZ				PIO1_TEST_A
0114   0182             
0115   0182 75 90 85    PIO1_TEST_B:		MOV				P1, #85h
0116   0185 12 01 FA    					LCALL			PIO1_WRITE_PORT_B
0117   0188 75 90 86    					MOV				P1, #86h
0118   018B             					;LCALL			DELAY
0119   018B 75 90 87    					MOV				P1, #87h
0120   018E             					;INC				A
0121   018E             					;JNZ				PIO1_TEST_B
0122   018E             
0123   018E 75 90 88    PIO1_TEST_C:		MOV				P1, #88h
0124   0191 12 02 00    					LCALL			PIO1_WRITE_PORT_C
0125   0194 75 90 89    					MOV				P1, #89h
0126   0197             					;LCALL			DELAY
0127   0197 75 90 90    					MOV				P1, #90h
0128   019A             					;INC				A
0129   019A             					;JNZ				PIO1_TEST_C
0130   019A 22          					RET
0131   019B             
0132   019B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0133   019B             ; TEST LED
0134   019B 75 90 01    LED_TEST:			MOV				P1, #01h
0135   019E 12 01 2A    					LCALL			DELAY
0136   01A1 75 90 02    					MOV				P1, #02h
0137   01A4 12 01 2A    					LCALL			DELAY
0138   01A7 75 90 04    					MOV				P1, #04h
0139   01AA 12 01 2A    					LCALL			DELAY
0140   01AD 75 90 08    					MOV				P1, #08h
0141   01B0 12 01 2A    					LCALL			DELAY
0142   01B3 75 90 10    					MOV				P1, #10h
0143   01B6 12 01 2A    					LCALL			DELAY
0144   01B9 75 90 20    					MOV				P1, #20h
0145   01BC 12 01 2A    					LCALL			DELAY
0146   01BF 75 90 40    					MOV				P1, #40h
0147   01C2 12 01 2A    					LCALL			DELAY
0148   01C5 22          					RET
0149   01C6             
0150   01C6             ;========================================================================================================
0151   01C6             ; IOWRITE
0152   01C6             ; PARAMETER: A, DATA
0153   01C6             ; PARAMETER: DPTR, ADDRESS
0154   01C6             ;*************************************************************
0155   01C6 75 90 83    IOWRITE:	            	MOV				P1, #83h
0156   01C9 F0          							MOVX			@DPTR, A
0157   01CA 75 90 84    							MOV				P1, #84h
0158   01CD 22          					        RET
0159   01CE             
0160   01CE             ;*************************************************************
0161   01CE             ; IOREAD
0162   01CE             ; PARAMETER: DPTR, ADDRESS
0163   01CE             ; RETURN: A, DATA
0164   01CE             ;*************************************************************
0165   01CE E0          IOREAD:	        	        MOVX			A, @DPTR
0166   01CF 22          					        RET
0167   01D0             
0168   01D0             ;========================================================================================================
0169   01D0             PIO0_BASE          .EQU            0FF00H
0170   01D0             PIO0_PORT_A        .EQU            PIO0_BASE+0
0171   01D0             PIO0_PORT_B        .EQU            PIO0_BASE+1
0172   01D0             PIO0_PORT_C        .EQU            PIO0_BASE+2
0173   01D0             PIO0_PORT_CTRL     .EQU            PIO0_BASE+3
0174   01D0             
0175   01D0             PIO1_BASE          .EQU            0FF10H
0176   01D0             PIO1_PORT_A        .EQU            PIO1_BASE+0
0177   01D0             PIO1_PORT_B        .EQU            PIO1_BASE+1
0178   01D0             PIO1_PORT_C        .EQU            PIO1_BASE+2
0179   01D0             PIO1_PORT_CTRL     .EQU            PIO1_BASE+3
0180   01D0             ;*************************************************************
0181   01D0             ; INIT_8255_0, INIT_8255_1
0182   01D0             ; INPUT: A, MODE
0183   01D0             ; 76543210 
0184   01D0             ; |||||||+--------- PC0-3  ,  1:INPUT ,  0:OUTPUT
0185   01D0             ; ||||||+---------- PB     ,  1:INPUT ,  0:OUTPUT
0186   01D0             ; |||||+----------- PB MODE,  0:MODE 0,  1:MODE 1
0187   01D0             ; ||||+------------ PC4-7  ,  1:INPUT ,  0:OUTPUT
0188   01D0             ; |||+------------- PA     ,  1:INPUT ,  0:OUTPUT
0189   01D0             ; ||+-------------- PA MODE, 00:MODE 0, 01:MODE 1
0190   01D0             ; |+--------------- PA MODE, 10:MODE 2, 11:X
0191   01D0             ; +---------------- ALWAYS 1
0192   01D0             ;*************************************************************
0193   01D0 90 FF 03    PIO0_WRITE_CTRL:            MOV             DPTR, #PIO0_PORT_CTRL
0194   01D3 02 01 C6    					        LJMP            IOWRITE
0195   01D6             	
0196   01D6 90 FF 13    PIO1_WRITE_CTRL:            MOV             DPTR, #PIO1_PORT_CTRL
0197   01D9 02 01 C6                                LJMP            IOWRITE
0198   01DC             
0199   01DC             ;*************************************************************
0200   01DC             ; WRITE_PIO_0_PORT_A
0201   01DC             ; PARAMETER: A, DATA
0202   01DC             ;*************************************************************
0203   01DC 75 90 81    PIO0_WRITE_PORT_A:		    MOV				P1, #81h
0204   01DF 90 FF 00    							MOV				DPTR, #PIO0_PORT_A
0205   01E2 75 90 82    							MOV				P1, #82h
0206   01E5 02 01 C6    					        LJMP            IOWRITE
0207   01E8             
0208   01E8             ;*************************************************************
0209   01E8             ; WRITE_PIO_0_PORT_B
0210   01E8             ; PARAMETER: A, DATA
0211   01E8             ;*************************************************************
0212   01E8 90 FF 01    PIO0_WRITE_PORT_B:		    MOV				DPTR, #PIO0_PORT_B
0213   01EB 02 01 C6    					        LJMP            IOWRITE
0214   01EE             
0215   01EE             ;*************************************************************
0216   01EE             ; WRITE_PIO_0_PORT_C
0217   01EE             ; PARAMETER: A, DATA
0218   01EE             ;*************************************************************
0219   01EE 90 FF 02    PIO0_WRITE_PORT_C:	    	MOV				DPTR, #PIO0_PORT_C
0220   01F1 02 01 C6    	    				    LJMP            IOWRITE
0221   01F4             
0222   01F4             ;*************************************************************
0223   01F4             ; WRITE_PIO_1_PORT_A
0224   01F4             ; PARAMETER: A, DATA
0225   01F4             ;*************************************************************
0226   01F4 90 FF 10    PIO1_WRITE_PORT_A:		    MOV				DPTR, #PIO1_PORT_A
0227   01F7 02 01 C6                                LJMP            IOWRITE
0228   01FA             
0229   01FA             ;*************************************************************
0230   01FA             ; WRITE_PIO_1_PORT_B
0231   01FA             ; PARAMETER: A, DATA
0232   01FA             ;*************************************************************
0233   01FA 90 FF 11    PIO1_WRITE_PORT_B:		    MOV				DPTR, #PIO1_PORT_B
0234   01FD 02 01 C6                                LJMP            IOWRITE
0235   0200             
0236   0200             ;*************************************************************
0237   0200             ; WRITE_PIO_1_PORT_C
0238   0200             ; PARAMETER: A, DATA
0239   0200             ;*************************************************************
0240   0200 90 FF 12    PIO1_WRITE_PORT_C:		    MOV				DPTR, #PIO1_PORT_C
0241   0203 02 01 C6                                LJMP            IOWRITE
0242   0206             
0243   0206             ;*************************************************************
0244   0206             ; READ_PIO_0_PORT_A
0245   0206             ; RETURN: A, DATA
0246   0206             ;*************************************************************
0247   0206 90 FF 00    PIO0_READ_PORT_A:	        MOV				DPTR, #PIO0_PORT_A
0248   0209 02 01 CE    					        LJMP            IOREAD
0249   020C             
0250   020C             ;*************************************************************
0251   020C             ; READ_PIO_0_PORT_B
0252   020C             ; RETURN: A, DATA
0253   020C             ;*************************************************************
0254   020C 90 FF 01    PIO0_READ_PORT_B:	        MOV				DPTR, #PIO0_PORT_B
0255   020F 02 01 CE    					        LJMP            IOREAD
0256   0212             
0257   0212             ;*************************************************************
0258   0212             ; READ_PIO_0_PORT_C
0259   0212             ; RETURN: A, DATA
0260   0212             ;*************************************************************
0261   0212 90 FF 02    PIO0_READ_PORT_C:	        MOV				DPTR, #PIO0_PORT_C
0262   0215 02 01 CE    					        LJMP            IOREAD
0263   0218             
0264   0218             ;*************************************************************
0265   0218             ; READ_PIO_1_PORT_A
0266   0218             ; RETURN: A, DATA
0267   0218             ;*************************************************************
0268   0218 90 FF 10    PIO1_READ_PORT_A:	       	MOV				DPTR, #PIO1_PORT_A
0269   021B 02 01 CE                                LJMP            IOREAD
0270   021E             
0271   021E             ;*************************************************************
0272   021E             ; READ_PIO_1_PORT_B
0273   021E             ; RETURN: A, DATA
0274   021E             ;*************************************************************
0275   021E 90 FF 11    PIO1_READ_PORT_B:	       	MOV				DPTR, #PIO1_PORT_B
0276   0221 02 01 CE                                LJMP            IOREAD
0277   0224             
0278   0224             ;*************************************************************
0279   0224             ; READ_PIO_1_PORT_C
0280   0224             ; RETURN: A, DATA
0281   0224             ;*************************************************************
0282   0224 90 FF 12    PIO1_READ_PORT_C:	       	MOV				DPTR, #PIO1_PORT_C
0283   0227 02 01 CE                                LJMP            IOREAD
0284   022A             
0285   022A             
0286   022A             
0287   022A             ;========================================================================================================
0288   022A             ;*************************************************************
0289   022A             ; https://z80project.wordpress.com/2015/07/06/z80-8-bit-compact-flash-card-interface-part-1/
0290   022A             ; 
0291   022A             ; check data from sector 0 HxD
0292   022A             ; https://mh-nexus.de/en/hxd/
0293   022A             ;*************************************************************
0294   022A             CF_0_BASE                        .EQU            0FF20H
0295   022A             CF_0_PORT_DATA                   .EQU            CF_0_BASE+0
0296   022A             CF_0_PORT_ERROR                  .EQU            CF_0_BASE+1
0297   022A             CF_0_PORT_FEATURES               .EQU            CF_0_BASE+1
0298   022A             CF_0_PORT_SECTOR_COUNT           .EQU            CF_0_BASE+2
0299   022A             CF_0_PORT_LBA_0                  .EQU            CF_0_BASE+3
0300   022A             CF_0_PORT_LBA_1                  .EQU            CF_0_BASE+4
0301   022A             CF_0_PORT_LBA_2                  .EQU            CF_0_BASE+5
0302   022A             CF_0_PORT_LBA_3                  .EQU            CF_0_BASE+6
0303   022A             CF_0_PORT_STATUS                 .EQU            CF_0_BASE+7
0304   022A             CF_0_PORT_COMMAND                .EQU            CF_0_BASE+7
0305   022A             
0306   022A             TEST_BUFFER_PTR                  .EQU            01000h
0307   022A             TEST_BUFFER_SIZE                 .EQU            00200h
0308   022A             
0309   022A 74 01       CF_0_TEST:                      MOV             A, #001h                    
0310   022C 12 02 B7                                    LCALL           CF0_WRITE_FEATURES    ; set 8 bit mode to features port
0311   022F             
0312   022F 74 EF                                       MOV             A, #0EFh                    
0313   0231 12 02 E1                                    LCALL           CF0_WRITE_COMMAND     ; command 'set features'
0314   0234                                             
0315   0234 22                                          RET
0316   0235             
0317   0235 12 02 8F    CF_0_READ_SECTOR:               LCALL           CF0_LOOP_BUSY
0318   0238 74 01                                       MOV             A, #001h                    
0319   023A 12 02 C3                                    LCALL           CF0_WRITE_SECTOR_COUNT; read 1 sector at a time
0320   023D                                             
0321   023D 12 02 8F                                    LCALL           CF0_LOOP_BUSY
0322   0240 74 00                                       MOV             A, #000h                    
0323   0242 12 02 C9                                    LCALL           CF0_WRITE_LBA_0       ; read from lba 0
0324   0245             
0325   0245 12 02 8F                                    LCALL           CF0_LOOP_BUSY
0326   0248 74 00                                       MOV             A, #000h                    
0327   024A 12 02 CF                                    LCALL           CF0_WRITE_LBA_1       ; read from lba 0
0328   024D             
0329   024D 12 02 8F                                    LCALL           CF0_LOOP_BUSY
0330   0250 74 00                                       MOV             A, #000h                    
0331   0252 12 02 D5                                    LCALL           CF0_WRITE_LBA_2       ; read from lba 0
0332   0255             
0333   0255 12 02 8F                                    LCALL           CF0_LOOP_BUSY
0334   0258 74 E0                                       MOV             A, #0E0h                    
0335   025A 12 02 DB                                    LCALL           CF0_WRITE_LBA_3       ; read from lba 0, notes E0h means LBA mode
0336   025D 12 02 61                                    LCALL           CF0_READ_CMD
0337   0260 22                                          RET             
0338   0261             
0339   0261 12 02 97    CF0_READ_CMD:                   LCALL           CF0_LOOP_CMD_RDY
0340   0264 74 20                                       MOV             A, #020h                    
0341   0266 12 02 E1                                    LCALL           CF0_WRITE_COMMAND     ; command 'read sector'
0342   0269                                             
0343   0269 12 02 A1                                    LCALL           CF0_LOOP_DAT_RDY
0344   026C 12 02 E7                                    LCALL           CF0_READ_STATUS
0345   026F 54 01       	                            ANL		        A, #%00000001         ; Mask Error bit
0346   0271 70 EE       	                            JNZ		        CF0_READ_CMD      	  ; 
0347   0273                                             
0348   0273 90 10 00    CF0_READ_SECTOR:                MOV             DPTR, #TEST_BUFFER_PTR
0349   0276 78 00                                       MOV             R0, #00h
0350   0278 12 02 A1    CF0_READ_SECTOR_LP:             LCALL           CF0_LOOP_DAT_RDY
0351   027B 12 02 B1                                    LCALL           CF0_READ_DATA
0352   027E 75 83 00                                    MOV             DPH, #TEST_BUFFER_PTR
0353   0281 F0                                          MOVX            @DPTR, A
0354   0282                                             
0355   0282 12 02 A1                                    LCALL           CF0_LOOP_DAT_RDY
0356   0285 12 02 B1                                    LCALL           CF0_READ_DATA
0357   0288 75 82 00                                    MOV             DPL, #TEST_BUFFER_PTR
0358   028B F0                                          MOVX            @DPTR, A
0359   028C                                             
0360   028C D8 EA                                       DJNZ            R0, CF0_READ_SECTOR_LP                        
0361   028E 22                                          RET
0362   028F             
0363   028F             ;***************************************************************************
0364   028F             ; LOOP_BUSY
0365   028F             ; Function: Loops until status register bit 7 (busy) is 0
0366   028F             ;***************************************************************************	
0367   028F 12 02 E7    CF0_LOOP_BUSY:                  LCALL           CF0_READ_STATUS
0368   0292 54 80       	                            ANL		        A, #%10000000               ; Mask busy bit
0369   0294 70 F9       	                            JNZ		        CF0_LOOP_BUSY			    ; Loop until busy(7) is 0
0370   0296 22          	                            RET
0371   0297             
0372   0297             ;***************************************************************************
0373   0297             ;LOOP_CMD_RDY
0374   0297             ;Function: Loops until status register bit 7 (busy) is 0 and drvrdy(6) is 1
0375   0297             ;***************************************************************************	
0376   0297 12 02 E7    CF0_LOOP_CMD_RDY:               LCALL           CF0_READ_STATUS
0377   029A 54 C0       	                            ANL		        A, #%11000000               ; Mask busy and rdy bits
0378   029C 64 40                                       XRL		        A, #%01000000               ; we want busy(7) to be 0 and drvrdy(6) to be 1
0379   029E 70 F7       	                            JNZ		        CF0_LOOP_CMD_RDY    		; 
0380   02A0 22          	                            RET
0381   02A1             
0382   02A1             ;***************************************************************************
0383   02A1             ; LOOP_DAT_RDY
0384   02A1             ; Function: Loops until status register bit 7 (busy) is 0 and drq(3) is 1
0385   02A1             ;***************************************************************************		
0386   02A1 12 02 E7    CF0_LOOP_DAT_RDY:               LCALL           CF0_READ_STATUS
0387   02A4 54 88       	                            ANL		        A, #%10001000               ; Mask busy and drq bits
0388   02A6 64 08                                       XRL		        A, #%00001000               ; we want busy(7) to be 0 and drq(3) to be 1
0389   02A8 70 F7       	                            JNZ		        CF0_LOOP_DAT_RDY    		; 
0390   02AA 22          	                            RET
0391   02AB             
0392   02AB             ;*************************************************************
0393   02AB             ; WRITE_CF_0_DATA
0394   02AB             ; PARAMETER: A, DATA
0395   02AB             ;*************************************************************
0396   02AB 90 FF 20    CF0_WRITE_DATA:		            MOV				DPTR, #CF_0_PORT_DATA
0397   02AE 02 01 C6                                    LJMP            IOWRITE
0398   02B1             
0399   02B1 90 FF 20    CF0_READ_DATA:		            MOV				DPTR, #CF_0_PORT_DATA
0400   02B4 02 01 CE                                    LJMP            IOREAD
0401   02B7             
0402   02B7 90 FF 21    CF0_WRITE_FEATURES:	        	MOV				DPTR, #CF_0_PORT_FEATURES
0403   02BA 02 01 C6                                    LJMP            IOWRITE
0404   02BD             
0405   02BD 90 FF 21    CF0_READ_ERROR:		            MOV				DPTR, #CF_0_PORT_ERROR
0406   02C0 02 01 CE                                    LJMP            IOREAD
0407   02C3             
0408   02C3 90 FF 22    CF0_WRITE_SECTOR_COUNT:	        MOV		    	DPTR, #CF_0_PORT_SECTOR_COUNT
0409   02C6 02 01 C6                                    LJMP            IOWRITE                                
0410   02C9             
0411   02C9 90 FF 23    CF0_WRITE_LBA_0:		        MOV				DPTR, #CF_0_PORT_LBA_0
0412   02CC 02 01 C6                                    LJMP            IOWRITE                                
0413   02CF             
0414   02CF 90 FF 24    CF0_WRITE_LBA_1:		        MOV				DPTR, #CF_0_PORT_LBA_1
0415   02D2 02 01 C6                                    LJMP            IOWRITE                                
0416   02D5             
0417   02D5 90 FF 25    CF0_WRITE_LBA_2:		        MOV				DPTR, #CF_0_PORT_LBA_2
0418   02D8 02 01 C6                                    LJMP            IOWRITE                                
0419   02DB             
0420   02DB 90 FF 26    CF0_WRITE_LBA_3:		        MOV				DPTR, #CF_0_PORT_LBA_3
0421   02DE 02 01 C6                                    LJMP            IOWRITE                                
0422   02E1             
0423   02E1 90 FF 27    CF0_WRITE_COMMAND:		        MOV				DPTR, #CF_0_PORT_COMMAND
0424   02E4 02 01 C6                                    LJMP            IOWRITE                                
0425   02E7             
0426   02E7             ;****************************************************************
0427   02E7             ;    7       6       5       4       3       2       1       0      
0428   02E7             ;+-------+-------+-------+-------+-------+-------+-------+-------+     
0429   02E7             ;|  BSY  | DRDY  |  DWF  |  DSC  |  DRQ  | CORR  |  IDX  |  ERR  |      
0430   02E7             ;+-------+-------+-------+-------+-------+-------+-------+-------+
0431   02E7             ;****************************************************************
0432   02E7 90 FF 27    CF0_READ_STATUS:		        MOV				DPTR, #CF_0_PORT_STATUS
0433   02EA 02 01 CE                                    LJMP            IOREAD
0434   02ED             
0435   02ED             
0436   02ED             ;========================================================================================================
0437   02ED             UART0_BASE              .EQU            0FF30H
0438   02ED             UART0_DATA              .EQU            UART0_BASE + 0	    ;Data in/out
0439   02ED             UART0_RXX               .EQU            UART0_BASE + 1      ;Check RX
0440   02ED             UART0_INTR              .EQU            UART0_BASE + 2      ;Interrupts
0441   02ED             UART0_LINE_CTRL         .EQU            UART0_BASE + 3      ;Line control
0442   02ED             UART0_MODEM_CTRL        .EQU            UART0_BASE + 4      ;Modem control
0443   02ED             UART0_LINE_STATUS       .EQU            UART0_BASE + 5      ;Line status
0444   02ED             UART0_MODEM_STATUS      .EQU            UART0_BASE + 6      ;Modem status
0445   02ED             UART0_SCRATCH           .EQU            UART0_BASE + 7      ;Scratch register		
0446   02ED             		
0447   02ED             ;***************************************************************************
0448   02ED             ;UART_INIT
0449   02ED             ;Function: Initialize the UART to BAUD Rate 9600 (1.8432 MHz clock input)
0450   02ED             ;***************************************************************************
0451   02ED 90 FF 33    UART_INIT:                      MOV				DPTR, #UART0_LINE_CTRL
0452   02F0 74 08                                       MOV             A, #08h
0453   02F2 F0                                          MOVX            @DPTR, A                ;Mask to Set DLAB Flag
0454   02F3             
0455   02F3 90 FF 30                                    MOV				DPTR, #UART0_DATA
0456   02F6 74 0C                                       MOV             A, #12                  ;Divisor = 12 @ 9600bps w/ 1.8432 Mhz
0457   02F8 F0                                          MOVX            @DPTR, A                ;Set BAUD rate to 9600
0458   02F9             
0459   02F9 90 FF 31                                    MOV				DPTR, #UART0_RXX
0460   02FC 74 00                                       MOV             A, #00                  
0461   02FE F0                                          MOVX            @DPTR, A                
0462   02FF             
0463   02FF 90 FF 33                                    MOV				DPTR, #UART0_LINE_CTRL  ;Set 8-bit data, 1 stop bit, reset DLAB Flag
0464   0302 74 03                                       MOV             A, #03             
0465   0304 F0                                          MOVX            @DPTR, A                                                
0466   0305             
0467   0305 90 FF 31                                    MOV				DPTR, #UART0_RXX         ;Enable receive data available interrupt only
0468   0308 74 01                                       MOV             A, #01           
0469   030A F0                                          MOVX            @DPTR, A                                                                                
0470   030B 22                              			RET		
0471   030C             		
0472   030C             ;***************************************************************************
0473   030C             ;UART_PRNT_STR:
0474   030C             ;Function: Print out string starting at MEM location (HL) to 16550 UART
0475   030C             ;***************************************************************************
0476   030C             EOS                             .EQU            0
0477   030C             UART0_PRINT_STR:                
0478   030C E0          UART0_PRINT_STR_LP:             MOVX            A, @DPTR
0479   030D B4 00 07                                    CJNE            A, #EOS, UART0_PRINT_STR_END
0480   0310 12 03 21    			                    LCALL	        UART0_TX
0481   0313 A3                                          INC		        DPTR					;Increment pointer to next char
0482   0314 02 03 0C                                    LJMP	        UART0_PRINT_STR_LP	    ;Transmit loop
0483   0317 22          UART0_PRINT_STR_END:            RET	 
0484   0318             			 	
0485   0318             ;***************************************************************************
0486   0318             ;UART_TX_READY
0487   0318             ;Function: Check if UART is ready to transmit
0488   0318             ;***************************************************************************
0489   0318             UART0_TX_RDY:                    
0490   0318 90 FF 35    UART0_TX_RDY_LP:			     MOV            DPTR, #UART0_LINE_STATUS
0491   031B E0                                           MOVX           A, @DPTR
0492   031C 54 20                                        ANL            A, #%00100000
0493   031E 60 F8                                        JZ             UART0_TX_RDY_LP
0494   0320             			                     
0495   0320 22          			                     RET
0496   0321             
0497   0321             ;***************************************************************************
0498   0321             ;UART_TX
0499   0321             ;Function: Transmit character in A to UART
0500   0321             ;***************************************************************************
0501   0321 12 03 18    UART0_TX:                       LCALL           UART0_TX_RDY			;Make sure UART is ready to receive
0502   0324 90 FF 30                                    MOV				DPTR, #UART0_DATA
0503   0327 F0                                          MOVX            @DPTR, A                ;Set BAUD rate to 9600
0504   0328 22          			                    RET
0505   0329             				
0506   0329             ;***************************************************************************
0507   0329             ;UART_TX_READY
0508   0329             ;Function: Check if UART is ready to transmit
0509   0329             ;***************************************************************************
0510   0329             UART0_RX_RDY:                    
0511   0329 90 FF 35    UART0_RX_RDY_LP:			     MOV            DPTR, #UART0_LINE_STATUS
0512   032C E0                                           MOVX           A, @DPTR
0513   032D 54 01                                        ANL            A, #%00000001
0514   032F 60 F8                                        JZ             UART0_RX_RDY_LP
0515   0331             			                     
0516   0331 22          			                     RET
0517   0332             	
0518   0332             ;***************************************************************************
0519   0332             ;UART_RX
0520   0332             ;Function: Receive character in UART to A
0521   0332             ;***************************************************************************
0522   0332 12 03 29    UART0_RX:                       LCALL           UART0_RX_RDY			;Make sure UART is ready to receive
0523   0335 90 FF 30                                    MOV				DPTR, #UART0_DATA
0524   0338 E0                                          MOVX            A, @DPTR                ;Set BAUD rate to 9600
0525   0339 22          			                    RET
0526   033A             
0527   033A             ;========================================================================================================
0528   033A             ;*************************************************************
0529   033A             ; CLEAR_MEMORTY FUNCTION
0530   033A 90 00 00    CLR_MEMORY:			        MOV				DPTR, #0000h
0531   033D 7E FF       CLR_MEMORY_1:		        MOV				R6, #0FFH
0532   033F 7F F0       CLR_MEMORY_2:		        MOV				R7, #0F0H
0533   0341 E4          CLR_MEMORY_3:		        CLR				A
0534   0342 F0          					        MOVX			@DPTR,A
0535   0343 A3          					        INC				DPTR
0536   0344 DF FB       					        DJNZ			R7, CLR_MEMORY_3
0537   0346 DE F7       					        DJNZ			R6, CLR_MEMORY_2
0538   0348 22          CLR_MEMORY_END:		        RET
0539   0349             
0540   0349             ;*************************************************************
0541   0349             ; COPY_BIOS FUNCTION
0542   0349             ;*************************************************************
0543   0349 90 00 00    COPYBIOS:			        MOV				DPTR, #0000h
0544   034C 7E 80       COPYBIOS_1:			        MOV				R6, #080H
0545   034E 7F 00       COPYBIOS_2:			        MOV				R7, #000H
0546   0350 E4          COPYBIOS_3:			        CLR				A
0547   0351 93          					        MOVC			A, @A+DPTR
0548   0352 F0          					        MOVX			@DPTR,A
0549   0353 A3          					        INC				DPTR
0550   0354 DF FA       					        DJNZ			R7, COPYBIOS_3
0551   0356 DE F6       					        DJNZ			R6, COPYBIOS_2
0552   0358 22          COPYBIOS_END:		        RET				
0553   0359             
0554   0359             ;*************************************************************
0555   0359             ; COMPARE_BIOS FUNCTION
0556   0359             ;*************************************************************
0557   0359 90 00 00    CMPBIOS:			        MOV				DPTR, #0000h
0558   035C 7E 80       CMPBIOS_1:			        MOV				R6, #080H
0559   035E 7F 00       CMPBIOS_2:			        MOV				R7, #000H
0560   0360 E4          CMPBIOS_3:			        CLR				A
0561   0361 93          					        MOVC			A, @A+DPTR
0562   0362 F8          					        MOV				R0, A
0563   0363 E0          					        MOVX			A, @DPTR
0564   0364 98          					        SUBB			A, R0
0565   0365 70 05       					        JNZ				CMPBIOS_END
0566   0367 A3          					        INC				DPTR
0567   0368 DF F6       					        DJNZ			R7, CMPBIOS_3
0568   036A DE F2       					        DJNZ			R6, CMPBIOS_2
0569   036C 22          CMPBIOS_END:		        RET	
0570   036D             
0571   036D             ;========================================================================================================
0572   036D             ;*************************************************************
0573   036D             ; EXIT_BOOT FUNCTION
0574   036D             ;*************************************************************
0575   036D             PORT_EXIT_BOOT		.EQU            0FF70h
0576   036D             PORT_ENTER_ISP		.EQU            0FF71h
0577   036D             PORT_WARM_BOOT		.EQU            0FF72h
0578   036D             
0579   036D 90 FF 70    EXIT_BOOT:			        MOV				DPTR, #PORT_EXIT_BOOT
0580   0370 02 01 C6    					        LJMP            IOWRITE
0581   0373             
0582   0373             ;*************************************************************
0583   0373             ; ENTER_ISP FUNCTION
0584   0373             ;*************************************************************
0585   0373 90 FF 71    ENTER_ISP:			        MOV				DPTR, #PORT_ENTER_ISP
0586   0376 02 01 C6    					        LJMP            IOWRITE
0587   0379             
0588   0379             ;*************************************************************
0589   0379             ; WARM_BOOT FUNCTION
0590   0379             ;*************************************************************
0591   0379 90 FF 72    WARM_BOOT:			        MOV				DPTR, #PORT_WARM_BOOT
0592   037C 02 01 C6    					        LJMP            IOWRITE
0593   037F             
0594   037F                                         .END
ADDR  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
-----------------------------------------------------
0000  02 01 00 02 00 26 00 00 00 00 00 02 00 26 00 00
0010  00 00 00 02 00 26 00 00 00 00 00 02 00 26 00 00
0020  00 00 00 02 00 26 22 00 00 00 00 00 00 00 00 00
0030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0100  75 81 20 12 01 9B 12 01 69 75 90 11 12 03 49 75
0110  90 12 12 03 59 75 90 13 B4 00 09 12 03 6D 75 90
0120  14 02 01 1E 75 90 15 02 01 24 7D 32 7E 64 7F 64
0130  DF FE DE FA DD F6 22 75 90 00 74 80 12 01 D0 75
0140  90 01 74 5A 75 90 02 12 01 DC 75 90 03 75 90 04
0150  75 90 05 12 01 E8 75 90 06 75 90 07 75 90 08 12
0160  01 EE 75 90 09 75 90 10 22 75 90 80 74 80 12 01
0170  D6 75 90 81 74 A5 75 90 82 12 01 F4 75 90 83 75
0180  90 84 75 90 85 12 01 FA 75 90 86 75 90 87 75 90
0190  88 12 02 00 75 90 89 75 90 90 22 75 90 01 12 01
01A0  2A 75 90 02 12 01 2A 75 90 04 12 01 2A 75 90 08
01B0  12 01 2A 75 90 10 12 01 2A 75 90 20 12 01 2A 75
01C0  90 40 12 01 2A 22 75 90 83 F0 75 90 84 22 E0 22
01D0  90 FF 03 02 01 C6 90 FF 13 02 01 C6 75 90 81 90
01E0  FF 00 75 90 82 02 01 C6 90 FF 01 02 01 C6 90 FF
01F0  02 02 01 C6 90 FF 10 02 01 C6 90 FF 11 02 01 C6
0200  90 FF 12 02 01 C6 90 FF 00 02 01 CE 90 FF 01 02
0210  01 CE 90 FF 02 02 01 CE 90 FF 10 02 01 CE 90 FF
0220  11 02 01 CE 90 FF 12 02 01 CE 74 01 12 02 B7 74
0230  EF 12 02 E1 22 12 02 8F 74 01 12 02 C3 12 02 8F
0240  74 00 12 02 C9 12 02 8F 74 00 12 02 CF 12 02 8F
0250  74 00 12 02 D5 12 02 8F 74 E0 12 02 DB 12 02 61
0260  22 12 02 97 74 20 12 02 E1 12 02 A1 12 02 E7 54
0270  01 70 EE 90 10 00 78 00 12 02 A1 12 02 B1 75 83
0280  00 F0 12 02 A1 12 02 B1 75 82 00 F0 D8 EA 22 12
0290  02 E7 54 80 70 F9 22 12 02 E7 54 C0 64 40 70 F7
02A0  22 12 02 E7 54 88 64 08 70 F7 22 90 FF 20 02 01
02B0  C6 90 FF 20 02 01 CE 90 FF 21 02 01 C6 90 FF 21
02C0  02 01 CE 90 FF 22 02 01 C6 90 FF 23 02 01 C6 90
02D0  FF 24 02 01 C6 90 FF 25 02 01 C6 90 FF 26 02 01
02E0  C6 90 FF 27 02 01 C6 90 FF 27 02 01 CE 90 FF 33
02F0  74 08 F0 90 FF 30 74 0C F0 90 FF 31 74 00 F0 90
0300  FF 33 74 03 F0 90 FF 31 74 01 F0 22 E0 B4 00 07
0310  12 03 21 A3 02 03 0C 22 90 FF 35 E0 54 20 60 F8
0320  22 12 03 18 90 FF 30 F0 22 90 FF 35 E0 54 01 60
0330  F8 22 12 03 29 90 FF 30 E0 22 90 00 00 7E FF 7F
0340  F0 E4 F0 A3 DF FB DE F7 22 90 00 00 7E 80 7F 00
0350  E4 93 F0 A3 DF FA DE F6 22 90 00 00 7E 80 7F 00
0360  E4 93 F8 E0 98 70 05 A3 DF F6 DE F2 22 90 FF 70
0370  02 01 C6 90 FF 71 02 01 C6 90 FF 72 02 01 C6 00


tasm: Number of errors = 0
