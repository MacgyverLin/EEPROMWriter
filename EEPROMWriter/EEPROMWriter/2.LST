0001   0000                                 .include "8051.h"
0001+  0000             ;*************************************************************
0002+  0000             ;*  TASM 8051/8052/80154 SFR BIT/BYTE MNEMONIC EQUATES LIST  *
0003+  0000             ;*************************************************************
0004+  0000             
0005+  0000             P0      .equ    080H    ;Port 0
0006+  0000             SP      .equ    081H    ;Stack pointer
0007+  0000             DPL     .equ    082H
0008+  0000             DPH     .equ    083H
0009+  0000             PCON    .equ    087H
0010+  0000             TCON    .equ    088H
0011+  0000             TMOD    .equ    089H
0012+  0000             TL0     .equ    08AH
0013+  0000             TL1     .equ    08BH
0014+  0000             TH0     .equ    08CH
0015+  0000             TH1     .equ    08DH
0016+  0000             P1      .equ    090H    ;Port 1
0017+  0000             SCON    .equ    098H
0018+  0000             SBUF    .equ    099H
0019+  0000             P2      .equ    0A0H    ;Port 2
0020+  0000             IE      .equ    0A8H
0021+  0000             P3      .equ    0B0H    ;Port 3
0022+  0000             IP      .equ    0B8H
0023+  0000             T2CON   .equ    0C8H    ;8052, 80154 only
0024+  0000             RCAP2L  .equ    0CAH    ;8052, 80154 only
0025+  0000             RCAP2H  .equ    0CBH    ;8052, 80154 only
0026+  0000             TL2     .equ    0CCH    ;8052, 80154 only
0027+  0000             TH2     .equ    0CDH    ;8052, 80154 only
0028+  0000             PSW     .equ    0D0H
0029+  0000             ACC     .equ    0E0H    ;Accumulator
0030+  0000             B       .equ    0F0H    ;Secondary Accumulator
0031+  0000             IOCON   .equ    0F8H    ;80154 only
0032+  0000             
0033+  0000             ;PORT 0 BITS
0034+  0000             P0.0    .equ    080H    ;Port 0 bit 0
0035+  0000             P0.1    .equ    081H    ;Port 0 bit 1
0036+  0000             P0.2    .equ    082H    ;Port 0 bit 2
0037+  0000             P0.3    .equ    083H    ;Port 0 bit 3
0038+  0000             P0.4    .equ    084H    ;Port 0 bit 4
0039+  0000             P0.5    .equ    085H    ;Port 0 bit 5
0040+  0000             P0.6    .equ    086H    ;Port 0 bit 6
0041+  0000             P0.7    .equ    087H    ;Port 0 bit 7
0042+  0000             
0043+  0000             ;PORT 1 BITS
0044+  0000             P1.0    .equ    090H    ;Port 1 bit 0
0045+  0000             P1.1    .equ    091H    ;Port 1 bit 1
0046+  0000             P1.2    .equ    092H    ;Port 1 bit 2
0047+  0000             P1.3    .equ    093H    ;Port 1 bit 3
0048+  0000             P1.4    .equ    094H    ;Port 1 bit 4
0049+  0000             P1.5    .equ    095H    ;Port 1 bit 5
0050+  0000             P1.6    .equ    096H    ;Port 1 bit 6
0051+  0000             P1.7    .equ    097H    ;Port 1 bit 7
0052+  0000             
0053+  0000             ;PORT 2 BITS
0054+  0000             P2.0    .equ    0A0H    ;Port 2 bit 0
0055+  0000             P2.1    .equ    0A1H    ;Port 2 bit 1
0056+  0000             P2.2    .equ    0A2H    ;Port 2 bit 2
0057+  0000             P2.3    .equ    0A3H    ;Port 2 bit 3
0058+  0000             P2.4    .equ    0A4H    ;Port 2 bit 4
0059+  0000             P2.5    .equ    0A5H    ;Port 2 bit 5
0060+  0000             P2.6    .equ    0A6H    ;Port 2 bit 6
0061+  0000             P2.7    .equ    0A7H    ;Port 2 bit 7
0062+  0000             
0063+  0000             ;PORT 3 BITS
0064+  0000             P3.0    .equ    0B0H    ;Port 3 bit 0
0065+  0000             P3.1    .equ    0B1H    ;Port 3 bit 1
0066+  0000             P3.2    .equ    0B2H    ;Port 3 bit 2
0067+  0000             P3.3    .equ    0B3H    ;Port 3 bit 3
0068+  0000             P3.4    .equ    0B4H    ;Port 3 bit 4
0069+  0000             P3.5    .equ    0B5H    ;Port 3 bit 5
0070+  0000             P3.6    .equ    0B6H    ;Port 3 bit 6
0071+  0000             P3.7    .equ    0B7H    ;Port 3 bit 7
0072+  0000             
0073+  0000             ;ACCUMULATOR BITS
0074+  0000             ACC.0   .equ    0E0H    ;Acc bit 0
0075+  0000             ACC.1   .equ    0E1H    ;Acc bit 1
0076+  0000             ACC.2   .equ    0E2H    ;Acc bit 2
0077+  0000             ACC.3   .equ    0E3H    ;Acc bit 3
0078+  0000             ACC.4   .equ    0E4H    ;Acc bit 4
0079+  0000             ACC.5   .equ    0E5H    ;Acc bit 5
0080+  0000             ACC.6   .equ    0E6H    ;Acc bit 6
0081+  0000             ACC.7   .equ    0E7H    ;Acc bit 7
0082+  0000             
0083+  0000             ;B REGISTER BITS
0084+  0000             B.0     .equ    0F0H    ;Breg bit 0
0085+  0000             B.1     .equ    0F1H    ;Breg bit 1
0086+  0000             B.2     .equ    0F2H    ;Breg bit 2
0087+  0000             B.3     .equ    0F3H    ;Breg bit 3
0088+  0000             B.4     .equ    0F4H    ;Breg bit 4
0089+  0000             B.5     .equ    0F5H    ;Breg bit 5
0090+  0000             B.6     .equ    0F6H    ;Breg bit 6
0091+  0000             B.7     .equ    0F7H    ;Breg bit 7
0092+  0000             
0093+  0000             ;PSW REGISTER BITS
0094+  0000             P       .equ    0D0H    ;Parity flag
0095+  0000             F1      .equ    0D1H    ;User flag 1
0096+  0000             OV      .equ    0D2H    ;Overflow flag
0097+  0000             RS0     .equ    0D3H    ;Register bank select 1
0098+  0000             RS1     .equ    0D4H    ;Register bank select 0
0099+  0000             F0      .equ    0D5H    ;User flag 0
0100+  0000             AC      .equ    0D6H    ;Auxiliary carry flag
0101+  0000             CY      .equ    0D7H    ;Carry flag
0102+  0000             
0103+  0000             ;TCON REGISTER BITS
0104+  0000             IT0     .equ    088H    ;Intr 0 type control
0105+  0000             IE0     .equ    089H    ;Intr 0 edge flag
0106+  0000             IT1     .equ    08AH    ;Intr 1 type control
0107+  0000             IE1     .equ    08BH    ;Intr 1 edge flag
0108+  0000             TR0     .equ    08CH    ;Timer 0 run
0109+  0000             TF0     .equ    08DH    ;Timer 0 overflow
0110+  0000             TR1     .equ    08EH    ;Timer 1 run
0111+  0000             TF1     .equ    08FH    ;Timer 1 overflow
0112+  0000             
0113+  0000             ;SCON REGISTER BITS
0114+  0000             RI      .equ    098H    ;RX Intr flag
0115+  0000             TI      .equ    099H    ;TX Intr flag
0116+  0000             RB8     .equ    09AH    ;RX 9th bit
0117+  0000             TB8     .equ    09BH    ;TX 9th bit
0118+  0000             REN     .equ    09CH    ;Enable RX flag
0119+  0000             SM2     .equ    09DH    ;8/9 bit select flag
0120+  0000             SM1     .equ    09EH    ;Serial mode bit 1
0121+  0000             SM0     .equ    09FH    ;Serial mode bit 0
0122+  0000             
0123+  0000             ;IE REGISTER BITS
0124+  0000             EX0     .equ    0A8H    ;External intr 0
0125+  0000             ET0     .equ    0A9H    ;Timer 0 intr
0126+  0000             EX1     .equ    0AAH    ;External intr 1
0127+  0000             ET1     .equ    0ABH    ;Timer 1 intr
0128+  0000             ES      .equ    0ACH    ;Serial port intr
0129+  0000             ET2     .equ    0ADH    ;Timer 2 intr
0130+  0000             ;Reserved       0AEH    Reserved
0131+  0000             EA      .equ    0AFH    ;Global intr enable
0132+  0000             
0133+  0000             ;IP REGISTER BITS
0134+  0000             PX0     .equ    0B8H    ;Priority level-External intr 0
0135+  0000             PT0     .equ    0B9H    ;Priority level-Timer 0 intr
0136+  0000             PX1     .equ    0BAH    ;Priority level-External intr 1
0137+  0000             PT1     .equ    0BBH    ;Priority level-Timer 1 intr
0138+  0000             PS      .equ    0BCH    ;Priority level-Serial port intr
0139+  0000             PT2     .equ    0BDH    ;Priority level-Timer 2 intr
0140+  0000             ;Reserved       0BEH    Reserved
0141+  0000             PCT     .equ    0BFH    ;Global priority level
0142+  0000             
0143+  0000             ;IOCON REGISTER BITS  80154 ONLY
0144+  0000             ALF     .equ    0F8H    ;Power down port condition
0145+  0000             P1HZ    .equ    0F9H    ;Port 1 control
0146+  0000             P2HZ    .equ    0FAH    ;Port 2 control
0147+  0000             P3HZ    .equ    0FBH    ;Port 3 control
0148+  0000             IZC     .equ    0FCH    ;Pullup select
0149+  0000             SERR    .equ    0FDH    ;Serial reception error
0150+  0000             T32     .equ    0FEH    ;32 bit timer config
0151+  0000             WDT     .equ    0FFH    ;Watchdog config
0152+  0000             
0153+  0000             ;T2CON REGISTER BITS  8052/80154 ONLY
0154+  0000             CP/RL2  .equ    0C8H    ;Timer 2 capture/reload flag
0155+  0000             C/T2    .equ    0C9H    ;Timer 2 timer/counter select
0156+  0000             TR2     .equ    0CAH    ;Timer 2 start/stop
0157+  0000             EXEN2   .equ    0CBH    ;Timer 2 external enable
0158+  0000             TCLK    .equ    0CCH    ;TX clock flag
0159+  0000             RCLK    .equ    0CDH    ;RX clock flag
0160+  0000             EXF2    .equ    0CEH    ;Timer 2 external flag
0161+  0000             TF2     .equ    0CFH    ;Timer 2 overflow
0162+  0000             
0002   0000             ;EXPORT
0003   0000             
0004   0000             RESET_VECTOR        .EQU            0000H
0005   0000             EXTERNAL0_VECTOR    .EQU            0003H
0006   0000             TIMER0_VECTOR       .EQU            000BH
0007   0000             EXTERNAL1_VECTOR    .EQU            0013H
0008   0000             TIMER1_VECTOR       .EQU            001BH
0009   0000             SERIAL_VECTOR       .EQU            0023H
0010   0000             
0011   0000                                 .ORG            RESET_VECTOR
0012   0000 02 01 00    					LJMP			START
0013   0003             
0014   0003                                 .ORG            EXTERNAL0_VECTOR
0015   0003 02 00 26    					LJMP			EXTERNAL0
0016   0006             
0017   000B                                 .ORG            TIMER0_VECTOR
0018   000B 02 00 26    					LJMP			TIMER0
0019   000E             
0020   0013                                 .ORG            EXTERNAL1_VECTOR
0021   0013 02 00 26    					LJMP			EXTERNAL1
0022   0016             
0023   001B                                 .ORG            TIMER1_VECTOR
0024   001B 02 00 26    					LJMP			TIMER1
0025   001E             
0026   0023                                 .ORG            SERIAL_VECTOR
0027   0023 02 00 26    					LJMP			SERIAL
0028   0026             EXTERNAL0:
0029   0026             TIMER0:
0030   0026             EXTERNAL1:
0031   0026             TIMER1:
0032   0026 22          SERIAL:             RET
0033   0027             
0034   0100             					.ORG			0100h
0035   0100             START:
0036   0100 75 81 20    BOOT_SEQUENCE:		MOV				SP, #020h
0037   0103 12 01 7A    					LCALL			LED_TEST
0038   0106             
0039   0106 75 90 01    					MOV				P1, #01h
0040   0109             					;LCALL			CLR_MEMORY
0041   0109             
0042   0109 75 90 02    					MOV				P1, #02h
0043   010C 12 03 6C    					LCALL           COPYBIOS
0044   010F             
0045   010F 75 90 04    					MOV				P1, #04h
0046   0112 12 03 7C    					LCALL           CMPBIOS
0047   0115 B4 00 1B    					CJNE			A, #0, BOOT_FAILED
0048   0118             
0049   0118 12 03 90                        LCALL			EXIT_BOOT
0050   011B             
0051   011B 75 90 08    					MOV				P1, #08h
0052   011E 12 01 46    					LCALL			PIO0_TEST
0053   0121             
0054   0121 75 90 10    					MOV				P1, #10h
0055   0124 12 01 60    					LCALL			PIO1_TEST
0056   0127             
0057   0127 75 90 20    					MOV				P1, #20h
0058   012A                                 ;LCALL           UART0_TEST1
0059   012A                                 ;LCALL           UART0_TEST2
0060   012A                                 ;LCALL           UART0_TEST3
0061   012A 12 01 F1                        LCALL           CF0_TEST
0062   012D             
0063   012D 75 90 81    BOOT_SUCCESS:		MOV				P1, #81h
0064   0130 02 01 2D    					LJMP            BOOT_SUCCESS
0065   0133             
0066   0133 75 90 82    BOOT_FAILED:		MOV				P1, #82h
0067   0136 02 01 33                        LJMP            BOOT_FAILED
0068   0139             
0069   0139             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0070   0139             ; DELAY FUNCTION
0071   0139 7D 01       DELAY:				MOV				R5, #01; #50
0072   013B 7E 01       DELAY1:				MOV				R6, #01; #100
0073   013D 7F 01       DELAY2:				MOV				R7, #01; #100
0074   013F DF FE       DELAY3:				DJNZ			R7, DELAY3
0075   0141 DE FA       					DJNZ			R6, DELAY2
0076   0143 DD F6       					DJNZ			R5, DELAY1
0077   0145 22          					RET
0078   0146             
0079   0146             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0080   0146             ; TEST 8255
0081   0146 74 80       PIO0_TEST:			MOV				A, #080h
0082   0148 12 01 AB    					LCALL           PIO0_WRITE_CTRL
0083   014B             					
0084   014B 74 5A       					MOV				A, #05Ah
0085   014D 12 01 B5    PIO0_TEST_A:		LCALL			PIO0_WRITE_PORT_A
0086   0150             					;LCALL			DELAY
0087   0150 04          					INC				A
0088   0151 70 FA       					JNZ				PIO0_TEST_A
0089   0153             
0090   0153 12 01 BA    PIO0_TEST_B:		LCALL			PIO0_WRITE_PORT_B
0091   0156             					;LCALL			DELAY
0092   0156 04          					INC				A
0093   0157 70 FA       					JNZ				PIO0_TEST_B
0094   0159             
0095   0159 12 01 BF    PIO0_TEST_C:		LCALL			PIO0_WRITE_PORT_C
0096   015C             					;LCALL			DELAY
0097   015C 04          					INC				A
0098   015D 70 FA       					JNZ				PIO0_TEST_C
0099   015F 22          					RET
0100   0160             
0101   0160             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0102   0160             ; TEST 8255
0103   0160 74 80       PIO1_TEST:			MOV				A, #080h
0104   0162 12 01 B0    					LCALL           PIO1_WRITE_CTRL
0105   0165             					
0106   0165 74 A5                           MOV				A, #0A5h
0107   0167 12 01 C4    PIO1_TEST_A:		LCALL			PIO1_WRITE_PORT_A
0108   016A             					;LCALL			DELAY
0109   016A 04          					INC				A
0110   016B 70 FA       					JNZ				PIO1_TEST_A
0111   016D             
0112   016D 12 01 C9    PIO1_TEST_B:		LCALL			PIO1_WRITE_PORT_B
0113   0170             					;LCALL			DELAY
0114   0170 04          					INC				A
0115   0171 70 FA       					JNZ				PIO1_TEST_B
0116   0173             
0117   0173 12 01 CE    PIO1_TEST_C:		LCALL			PIO1_WRITE_PORT_C
0118   0176             					;LCALL			DELAY
0119   0176 04          					INC				A
0120   0177 70 FA       					JNZ				PIO1_TEST_C
0121   0179 22          					RET
0122   017A             
0123   017A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0124   017A             ; TEST LED
0125   017A 75 90 01    LED_TEST:			MOV				P1, #01h
0126   017D 12 01 39    					LCALL			DELAY
0127   0180 75 90 02    					MOV				P1, #02h
0128   0183 12 01 39    					LCALL			DELAY
0129   0186 75 90 04    					MOV				P1, #04h
0130   0189 12 01 39    					LCALL			DELAY
0131   018C 75 90 08    					MOV				P1, #08h
0132   018F 12 01 39    					LCALL			DELAY
0133   0192 75 90 10    					MOV				P1, #10h
0134   0195 12 01 39    					LCALL			DELAY
0135   0198 75 90 20    					MOV				P1, #20h
0136   019B 12 01 39    					LCALL			DELAY
0137   019E 75 90 40    					MOV				P1, #40h
0138   01A1 12 01 39    					LCALL			DELAY
0139   01A4 75 90 80    					MOV				P1, #80h
0140   01A7 12 01 39    					LCALL			DELAY
0141   01AA 22          					RET
0142   01AB             
0143   01AB             ;========================================================================================================
0144   01AB             PIO0_BASE          .EQU            0FF00H
0145   01AB             PIO0_PORT_A        .EQU            PIO0_BASE+0
0146   01AB             PIO0_PORT_B        .EQU            PIO0_BASE+1
0147   01AB             PIO0_PORT_C        .EQU            PIO0_BASE+2
0148   01AB             PIO0_PORT_CTRL     .EQU            PIO0_BASE+3
0149   01AB             
0150   01AB             PIO1_BASE          .EQU            0FF10H
0151   01AB             PIO1_PORT_A        .EQU            PIO1_BASE+0
0152   01AB             PIO1_PORT_B        .EQU            PIO1_BASE+1
0153   01AB             PIO1_PORT_C        .EQU            PIO1_BASE+2
0154   01AB             PIO1_PORT_CTRL     .EQU            PIO1_BASE+3
0155   01AB             ;*************************************************************
0156   01AB             ; INIT_8255_0, INIT_8255_1
0157   01AB             ; INPUT: A, MODE
0158   01AB             ; 76543210 
0159   01AB             ; |||||||+--------- PC0-3  ,  1:INPUT ,  0:OUTPUT
0160   01AB             ; ||||||+---------- PB     ,  1:INPUT ,  0:OUTPUT
0161   01AB             ; |||||+----------- PB MODE,  0:MODE 0,  1:MODE 1
0162   01AB             ; ||||+------------ PC4-7  ,  1:INPUT ,  0:OUTPUT
0163   01AB             ; |||+------------- PA     ,  1:INPUT ,  0:OUTPUT
0164   01AB             ; ||+-------------- PA MODE, 00:MODE 0, 01:MODE 1
0165   01AB             ; |+--------------- PA MODE, 10:MODE 2, 11:X
0166   01AB             ; +---------------- ALWAYS 1
0167   01AB             ;*************************************************************
0168   01AB 90 FF 03    PIO0_WRITE_CTRL:            MOV             DPTR, #PIO0_PORT_CTRL
0169   01AE F0                                      MOVX			@DPTR, A
0170   01AF 22          							RET
0171   01B0             	
0172   01B0 90 FF 13    PIO1_WRITE_CTRL:            MOV             DPTR, #PIO1_PORT_CTRL
0173   01B3 F0                                      MOVX			@DPTR, A
0174   01B4 22          							RET
0175   01B5             
0176   01B5             ;*************************************************************
0177   01B5             ; WRITE_PIO_0_PORT_A
0178   01B5             ; PARAMETER: A, DATA
0179   01B5             ;*************************************************************
0180   01B5 90 FF 00    PIO0_WRITE_PORT_A:		    MOV				DPTR, #PIO0_PORT_A
0181   01B8 F0          							MOVX			@DPTR, A
0182   01B9 22          							RET
0183   01BA             
0184   01BA             ;*************************************************************
0185   01BA             ; WRITE_PIO_0_PORT_B
0186   01BA             ; PARAMETER: A, DATA
0187   01BA             ;*************************************************************
0188   01BA 90 FF 01    PIO0_WRITE_PORT_B:		    MOV				DPTR, #PIO0_PORT_B
0189   01BD F0          							MOVX			@DPTR, A
0190   01BE 22          							RET
0191   01BF             
0192   01BF             ;*************************************************************
0193   01BF             ; WRITE_PIO_0_PORT_C
0194   01BF             ; PARAMETER: A, DATA
0195   01BF             ;*************************************************************
0196   01BF 90 FF 02    PIO0_WRITE_PORT_C:	    	MOV				DPTR, #PIO0_PORT_C
0197   01C2 F0          							MOVX			@DPTR, A
0198   01C3 22          							RET
0199   01C4             
0200   01C4             ;*************************************************************
0201   01C4             ; WRITE_PIO_1_PORT_A
0202   01C4             ; PARAMETER: A, DATA
0203   01C4             ;*************************************************************
0204   01C4 90 FF 10    PIO1_WRITE_PORT_A:		    MOV				DPTR, #PIO1_PORT_A
0205   01C7 F0          							MOVX			@DPTR, A
0206   01C8 22          							RET
0207   01C9             
0208   01C9             ;*************************************************************
0209   01C9             ; WRITE_PIO_1_PORT_B
0210   01C9             ; PARAMETER: A, DATA
0211   01C9             ;*************************************************************
0212   01C9 90 FF 11    PIO1_WRITE_PORT_B:		    MOV				DPTR, #PIO1_PORT_B
0213   01CC F0          							MOVX			@DPTR, A
0214   01CD 22          							RET
0215   01CE             
0216   01CE             ;*************************************************************
0217   01CE             ; WRITE_PIO_1_PORT_C
0218   01CE             ; PARAMETER: A, DATA
0219   01CE             ;*************************************************************
0220   01CE 90 FF 12    PIO1_WRITE_PORT_C:		    MOV				DPTR, #PIO1_PORT_C
0221   01D1 F0          							MOVX			@DPTR, A
0222   01D2 22          							RET
0223   01D3             
0224   01D3             ;*************************************************************
0225   01D3             ; READ_PIO_0_PORT_A
0226   01D3             ; RETURN: A, DATA
0227   01D3             ;*************************************************************
0228   01D3 90 FF 00    PIO0_READ_PORT_A:	        MOV				DPTR, #PIO0_PORT_A
0229   01D6 E0          							MOVX			A, @DPTR
0230   01D7 22          							RET
0231   01D8             
0232   01D8             ;*************************************************************
0233   01D8             ; READ_PIO_0_PORT_B
0234   01D8             ; RETURN: A, DATA
0235   01D8             ;*************************************************************
0236   01D8 90 FF 01    PIO0_READ_PORT_B:	        MOV				DPTR, #PIO0_PORT_B
0237   01DB E0          							MOVX			A, @DPTR
0238   01DC 22          							RET
0239   01DD             
0240   01DD             ;*************************************************************
0241   01DD             ; READ_PIO_0_PORT_C
0242   01DD             ; RETURN: A, DATA
0243   01DD             ;*************************************************************
0244   01DD 90 FF 02    PIO0_READ_PORT_C:	        MOV				DPTR, #PIO0_PORT_C
0245   01E0 E0          							MOVX			A, @DPTR
0246   01E1 22          							RET
0247   01E2             
0248   01E2             ;*************************************************************
0249   01E2             ; READ_PIO_1_PORT_A
0250   01E2             ; RETURN: A, DATA
0251   01E2             ;*************************************************************
0252   01E2 90 FF 10    PIO1_READ_PORT_A:	       	MOV				DPTR, #PIO1_PORT_A
0253   01E5 E0          							MOVX			A, @DPTR
0254   01E6 22          							RET
0255   01E7             
0256   01E7             ;*************************************************************
0257   01E7             ; READ_PIO_1_PORT_B
0258   01E7             ; RETURN: A, DATA
0259   01E7             ;*************************************************************
0260   01E7 90 FF 11    PIO1_READ_PORT_B:	       	MOV				DPTR, #PIO1_PORT_B
0261   01EA E0          							MOVX			A, @DPTR
0262   01EB 22          							RET
0263   01EC             
0264   01EC             ;*************************************************************
0265   01EC             ; READ_PIO_1_PORT_C
0266   01EC             ; RETURN: A, DATA
0267   01EC             ;*************************************************************
0268   01EC 90 FF 12    PIO1_READ_PORT_C:	       	MOV				DPTR, #PIO1_PORT_C
0269   01EF E0          							MOVX			A, @DPTR
0270   01F0 22          							RET
0271   01F1             ;========================================================================================================
0272   01F1             ;*************************************************************
0273   01F1             ; https://z80project.wordpress.com/2015/07/06/z80-8-bit-compact-flash-card-interface-part-1/
0274   01F1             ; 
0275   01F1             ; check data from sector 0 HxD
0276   01F1             ; https://mh-nexus.de/en/hxd/
0277   01F1             ;*************************************************************
0278   01F1             CF_0_BASE                        .EQU            0FF20H
0279   01F1             CF_0_PORT_DATA                   .EQU            CF_0_BASE+0
0280   01F1             CF_0_PORT_ERROR                  .EQU            CF_0_BASE+1
0281   01F1             CF_0_PORT_FEATURES               .EQU            CF_0_BASE+1
0282   01F1             CF_0_PORT_SECTOR_COUNT           .EQU            CF_0_BASE+2
0283   01F1             CF_0_PORT_LBA_0                  .EQU            CF_0_BASE+3
0284   01F1             CF_0_PORT_LBA_1                  .EQU            CF_0_BASE+4
0285   01F1             CF_0_PORT_LBA_2                  .EQU            CF_0_BASE+5
0286   01F1             CF_0_PORT_LBA_3                  .EQU            CF_0_BASE+6
0287   01F1             CF_0_PORT_STATUS                 .EQU            CF_0_BASE+7
0288   01F1             CF_0_PORT_COMMAND                .EQU            CF_0_BASE+7
0289   01F1             
0290   01F1             TEST_BUFFER_PTR                  .EQU            04000h
0291   01F1             
0292   01F1             ;*************************************************************
0293   01F1             ; CF0_TEST
0294   01F1             ; PARAMETERS:
0295   01F1             ; RETURN: 
0296   01F1             ;*************************************************************
0297   01F1             CF0_TEST:
0298   01F1 74 01       CF0_INIT:                       MOV             A, #001h        
0299   01F3 12 02 9A                                    LCALL           CF0_WRITE_FEATURES    ; set 8 bit mode to features port
0300   01F6             
0301   01F6 74 EF                                       MOV             A, #0EFh                    
0302   01F8 12 02 BD                                    LCALL           CF0_WRITE_COMMAND     ; command 'set features'
0303   01FB             
0304   01FB 12 02 74    CF0_TEST_READ_SECTOR:           LCALL           CF0_LOOP_BUSY
0305   01FE 74 01                                       MOV             A, #001h                    
0306   0200 12 02 A4                                    LCALL           CF0_WRITE_SECTOR_COUNT; read 1 sector at a time
0307   0203                                             
0308   0203 12 02 74                                    LCALL           CF0_LOOP_BUSY
0309   0206 74 00                                       MOV             A, #000h                    
0310   0208 12 02 A9                                    LCALL           CF0_WRITE_LBA_0       ; read from lba 0
0311   020B             
0312   020B 12 02 74                                    LCALL           CF0_LOOP_BUSY
0313   020E 74 00                                       MOV             A, #000h                    
0314   0210 12 02 AE                                    LCALL           CF0_WRITE_LBA_1       ; read from lba 0
0315   0213             
0316   0213 12 02 74                                    LCALL           CF0_LOOP_BUSY
0317   0216 74 00                                       MOV             A, #000h                    
0318   0218 12 02 B3                                    LCALL           CF0_WRITE_LBA_2       ; read from lba 0
0319   021B             
0320   021B 12 02 74                                    LCALL           CF0_LOOP_BUSY
0321   021E 74 E0                                       MOV             A, #0E0h                    
0322   0220 12 02 B8                                    LCALL           CF0_WRITE_LBA_3       ; read from lba 0, notes E0h means LBA mode
0323   0223 12 02 3A                                    LCALL           CF0_READ_CMD
0324   0226                                             ;RET             
0325   0226             
0326   0226 12 03 11    								LCALL           UART0_INIT
0327   0229 90 40 00    				                MOV             DPTR, #TEST_BUFFER_PTR
0328   022C 7F 00       								MOV             R7, #00
0329   022E 12 03 38                                    LCALL           UART0_TX_BUF
0330   0231 90 41 00    				                MOV             DPTR, #(TEST_BUFFER_PTR+256)
0331   0234 7F 00       								MOV             R7, #00
0332   0236 12 03 38                                    LCALL           UART0_TX_BUF
0333   0239 22                                          RET                   
0334   023A             								
0335   023A             ;*************************************************************
0336   023A             ; CF0_READ_CMD
0337   023A             ; PARAMETERS:
0338   023A             ; RETURN: 
0339   023A             ;*************************************************************
0340   023A 12 02 7C    CF0_READ_CMD:                   LCALL           CF0_LOOP_CMD_RDY
0341   023D 74 20                                       MOV             A, #020h                    
0342   023F 12 02 BD                                    LCALL           CF0_WRITE_COMMAND     ; command 'read sector'
0343   0242                                             
0344   0242 12 02 86                                    LCALL           CF0_LOOP_DAT_RDY
0345   0245 12 02 C2                                    LCALL           CF0_READ_STATUS
0346   0248 54 01       	                            ANL		        A, #%00000001         ; Mask Error bit
0347   024A 70 EE       	                            JNZ		        CF0_READ_CMD      	  ; 
0348   024C             
0349   024C 90 40 00    CF0_READ_SECTOR:                MOV             DPTR, #TEST_BUFFER_PTR
0350   024F 7F 00                                       MOV             R7, #00h
0351   0251 C0 83       CF0_READ_SECTOR_LP:             PUSH			DPH
0352   0253 C0 82       								PUSH			DPL
0353   0255 12 02 86    								LCALL           CF0_LOOP_DAT_RDY
0354   0258 12 02 95                                    LCALL           CF0_READ_DATA
0355   025B D0 82       								POP				DPL
0356   025D D0 83       								POP				DPH
0357   025F F0                                          MOVX            @DPTR, A
0358   0260 A3          								INC				DPTR
0359   0261             
0360   0261 C0 83       								PUSH			DPH
0361   0263 C0 82       								PUSH			DPL
0362   0265 12 02 86    								LCALL           CF0_LOOP_DAT_RDY
0363   0268 12 02 95                                    LCALL           CF0_READ_DATA
0364   026B D0 82       								POP				DPL
0365   026D D0 83       								POP				DPH
0366   026F F0                                          MOVX            @DPTR, A
0367   0270 A3          								INC				DPTR
0368   0271                                             
0369   0271 DF DE                                       DJNZ            R7, CF0_READ_SECTOR_LP                        
0370   0273 22                                          RET
0371   0274             
0372   0274             ;***************************************************************************
0373   0274             ; LOOP_BUSY
0374   0274             ; Function: Loops until status register bit 7 (busy) is 0
0375   0274             ;***************************************************************************	
0376   0274 12 02 C2    CF0_LOOP_BUSY:                  LCALL           CF0_READ_STATUS
0377   0277 54 80       	                            ANL		        A, #%10000000               ; Mask busy bit
0378   0279 70 F9       	                            JNZ		        CF0_LOOP_BUSY			    ; Loop until busy(7) is 0
0379   027B 22          	                            RET
0380   027C             
0381   027C             ;***************************************************************************
0382   027C             ;LOOP_CMD_RDY
0383   027C             ;Function: Loops until status register bit 7 (busy) is 0 and drvrdy(6) is 1
0384   027C             ;***************************************************************************	
0385   027C 12 02 C2    CF0_LOOP_CMD_RDY:               LCALL           CF0_READ_STATUS
0386   027F 54 C0       	                            ANL		        A, #%11000000               ; Mask busy and rdy bits
0387   0281 64 40                                       XRL		        A, #%01000000               ; we want busy(7) to be 0 and drvrdy(6) to be 1
0388   0283 70 F7       	                            JNZ		        CF0_LOOP_CMD_RDY    		; 
0389   0285 22          	                            RET
0390   0286             
0391   0286             ;***************************************************************************
0392   0286             ; LOOP_DAT_RDY
0393   0286             ; Function: Loops until status register bit 7 (busy) is 0 and drq(3) is 1
0394   0286             ;***************************************************************************		
0395   0286 12 02 C2    CF0_LOOP_DAT_RDY:               LCALL           CF0_READ_STATUS
0396   0289 54 88       	                            ANL		        A, #%10001000               ; Mask busy and drq bits
0397   028B 64 08                                       XRL		        A, #%00001000               ; we want busy(7) to be 0 and drq(3) to be 1
0398   028D 70 F7       	                            JNZ		        CF0_LOOP_DAT_RDY    		; 
0399   028F 22          	                            RET
0400   0290             
0401   0290             ;*************************************************************
0402   0290             ; WRITE_CF_0_DATA
0403   0290             ; PARAMETER: A, DATA
0404   0290             ;*************************************************************
0405   0290 90 FF 20    CF0_WRITE_DATA:		            MOV				DPTR, #CF_0_PORT_DATA
0406   0293 F0          							    MOVX			@DPTR, A
0407   0294 22          							    RET
0408   0295             
0409   0295 90 FF 20    CF0_READ_DATA:		            MOV				DPTR, #CF_0_PORT_DATA
0410   0298 E0          							    MOVX			A, @DPTR
0411   0299 22          							    RET
0412   029A             
0413   029A 90 FF 21    CF0_WRITE_FEATURES:	        	MOV				DPTR, #CF_0_PORT_FEATURES
0414   029D F0          							    MOVX			@DPTR, A
0415   029E 22          							    RET
0416   029F             
0417   029F 90 FF 21    CF0_READ_ERROR:		            MOV				DPTR, #CF_0_PORT_ERROR
0418   02A2 E0          							    MOVX			A, @DPTR
0419   02A3 22          							    RET
0420   02A4             
0421   02A4 90 FF 22    CF0_WRITE_SECTOR_COUNT:	        MOV		    	DPTR, #CF_0_PORT_SECTOR_COUNT
0422   02A7 F0          							    MOVX			@DPTR, A
0423   02A8 22          							    RET
0424   02A9             
0425   02A9 90 FF 23    CF0_WRITE_LBA_0:		        MOV				DPTR, #CF_0_PORT_LBA_0
0426   02AC F0          							    MOVX			@DPTR, A
0427   02AD 22          							    RET
0428   02AE             
0429   02AE 90 FF 24    CF0_WRITE_LBA_1:		        MOV				DPTR, #CF_0_PORT_LBA_1
0430   02B1 F0          							    MOVX			@DPTR, A
0431   02B2 22          							    RET
0432   02B3             
0433   02B3 90 FF 25    CF0_WRITE_LBA_2:		        MOV				DPTR, #CF_0_PORT_LBA_2
0434   02B6 F0          							    MOVX			@DPTR, A
0435   02B7 22          							    RET
0436   02B8             
0437   02B8 90 FF 26    CF0_WRITE_LBA_3:		        MOV				DPTR, #CF_0_PORT_LBA_3
0438   02BB F0          							    MOVX			@DPTR, A
0439   02BC 22          							    RET
0440   02BD             
0441   02BD 90 FF 27    CF0_WRITE_COMMAND:		        MOV				DPTR, #CF_0_PORT_COMMAND
0442   02C0 F0          							    MOVX			@DPTR, A
0443   02C1 22          							    RET
0444   02C2             
0445   02C2             ;****************************************************************
0446   02C2             ;    7       6       5       4       3       2       1       0      
0447   02C2             ;+-------+-------+-------+-------+-------+-------+-------+-------+     
0448   02C2             ;|  BSY  | DRDY  |  DWF  |  DSC  |  DRQ  | CORR  |  IDX  |  ERR  |      
0449   02C2             ;+-------+-------+-------+-------+-------+-------+-------+-------+
0450   02C2             ;****************************************************************
0451   02C2 90 FF 27    CF0_READ_STATUS:		        MOV				DPTR, #CF_0_PORT_STATUS
0452   02C5 E0          							    MOVX			A, @DPTR
0453   02C6 22          							    RET
0454   02C7             
0455   02C7             ;========================================================================================================
0456   02C7             EOS                             .EQU            0
0457   02C7 0D0A5A4D4338MON_MSG:                        .TEXT           "\r\nZMC80 Computer\t\t2015 MCook\r\n\r\n"
0457   02CD 3020436F6D7075746572090932303135204D436F6F6B0D0A0D0A
0458   02E7 00          								.BYTE			0
0459   02E8             
0460   02E8 12 03 11    UART0_TEST1:                    LCALL           UART0_INIT
0461   02EB 12 03 44    UART0_TEST1_LP:                 LCALL           UART0_RX
0462   02EE 12 03 27                                    LCALL           UART0_TX
0463   02F1 02 02 EB                                    LJMP            UART0_TEST1_LP
0464   02F4 22                                          RET
0465   02F5             
0466   02F5 12 03 11    UART0_TEST2:					LCALL           UART0_INIT
0467   02F8 90 02 C7    UART0_TEST2_LP:                 MOV             DPTR, #MON_MSG
0468   02FB 12 03 2F                                    LCALL           UART0_TX_STR
0469   02FE 02 02 F8                                    LJMP            UART0_TEST2_LP
0470   0301 22                                          RET                                
0471   0302             
0472   0302 12 03 11    UART0_TEST3:                    LCALL           UART0_INIT
0473   0305 90 02 C7    UART0_TEST3_LP:                 MOV             DPTR, #MON_MSG
0474   0308 7F 24                                       MOV             R7, #36
0475   030A 12 03 38                                    LCALL           UART0_TX_BUF
0476   030D 02 03 05                                    LJMP            UART0_TEST3_LP
0477   0310 22                                          RET                                
0478   0311             
0479   0311             ;*************************************************************
0480   0311             ; UART0_INIT
0481   0311             ; PARAMETERS: NONE
0482   0311             ; RETURN: NONE
0483   0311             ;*************************************************************
0484   0311 75 98 50    UART0_INIT:                     MOV             SCON, #050h ; mode 1
0485   0314 75 89 21                                    MOV             TMOD, #021h ; timer 1 mode2, timer 0 mode 1
0486   0317 75 87 80                                    MOV             PCON, #080h ; power control, double baud rate
0487   031A 75 8D FA                                    MOV             TH1, #0FAh  ; baud rate = 4800
0488   031D 75 8B FA                                    MOV             TL1, #0FAh  ; 
0489   0320                                             ; SETB            ES          ; Enable Serial Interrupt
0490   0320                                             ; SETB            EA          ; Enable Interrupt
0491   0320 D2 8E                                       SETB            TR1         ; Timer 1 Run
0492   0322 22                                          RET
0493   0323             
0494   0323             ;*************************************************************
0495   0323             ; UART0_WAIT_TX_DONE
0496   0323             ; PARAMETERS: NONE
0497   0323             ; RETURN: NONE
0498   0323             ;*************************************************************
0499   0323 30 99 FD    UART0_WAIT_TX_DONE:             JNB             TI, UART0_WAIT_TX_DONE
0500   0326 22          			                    RET
0501   0327             
0502   0327             ;*************************************************************
0503   0327             ; UART0_TX
0504   0327             ; PARAMETERS: A, DATA TO BE SEND
0505   0327             ; RETURN: NONE
0506   0327             ;*************************************************************
0507   0327 C2 99       UART0_TX:                       CLR             TI
0508   0329 F5 99                                       MOV             SBUF, A
0509   032B 12 03 23                                    LCALL           UART0_WAIT_TX_DONE
0510   032E 22          			                    RET
0511   032F             
0512   032F             ;*************************************************************
0513   032F             ; UART0_TX_STR
0514   032F             ; PARAMETERS: DPTR=data src pointer
0515   032F             ; RETURN: NONE
0516   032F             ;*************************************************************
0517   032F             UART0_TX_STR:                   
0518   032F E0          UART0_TX_STR_LP:                MOVX            A, @DPTR                ; DPTR=data src pointer
0519   0330 12 03 27    			                    LCALL	        UART0_TX
0520   0333 A3                                          INC		        DPTR					; Increment pointer to next char                                
0521   0334 B4 00 F8                                    CJNE            A, #EOS, UART0_TX_STR_LP
0522   0337                                             ; DJNZ            R7, UART0_TX_STR_LP    ; Transmit loop
0523   0337 22          UART0_TX_STR_END:               RET	 
0524   0338             
0525   0338             ;*************************************************************
0526   0338             ; UART0_TX_BUF
0527   0338             ; PARAMETERS: DPTR=data src pointer, R7=Buffer size
0528   0338             ; RETURN: NONE
0529   0338             ;*************************************************************
0530   0338             UART0_TX_BUF:                   
0531   0338 E0          UART0_TX_BUF_LP:                MOVX            A, @DPTR                ; DPTR=data src pointer
0532   0339 12 03 27    			                    LCALL	        UART0_TX
0533   033C A3                                          INC		        DPTR					; Increment pointer to next char                                
0534   033D DF F9                                       DJNZ            R7, UART0_TX_BUF_LP     ; Transmit loop
0535   033F 22          UART0_TX_BUF_END:               RET	 
0536   0340             
0537   0340             ;*************************************************************
0538   0340             ; UART0_WAIT_RX_DONE
0539   0340             ; PARAMETERS: NONE
0540   0340             ; RETURN: NONE
0541   0340             ;*************************************************************
0542   0340 30 98 FD    UART0_WAIT_RX_DONE:             JNB              RI, UART0_WAIT_RX_DONE
0543   0343 22          			                    RET
0544   0344             
0545   0344             ;*************************************************************
0546   0344             ; UART0_RX
0547   0344             ; PARAMETERS: NONE
0548   0344             ; RETURN: A, DATA RECEIVED
0549   0344             ;*************************************************************
0550   0344 C2 98       UART0_RX:                       CLR             RI
0551   0346 12 03 40                                    LCALL           UART0_WAIT_RX_DONE
0552   0349 E5 99                                       MOV             A, SBUF
0553   034B 22          			                    RET
0554   034C                                             
0555   034C             ;*************************************************************
0556   034C             ; UART0_RX_STR
0557   034C             ; PARAMETERS: DPTR=data dst pointer
0558   034C             ; RETURN: NONE
0559   034C             ;*************************************************************
0560   034C             UART0_RX_STR:                   
0561   034C 12 03 44    UART0_RX_STR_LP:                LCALL	        UART0_RX
0562   034F F0                                          MOVX            @DPTR, A                ; DPTR=data src pointer
0563   0350 A3                                          INC		        DPTR					; Increment pointer to next char                                
0564   0351 B4 00 F8                                    CJNE            A, #EOS, UART0_RX_STR_LP
0565   0354                                             ; DJNZ            R7, UART0_RX_STR_LP    ; Transmit loop
0566   0354 22          UART0_RX_STR_END:               RET
0567   0355             
0568   0355             ;*************************************************************
0569   0355             ; UART0_RX_BUF
0570   0355             ; PARAMETERS: DPTR=data dst pointer, R7=Buffer size
0571   0355             ; RETURN: NONE
0572   0355             ;*************************************************************
0573   0355             UART0_RX_BUF:                   
0574   0355 12 03 44    UART0_RX_BUF_LP:                LCALL	        UART0_RX
0575   0358 F0                                          MOVX            @DPTR, A                ; DPTR=data src pointer
0576   0359 A3                                          INC		        DPTR					; Increment pointer to next char                                
0577   035A                                             ; CJNE            A, #EOS, UART0_RX_BUF_LP
0578   035A DF F9                                       DJNZ            R7, UART0_RX_BUF_LP    ; Transmit loop
0579   035C 22          UART0_RX_BUF_END:               RET
0580   035D             
0581   035D~            #IFDEF PC16550
0582   035D~            ;========================================================================================================
0583   035D~            UART0_BASE              .EQU            0FF30H
0584   035D~            UART0_DATA              .EQU            UART0_BASE + 0	    ;Data in/out
0585   035D~            UART0_RXX               .EQU            UART0_BASE + 1      ;Check RX
0586   035D~            UART0_INTR              .EQU            UART0_BASE + 2      ;Interrupts
0587   035D~            UART0_LINE_CTRL         .EQU            UART0_BASE + 3      ;Line control
0588   035D~            UART0_MODEM_CTRL        .EQU            UART0_BASE + 4      ;Modem control
0589   035D~            UART0_LINE_STATUS       .EQU            UART0_BASE + 5      ;Line status
0590   035D~            UART0_MODEM_STATUS      .EQU            UART0_BASE + 6      ;Modem status
0591   035D~            UART0_SCRATCH           .EQU            UART0_BASE + 7      ;Scratch register		
0592   035D~            		
0593   035D~            ;***************************************************************************
0594   035D~            ;UART_INIT
0595   035D~            ;Function: Initialize the UART to BAUD Rate 9600 (1.8432 MHz clock input)
0596   035D~            ;***************************************************************************
0597   035D~            UART0_INIT:                     MOV				DPTR, #UART0_LINE_CTRL
0598   035D~                                            MOV             A, #08h
0599   035D~                                            MOVX            @DPTR, A                ;Mask to Set DLAB Flag
0600   035D~            
0601   035D~                                            MOV				DPTR, #UART0_DATA
0602   035D~                                            MOV             A, #12                  ;Divisor = 12 @ 9600bps w/ 1.8432 Mhz
0603   035D~                                            MOVX            @DPTR, A                ;Set BAUD rate to 9600
0604   035D~            
0605   035D~                                            MOV				DPTR, #UART0_RXX
0606   035D~                                            MOV             A, #00                  
0607   035D~                                            MOVX            @DPTR, A                
0608   035D~            
0609   035D~                                            MOV				DPTR, #UART0_LINE_CTRL  ;Set 8-bit data, 1 stop bit, reset DLAB Flag
0610   035D~                                            MOV             A, #03             
0611   035D~                                            MOVX            @DPTR, A                                                
0612   035D~            
0613   035D~                                            MOV				DPTR, #UART0_RXX         ;Enable receive data available interrupt only
0614   035D~                                            MOV             A, #01           
0615   035D~                                            MOVX            @DPTR, A                                                                                
0616   035D~                                			RET		
0617   035D~            		
0618   035D~            ;***************************************************************************
0619   035D~            ;UART_PRNT_STR:
0620   035D~            ;Function: Print out string starting at MEM location (HL) to 16550 UART
0621   035D~            ;***************************************************************************
0622   035D~            EOS                             .EQU            0
0623   035D~            UART0_PRINT_STR:                
0624   035D~            UART0_PRINT_STR_LP:             MOVX            A, @DPTR
0625   035D~                                            CJNE            A, #EOS, UART0_PRINT_STR_END
0626   035D~            			                    LCALL	        UART0_TX
0627   035D~                                            INC		        DPTR					;Increment pointer to next char
0628   035D~                                            LJMP	        UART0_PRINT_STR_LP	    ;Transmit loop
0629   035D~            UART0_PRINT_STR_END:            RET	 
0630   035D~            			 	
0631   035D~            ;***************************************************************************
0632   035D~            ;UART_TX_READY
0633   035D~            ;Function: Check if UART is ready to transmit
0634   035D~            ;***************************************************************************
0635   035D~            UART0_TX_RDY:                    
0636   035D~            UART0_TX_RDY_LP:			     MOV            DPTR, #UART0_LINE_STATUS
0637   035D~                                             MOVX           A, @DPTR
0638   035D~                                             ANL            A, #%00100000
0639   035D~                                             JZ             UART0_TX_RDY_LP
0640   035D~            			                     
0641   035D~            			                     RET
0642   035D~            
0643   035D~            ;***************************************************************************
0644   035D~            ;UART_TX
0645   035D~            ;Function: Transmit character in A to UART
0646   035D~            ;***************************************************************************
0647   035D~            UART0_TX:                       LCALL           UART0_TX_RDY			;Make sure UART is ready to send
0648   035D~                                            MOV				DPTR, #UART0_DATA
0649   035D~                                            MOVX            @DPTR, A                ;Set BAUD rate to 9600
0650   035D~            			                    RET
0651   035D~            				
0652   035D~            ;***************************************************************************
0653   035D~            ;UART_TX_READY
0654   035D~            ;Function: Check if UART is ready to transmit
0655   035D~            ;***************************************************************************
0656   035D~            UART0_RX_RDY:                    
0657   035D~            UART0_RX_RDY_LP:			     MOV            DPTR, #UART0_LINE_STATUS
0658   035D~                                             MOVX           A, @DPTR
0659   035D~                                             ANL            A, #%00000001
0660   035D~                                             JZ             UART0_RX_RDY_LP
0661   035D~            			                     
0662   035D~            			                     RET
0663   035D~            	
0664   035D~            ;***************************************************************************
0665   035D~            ;UART_RX
0666   035D~            ;Function: Receive character in UART to A
0667   035D~            ;***************************************************************************
0668   035D~            UART0_RX:                       LCALL           UART0_RX_RDY			;Make sure UART is ready to receive
0669   035D~                                            MOV				DPTR, #UART0_DATA
0670   035D~                                            MOVX            A, @DPTR                ;Set BAUD rate to 9600
0671   035D~            			                    RET
0672   035D             #ENDIF
0673   035D             
0674   035D             ;========================================================================================================
0675   035D             ;*************************************************************
0676   035D             ; CLEAR_MEMORTY FUNCTION
0677   035D 90 00 00    CLR_MEMORY:			        MOV				DPTR, #0000h
0678   0360 7E FF       CLR_MEMORY_1:		        MOV				R6, #0FFH
0679   0362 7F F0       CLR_MEMORY_2:		        MOV				R7, #0F0H
0680   0364 E4          CLR_MEMORY_3:		        CLR				A
0681   0365 F0          					        MOVX			@DPTR,A
0682   0366 A3          					        INC				DPTR
0683   0367 DF FB       					        DJNZ			R7, CLR_MEMORY_3
0684   0369 DE F7       					        DJNZ			R6, CLR_MEMORY_2
0685   036B 22          CLR_MEMORY_END:		        RET
0686   036C             
0687   036C             ;*************************************************************
0688   036C             ; COPY_BIOS FUNCTION
0689   036C             ;*************************************************************
0690   036C 90 00 00    COPYBIOS:			        MOV				DPTR, #0000h
0691   036F 7E 80       COPYBIOS_1:			        MOV				R6, #080H
0692   0371 7F 00       COPYBIOS_2:			        MOV				R7, #000H
0693   0373 E4          COPYBIOS_3:			        CLR				A
0694   0374 93          					        MOVC			A, @A+DPTR
0695   0375 F0          					        MOVX			@DPTR,A
0696   0376 A3          					        INC				DPTR
0697   0377 DF FA       					        DJNZ			R7, COPYBIOS_3
0698   0379 DE F6       					        DJNZ			R6, COPYBIOS_2
0699   037B 22          COPYBIOS_END:		        RET				
0700   037C             
0701   037C             ;*************************************************************
0702   037C             ; COMPARE_BIOS FUNCTION
0703   037C             ;*************************************************************
0704   037C 90 00 00    CMPBIOS:			        MOV				DPTR, #0000h
0705   037F 7E 80       CMPBIOS_1:			        MOV				R6, #080H
0706   0381 7F 00       CMPBIOS_2:			        MOV				R7, #000H
0707   0383 E4          CMPBIOS_3:			        CLR				A
0708   0384 93          					        MOVC			A, @A+DPTR
0709   0385 F8          					        MOV				R0, A
0710   0386 E0          					        MOVX			A, @DPTR
0711   0387 98          					        SUBB			A, R0
0712   0388 70 05       					        JNZ				CMPBIOS_END
0713   038A A3          					        INC				DPTR
0714   038B DF F6       					        DJNZ			R7, CMPBIOS_3
0715   038D DE F2       					        DJNZ			R6, CMPBIOS_2
0716   038F 22          CMPBIOS_END:		        RET	
0717   0390             
0718   0390             ;========================================================================================================
0719   0390             ;*************************************************************
0720   0390             ; EXIT_BOOT FUNCTION
0721   0390             ;*************************************************************
0722   0390             PORT_EXIT_BOOT		.EQU            0FF70h
0723   0390             PORT_ENTER_ISP		.EQU            0FF71h
0724   0390             PORT_WARM_BOOT		.EQU            0FF72h
0725   0390             
0726   0390 90 FF 70    EXIT_BOOT:			        MOV				DPTR, #PORT_EXIT_BOOT
0727   0393 F0          					        MOVX			@DPTR, A
0728   0394 22                                      RET
0729   0395             
0730   0395             ;*************************************************************
0731   0395             ; ENTER_ISP FUNCTION
0732   0395             ;*************************************************************
0733   0395 90 FF 71    ENTER_ISP:			        MOV				DPTR, #PORT_ENTER_ISP
0734   0398 F0          					        MOVX			@DPTR, A
0735   0399 22                                      RET
0736   039A             
0737   039A             ;*************************************************************
0738   039A             ; WARM_BOOT FUNCTION
0739   039A             ;*************************************************************
0740   039A 90 FF 72    WARM_BOOT:			        MOV				DPTR, #PORT_WARM_BOOT
0741   039D F0          					        MOVX			@DPTR, A
0742   039E 22                                      RET
0743   039F             
0744   039F                                         .END
ADDR  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
-----------------------------------------------------
0000  02 01 00 02 00 26 00 00 00 00 00 02 00 26 00 00
0010  00 00 00 02 00 26 00 00 00 00 00 02 00 26 00 00
0020  00 00 00 02 00 26 22 00 00 00 00 00 00 00 00 00
0030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0100  75 81 20 12 01 7A 75 90 01 75 90 02 12 03 6C 75
0110  90 04 12 03 7C B4 00 1B 12 03 90 75 90 08 12 01
0120  46 75 90 10 12 01 60 75 90 20 12 01 F1 75 90 81
0130  02 01 2D 75 90 82 02 01 33 7D 01 7E 01 7F 01 DF
0140  FE DE FA DD F6 22 74 80 12 01 AB 74 5A 12 01 B5
0150  04 70 FA 12 01 BA 04 70 FA 12 01 BF 04 70 FA 22
0160  74 80 12 01 B0 74 A5 12 01 C4 04 70 FA 12 01 C9
0170  04 70 FA 12 01 CE 04 70 FA 22 75 90 01 12 01 39
0180  75 90 02 12 01 39 75 90 04 12 01 39 75 90 08 12
0190  01 39 75 90 10 12 01 39 75 90 20 12 01 39 75 90
01A0  40 12 01 39 75 90 80 12 01 39 22 90 FF 03 F0 22
01B0  90 FF 13 F0 22 90 FF 00 F0 22 90 FF 01 F0 22 90
01C0  FF 02 F0 22 90 FF 10 F0 22 90 FF 11 F0 22 90 FF
01D0  12 F0 22 90 FF 00 E0 22 90 FF 01 E0 22 90 FF 02
01E0  E0 22 90 FF 10 E0 22 90 FF 11 E0 22 90 FF 12 E0
01F0  22 74 01 12 02 9A 74 EF 12 02 BD 12 02 74 74 01
0200  12 02 A4 12 02 74 74 00 12 02 A9 12 02 74 74 00
0210  12 02 AE 12 02 74 74 00 12 02 B3 12 02 74 74 E0
0220  12 02 B8 12 02 3A 12 03 11 90 40 00 7F 00 12 03
0230  38 90 41 00 7F 00 12 03 38 22 12 02 7C 74 20 12
0240  02 BD 12 02 86 12 02 C2 54 01 70 EE 90 40 00 7F
0250  00 C0 83 C0 82 12 02 86 12 02 95 D0 82 D0 83 F0
0260  A3 C0 83 C0 82 12 02 86 12 02 95 D0 82 D0 83 F0
0270  A3 DF DE 22 12 02 C2 54 80 70 F9 22 12 02 C2 54
0280  C0 64 40 70 F7 22 12 02 C2 54 88 64 08 70 F7 22
0290  90 FF 20 F0 22 90 FF 20 E0 22 90 FF 21 F0 22 90
02A0  FF 21 E0 22 90 FF 22 F0 22 90 FF 23 F0 22 90 FF
02B0  24 F0 22 90 FF 25 F0 22 90 FF 26 F0 22 90 FF 27
02C0  F0 22 90 FF 27 E0 22 0D 0A 5A 4D 43 38 30 20 43
02D0  6F 6D 70 75 74 65 72 09 09 32 30 31 35 20 4D 43
02E0  6F 6F 6B 0D 0A 0D 0A 00 12 03 11 12 03 44 12 03
02F0  27 02 02 EB 22 12 03 11 90 02 C7 12 03 2F 02 02
0300  F8 22 12 03 11 90 02 C7 7F 24 12 03 38 02 03 05
0310  22 75 98 50 75 89 21 75 87 80 75 8D FA 75 8B FA
0320  D2 8E 22 30 99 FD 22 C2 99 F5 99 12 03 23 22 E0
0330  12 03 27 A3 B4 00 F8 22 E0 12 03 27 A3 DF F9 22
0340  30 98 FD 22 C2 98 12 03 40 E5 99 22 12 03 44 F0
0350  A3 B4 00 F8 22 12 03 44 F0 A3 DF F9 22 90 00 00
0360  7E FF 7F F0 E4 F0 A3 DF FB DE F7 22 90 00 00 7E
0370  80 7F 00 E4 93 F0 A3 DF FA DE F6 22 90 00 00 7E
0380  80 7F 00 E4 93 F8 E0 98 70 05 A3 DF F6 DE F2 22
0390  90 FF 70 F0 22 90 FF 71 F0 22 90 FF 72 F0 22 00


tasm: Number of errors = 0
