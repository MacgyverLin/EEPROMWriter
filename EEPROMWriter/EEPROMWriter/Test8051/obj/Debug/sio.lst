                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module sio
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CY
                                     12 	.globl _AC
                                     13 	.globl _F0
                                     14 	.globl _RS1
                                     15 	.globl _RS0
                                     16 	.globl _OV
                                     17 	.globl _F1
                                     18 	.globl _P
                                     19 	.globl _PS
                                     20 	.globl _PT1
                                     21 	.globl _PX1
                                     22 	.globl _PT0
                                     23 	.globl _PX0
                                     24 	.globl _RD
                                     25 	.globl _WR
                                     26 	.globl _T1
                                     27 	.globl _T0
                                     28 	.globl _INT1
                                     29 	.globl _INT0
                                     30 	.globl _TXD
                                     31 	.globl _RXD
                                     32 	.globl _P3_7
                                     33 	.globl _P3_6
                                     34 	.globl _P3_5
                                     35 	.globl _P3_4
                                     36 	.globl _P3_3
                                     37 	.globl _P3_2
                                     38 	.globl _P3_1
                                     39 	.globl _P3_0
                                     40 	.globl _EA
                                     41 	.globl _ES
                                     42 	.globl _ET1
                                     43 	.globl _EX1
                                     44 	.globl _ET0
                                     45 	.globl _EX0
                                     46 	.globl _P2_7
                                     47 	.globl _P2_6
                                     48 	.globl _P2_5
                                     49 	.globl _P2_4
                                     50 	.globl _P2_3
                                     51 	.globl _P2_2
                                     52 	.globl _P2_1
                                     53 	.globl _P2_0
                                     54 	.globl _SM0
                                     55 	.globl _SM1
                                     56 	.globl _SM2
                                     57 	.globl _REN
                                     58 	.globl _TB8
                                     59 	.globl _RB8
                                     60 	.globl _TI
                                     61 	.globl _RI
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _TF1
                                     71 	.globl _TR1
                                     72 	.globl _TF0
                                     73 	.globl _TR0
                                     74 	.globl _IE1
                                     75 	.globl _IT1
                                     76 	.globl _IE0
                                     77 	.globl _IT0
                                     78 	.globl _P0_7
                                     79 	.globl _P0_6
                                     80 	.globl _P0_5
                                     81 	.globl _P0_4
                                     82 	.globl _P0_3
                                     83 	.globl _P0_2
                                     84 	.globl _P0_1
                                     85 	.globl _P0_0
                                     86 	.globl _B
                                     87 	.globl _ACC
                                     88 	.globl _PSW
                                     89 	.globl _IP
                                     90 	.globl _P3
                                     91 	.globl _IE
                                     92 	.globl _P2
                                     93 	.globl _SBUF
                                     94 	.globl _SCON
                                     95 	.globl _P1
                                     96 	.globl _TH1
                                     97 	.globl _TH0
                                     98 	.globl _TL1
                                     99 	.globl _TL0
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _PCON
                                    103 	.globl _DPH
                                    104 	.globl _DPL
                                    105 	.globl _SP
                                    106 	.globl _P0
                                    107 	.globl _sioInit
                                    108 	.globl _sioClose
                                    109 	.globl _sioWaitTXDone
                                    110 	.globl _sioTX
                                    111 	.globl _sioTXStr
                                    112 	.globl _sioTXBuf
                                    113 	.globl _sioWaitRXDone
                                    114 	.globl _sioRX
                                    115 	.globl _sioRXStr
                                    116 	.globl _sioRXBuf
                                    117 ;--------------------------------------------------------
                                    118 ; special function registers
                                    119 ;--------------------------------------------------------
                                    120 	.area RSEG    (ABS,DATA)
      000000                        121 	.org 0x0000
                           000080   122 G$P0$0_0$0 == 0x0080
                           000080   123 _P0	=	0x0080
                           000081   124 G$SP$0_0$0 == 0x0081
                           000081   125 _SP	=	0x0081
                           000082   126 G$DPL$0_0$0 == 0x0082
                           000082   127 _DPL	=	0x0082
                           000083   128 G$DPH$0_0$0 == 0x0083
                           000083   129 _DPH	=	0x0083
                           000087   130 G$PCON$0_0$0 == 0x0087
                           000087   131 _PCON	=	0x0087
                           000088   132 G$TCON$0_0$0 == 0x0088
                           000088   133 _TCON	=	0x0088
                           000089   134 G$TMOD$0_0$0 == 0x0089
                           000089   135 _TMOD	=	0x0089
                           00008A   136 G$TL0$0_0$0 == 0x008a
                           00008A   137 _TL0	=	0x008a
                           00008B   138 G$TL1$0_0$0 == 0x008b
                           00008B   139 _TL1	=	0x008b
                           00008C   140 G$TH0$0_0$0 == 0x008c
                           00008C   141 _TH0	=	0x008c
                           00008D   142 G$TH1$0_0$0 == 0x008d
                           00008D   143 _TH1	=	0x008d
                           000090   144 G$P1$0_0$0 == 0x0090
                           000090   145 _P1	=	0x0090
                           000098   146 G$SCON$0_0$0 == 0x0098
                           000098   147 _SCON	=	0x0098
                           000099   148 G$SBUF$0_0$0 == 0x0099
                           000099   149 _SBUF	=	0x0099
                           0000A0   150 G$P2$0_0$0 == 0x00a0
                           0000A0   151 _P2	=	0x00a0
                           0000A8   152 G$IE$0_0$0 == 0x00a8
                           0000A8   153 _IE	=	0x00a8
                           0000B0   154 G$P3$0_0$0 == 0x00b0
                           0000B0   155 _P3	=	0x00b0
                           0000B8   156 G$IP$0_0$0 == 0x00b8
                           0000B8   157 _IP	=	0x00b8
                           0000D0   158 G$PSW$0_0$0 == 0x00d0
                           0000D0   159 _PSW	=	0x00d0
                           0000E0   160 G$ACC$0_0$0 == 0x00e0
                           0000E0   161 _ACC	=	0x00e0
                           0000F0   162 G$B$0_0$0 == 0x00f0
                           0000F0   163 _B	=	0x00f0
                                    164 ;--------------------------------------------------------
                                    165 ; special function bits
                                    166 ;--------------------------------------------------------
                                    167 	.area RSEG    (ABS,DATA)
      000000                        168 	.org 0x0000
                           000080   169 G$P0_0$0_0$0 == 0x0080
                           000080   170 _P0_0	=	0x0080
                           000081   171 G$P0_1$0_0$0 == 0x0081
                           000081   172 _P0_1	=	0x0081
                           000082   173 G$P0_2$0_0$0 == 0x0082
                           000082   174 _P0_2	=	0x0082
                           000083   175 G$P0_3$0_0$0 == 0x0083
                           000083   176 _P0_3	=	0x0083
                           000084   177 G$P0_4$0_0$0 == 0x0084
                           000084   178 _P0_4	=	0x0084
                           000085   179 G$P0_5$0_0$0 == 0x0085
                           000085   180 _P0_5	=	0x0085
                           000086   181 G$P0_6$0_0$0 == 0x0086
                           000086   182 _P0_6	=	0x0086
                           000087   183 G$P0_7$0_0$0 == 0x0087
                           000087   184 _P0_7	=	0x0087
                           000088   185 G$IT0$0_0$0 == 0x0088
                           000088   186 _IT0	=	0x0088
                           000089   187 G$IE0$0_0$0 == 0x0089
                           000089   188 _IE0	=	0x0089
                           00008A   189 G$IT1$0_0$0 == 0x008a
                           00008A   190 _IT1	=	0x008a
                           00008B   191 G$IE1$0_0$0 == 0x008b
                           00008B   192 _IE1	=	0x008b
                           00008C   193 G$TR0$0_0$0 == 0x008c
                           00008C   194 _TR0	=	0x008c
                           00008D   195 G$TF0$0_0$0 == 0x008d
                           00008D   196 _TF0	=	0x008d
                           00008E   197 G$TR1$0_0$0 == 0x008e
                           00008E   198 _TR1	=	0x008e
                           00008F   199 G$TF1$0_0$0 == 0x008f
                           00008F   200 _TF1	=	0x008f
                           000090   201 G$P1_0$0_0$0 == 0x0090
                           000090   202 _P1_0	=	0x0090
                           000091   203 G$P1_1$0_0$0 == 0x0091
                           000091   204 _P1_1	=	0x0091
                           000092   205 G$P1_2$0_0$0 == 0x0092
                           000092   206 _P1_2	=	0x0092
                           000093   207 G$P1_3$0_0$0 == 0x0093
                           000093   208 _P1_3	=	0x0093
                           000094   209 G$P1_4$0_0$0 == 0x0094
                           000094   210 _P1_4	=	0x0094
                           000095   211 G$P1_5$0_0$0 == 0x0095
                           000095   212 _P1_5	=	0x0095
                           000096   213 G$P1_6$0_0$0 == 0x0096
                           000096   214 _P1_6	=	0x0096
                           000097   215 G$P1_7$0_0$0 == 0x0097
                           000097   216 _P1_7	=	0x0097
                           000098   217 G$RI$0_0$0 == 0x0098
                           000098   218 _RI	=	0x0098
                           000099   219 G$TI$0_0$0 == 0x0099
                           000099   220 _TI	=	0x0099
                           00009A   221 G$RB8$0_0$0 == 0x009a
                           00009A   222 _RB8	=	0x009a
                           00009B   223 G$TB8$0_0$0 == 0x009b
                           00009B   224 _TB8	=	0x009b
                           00009C   225 G$REN$0_0$0 == 0x009c
                           00009C   226 _REN	=	0x009c
                           00009D   227 G$SM2$0_0$0 == 0x009d
                           00009D   228 _SM2	=	0x009d
                           00009E   229 G$SM1$0_0$0 == 0x009e
                           00009E   230 _SM1	=	0x009e
                           00009F   231 G$SM0$0_0$0 == 0x009f
                           00009F   232 _SM0	=	0x009f
                           0000A0   233 G$P2_0$0_0$0 == 0x00a0
                           0000A0   234 _P2_0	=	0x00a0
                           0000A1   235 G$P2_1$0_0$0 == 0x00a1
                           0000A1   236 _P2_1	=	0x00a1
                           0000A2   237 G$P2_2$0_0$0 == 0x00a2
                           0000A2   238 _P2_2	=	0x00a2
                           0000A3   239 G$P2_3$0_0$0 == 0x00a3
                           0000A3   240 _P2_3	=	0x00a3
                           0000A4   241 G$P2_4$0_0$0 == 0x00a4
                           0000A4   242 _P2_4	=	0x00a4
                           0000A5   243 G$P2_5$0_0$0 == 0x00a5
                           0000A5   244 _P2_5	=	0x00a5
                           0000A6   245 G$P2_6$0_0$0 == 0x00a6
                           0000A6   246 _P2_6	=	0x00a6
                           0000A7   247 G$P2_7$0_0$0 == 0x00a7
                           0000A7   248 _P2_7	=	0x00a7
                           0000A8   249 G$EX0$0_0$0 == 0x00a8
                           0000A8   250 _EX0	=	0x00a8
                           0000A9   251 G$ET0$0_0$0 == 0x00a9
                           0000A9   252 _ET0	=	0x00a9
                           0000AA   253 G$EX1$0_0$0 == 0x00aa
                           0000AA   254 _EX1	=	0x00aa
                           0000AB   255 G$ET1$0_0$0 == 0x00ab
                           0000AB   256 _ET1	=	0x00ab
                           0000AC   257 G$ES$0_0$0 == 0x00ac
                           0000AC   258 _ES	=	0x00ac
                           0000AF   259 G$EA$0_0$0 == 0x00af
                           0000AF   260 _EA	=	0x00af
                           0000B0   261 G$P3_0$0_0$0 == 0x00b0
                           0000B0   262 _P3_0	=	0x00b0
                           0000B1   263 G$P3_1$0_0$0 == 0x00b1
                           0000B1   264 _P3_1	=	0x00b1
                           0000B2   265 G$P3_2$0_0$0 == 0x00b2
                           0000B2   266 _P3_2	=	0x00b2
                           0000B3   267 G$P3_3$0_0$0 == 0x00b3
                           0000B3   268 _P3_3	=	0x00b3
                           0000B4   269 G$P3_4$0_0$0 == 0x00b4
                           0000B4   270 _P3_4	=	0x00b4
                           0000B5   271 G$P3_5$0_0$0 == 0x00b5
                           0000B5   272 _P3_5	=	0x00b5
                           0000B6   273 G$P3_6$0_0$0 == 0x00b6
                           0000B6   274 _P3_6	=	0x00b6
                           0000B7   275 G$P3_7$0_0$0 == 0x00b7
                           0000B7   276 _P3_7	=	0x00b7
                           0000B0   277 G$RXD$0_0$0 == 0x00b0
                           0000B0   278 _RXD	=	0x00b0
                           0000B1   279 G$TXD$0_0$0 == 0x00b1
                           0000B1   280 _TXD	=	0x00b1
                           0000B2   281 G$INT0$0_0$0 == 0x00b2
                           0000B2   282 _INT0	=	0x00b2
                           0000B3   283 G$INT1$0_0$0 == 0x00b3
                           0000B3   284 _INT1	=	0x00b3
                           0000B4   285 G$T0$0_0$0 == 0x00b4
                           0000B4   286 _T0	=	0x00b4
                           0000B5   287 G$T1$0_0$0 == 0x00b5
                           0000B5   288 _T1	=	0x00b5
                           0000B6   289 G$WR$0_0$0 == 0x00b6
                           0000B6   290 _WR	=	0x00b6
                           0000B7   291 G$RD$0_0$0 == 0x00b7
                           0000B7   292 _RD	=	0x00b7
                           0000B8   293 G$PX0$0_0$0 == 0x00b8
                           0000B8   294 _PX0	=	0x00b8
                           0000B9   295 G$PT0$0_0$0 == 0x00b9
                           0000B9   296 _PT0	=	0x00b9
                           0000BA   297 G$PX1$0_0$0 == 0x00ba
                           0000BA   298 _PX1	=	0x00ba
                           0000BB   299 G$PT1$0_0$0 == 0x00bb
                           0000BB   300 _PT1	=	0x00bb
                           0000BC   301 G$PS$0_0$0 == 0x00bc
                           0000BC   302 _PS	=	0x00bc
                           0000D0   303 G$P$0_0$0 == 0x00d0
                           0000D0   304 _P	=	0x00d0
                           0000D1   305 G$F1$0_0$0 == 0x00d1
                           0000D1   306 _F1	=	0x00d1
                           0000D2   307 G$OV$0_0$0 == 0x00d2
                           0000D2   308 _OV	=	0x00d2
                           0000D3   309 G$RS0$0_0$0 == 0x00d3
                           0000D3   310 _RS0	=	0x00d3
                           0000D4   311 G$RS1$0_0$0 == 0x00d4
                           0000D4   312 _RS1	=	0x00d4
                           0000D5   313 G$F0$0_0$0 == 0x00d5
                           0000D5   314 _F0	=	0x00d5
                           0000D6   315 G$AC$0_0$0 == 0x00d6
                           0000D6   316 _AC	=	0x00d6
                           0000D7   317 G$CY$0_0$0 == 0x00d7
                           0000D7   318 _CY	=	0x00d7
                                    319 ;--------------------------------------------------------
                                    320 ; overlayable register banks
                                    321 ;--------------------------------------------------------
                                    322 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        323 	.ds 8
                                    324 ;--------------------------------------------------------
                                    325 ; internal ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area DSEG    (DATA)
                                    328 ;--------------------------------------------------------
                                    329 ; overlayable items in internal ram 
                                    330 ;--------------------------------------------------------
                                    331 ;--------------------------------------------------------
                                    332 ; indirectly addressable internal ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area ISEG    (DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; absolute internal ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area IABS    (ABS,DATA)
                                    339 	.area IABS    (ABS,DATA)
                                    340 ;--------------------------------------------------------
                                    341 ; bit data
                                    342 ;--------------------------------------------------------
                                    343 	.area BSEG    (BIT)
                                    344 ;--------------------------------------------------------
                                    345 ; paged external ram data
                                    346 ;--------------------------------------------------------
                                    347 	.area PSEG    (PAG,XDATA)
                                    348 ;--------------------------------------------------------
                                    349 ; external ram data
                                    350 ;--------------------------------------------------------
                                    351 	.area XSEG    (XDATA)
                                    352 ;--------------------------------------------------------
                                    353 ; absolute external ram data
                                    354 ;--------------------------------------------------------
                                    355 	.area XABS    (ABS,XDATA)
                                    356 ;--------------------------------------------------------
                                    357 ; external initialized ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area XISEG   (XDATA)
                                    360 	.area HOME    (CODE)
                                    361 	.area GSINIT0 (CODE)
                                    362 	.area GSINIT1 (CODE)
                                    363 	.area GSINIT2 (CODE)
                                    364 	.area GSINIT3 (CODE)
                                    365 	.area GSINIT4 (CODE)
                                    366 	.area GSINIT5 (CODE)
                                    367 	.area GSINIT  (CODE)
                                    368 	.area GSFINAL (CODE)
                                    369 	.area CSEG    (CODE)
                                    370 ;--------------------------------------------------------
                                    371 ; global & static initialisations
                                    372 ;--------------------------------------------------------
                                    373 	.area HOME    (CODE)
                                    374 	.area GSINIT  (CODE)
                                    375 	.area GSFINAL (CODE)
                                    376 	.area GSINIT  (CODE)
                                    377 ;--------------------------------------------------------
                                    378 ; Home
                                    379 ;--------------------------------------------------------
                                    380 	.area HOME    (CODE)
                                    381 	.area HOME    (CODE)
                                    382 ;--------------------------------------------------------
                                    383 ; code
                                    384 ;--------------------------------------------------------
                                    385 	.area CSEG    (CODE)
                                    386 ;------------------------------------------------------------
                                    387 ;Allocation info for local variables in function 'sioInit'
                                    388 ;------------------------------------------------------------
                                    389 ;device                    Allocated to registers 
                                    390 ;------------------------------------------------------------
                           000000   391 	G$sioInit$0$0 ==.
                           000000   392 	C$sio.c$5$0_0$12 ==.
                                    393 ;	sio.c:5: void sioInit(char device)
                                    394 ;	-----------------------------------------
                                    395 ;	 function sioInit
                                    396 ;	-----------------------------------------
      000000                        397 _sioInit:
                           000007   398 	ar7 = 0x07
                           000006   399 	ar6 = 0x06
                           000005   400 	ar5 = 0x05
                           000004   401 	ar4 = 0x04
                           000003   402 	ar3 = 0x03
                           000002   403 	ar2 = 0x02
                           000001   404 	ar1 = 0x01
                           000000   405 	ar0 = 0x00
                           000000   406 	C$sio.c$9$1_0$12 ==.
                                    407 ;	sio.c:9: SCON = 0x50;
      000000 75 98 50         [24]  408 	mov	_SCON,#0x50
                           000003   409 	C$sio.c$10$1_0$12 ==.
                                    410 ;	sio.c:10: TMOD = (TMOD & T0_MASK) | 0x21;
      000003 AE 89            [24]  411 	mov	r6,_TMOD
      000005 53 06 0F         [24]  412 	anl	ar6,#0x0f
      000008 43 06 21         [24]  413 	orl	ar6,#0x21
      00000B 8E 89            [24]  414 	mov	_TMOD,r6
                           00000D   415 	C$sio.c$11$1_0$12 ==.
                                    416 ;	sio.c:11: PCON = 0x80;
      00000D 75 87 80         [24]  417 	mov	_PCON,#0x80
                           000010   418 	C$sio.c$14$1_0$12 ==.
                                    419 ;	sio.c:14: TH1 = 0xFD;
      000010 75 8D FD         [24]  420 	mov	_TH1,#0xfd
                           000013   421 	C$sio.c$15$1_0$12 ==.
                                    422 ;	sio.c:15: TL1 = 0xFD;
      000013 75 8B FD         [24]  423 	mov	_TL1,#0xfd
                           000016   424 	C$sio.c$16$1_0$12 ==.
                                    425 ;	sio.c:16: TR1 = 1;
                                    426 ;	assignBit
      000016 D2 8E            [12]  427 	setb	_TR1
                           000018   428 	C$sio.c$19$1_0$12 ==.
                                    429 ;	sio.c:19: }
                           000018   430 	C$sio.c$19$1_0$12 ==.
                           000018   431 	XG$sioInit$0$0 ==.
      000018 22               [24]  432 	ret
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'sioClose'
                                    435 ;------------------------------------------------------------
                                    436 ;device                    Allocated to registers 
                                    437 ;------------------------------------------------------------
                           000019   438 	G$sioClose$0$0 ==.
                           000019   439 	C$sio.c$21$1_0$14 ==.
                                    440 ;	sio.c:21: void sioClose(char device)
                                    441 ;	-----------------------------------------
                                    442 ;	 function sioClose
                                    443 ;	-----------------------------------------
      000019                        444 _sioClose:
                           000019   445 	C$sio.c$25$1_0$14 ==.
                                    446 ;	sio.c:25: SCON = 0x00;
      000019 75 98 00         [24]  447 	mov	_SCON,#0x00
                           00001C   448 	C$sio.c$26$1_0$14 ==.
                                    449 ;	sio.c:26: TMOD = (TMOD & T0_MASK);
      00001C 53 89 0F         [24]  450 	anl	_TMOD,#0x0f
                           00001F   451 	C$sio.c$27$1_0$14 ==.
                                    452 ;	sio.c:27: PCON &= ~SMOD;
      00001F 53 87 7F         [24]  453 	anl	_PCON,#0x7f
                           000022   454 	C$sio.c$28$1_0$14 ==.
                                    455 ;	sio.c:28: TR1 = 0;
                                    456 ;	assignBit
      000022 C2 8E            [12]  457 	clr	_TR1
                           000024   458 	C$sio.c$29$1_0$14 ==.
                                    459 ;	sio.c:29: }
                           000024   460 	C$sio.c$29$1_0$14 ==.
                           000024   461 	XG$sioClose$0$0 ==.
      000024 22               [24]  462 	ret
                                    463 ;------------------------------------------------------------
                                    464 ;Allocation info for local variables in function 'sioWaitTXDone'
                                    465 ;------------------------------------------------------------
                                    466 ;device                    Allocated to registers 
                                    467 ;------------------------------------------------------------
                           000025   468 	G$sioWaitTXDone$0$0 ==.
                           000025   469 	C$sio.c$31$1_0$16 ==.
                                    470 ;	sio.c:31: void sioWaitTXDone(char device)
                                    471 ;	-----------------------------------------
                                    472 ;	 function sioWaitTXDone
                                    473 ;	-----------------------------------------
      000025                        474 _sioWaitTXDone:
                           000025   475 	C$sio.c$35$1_0$16 ==.
                                    476 ;	sio.c:35: while(!TI);
      000025                        477 00101$:
      000025 30 99 FD         [24]  478 	jnb	_TI,00101$
                           000028   479 	C$sio.c$36$1_0$16 ==.
                                    480 ;	sio.c:36: }
                           000028   481 	C$sio.c$36$1_0$16 ==.
                           000028   482 	XG$sioWaitTXDone$0$0 ==.
      000028 22               [24]  483 	ret
                                    484 ;------------------------------------------------------------
                                    485 ;Allocation info for local variables in function 'sioTX'
                                    486 ;------------------------------------------------------------
                                    487 ;d                         Allocated to stack - _bp -3
                                    488 ;device                    Allocated to registers 
                                    489 ;------------------------------------------------------------
                           000029   490 	G$sioTX$0$0 ==.
                           000029   491 	C$sio.c$38$1_0$18 ==.
                                    492 ;	sio.c:38: void sioTX(char device, char d)
                                    493 ;	-----------------------------------------
                                    494 ;	 function sioTX
                                    495 ;	-----------------------------------------
      000029                        496 _sioTX:
      000029 C0*00            [24]  497 	push	_bp
      00002B 85 81*00         [24]  498 	mov	_bp,sp
                           00002E   499 	C$sio.c$42$1_0$18 ==.
                                    500 ;	sio.c:42: TI = 0;
                                    501 ;	assignBit
      00002E C2 99            [12]  502 	clr	_TI
                           000030   503 	C$sio.c$43$1_0$18 ==.
                                    504 ;	sio.c:43: SBUF = d;
      000030 E5*00            [12]  505 	mov	a,_bp
      000032 24 FD            [12]  506 	add	a,#0xfd
      000034 F8               [12]  507 	mov	r0,a
      000035 86 99            [24]  508 	mov	_SBUF,@r0
                           000037   509 	C$sio.c$44$1_0$18 ==.
                                    510 ;	sio.c:44: while(!TI) /* assumes UART is initialized */ ;
      000037                        511 00101$:
      000037 30 99 FD         [24]  512 	jnb	_TI,00101$
                           00003A   513 	C$sio.c$45$1_0$18 ==.
                                    514 ;	sio.c:45: }
      00003A D0*00            [24]  515 	pop	_bp
                           00003C   516 	C$sio.c$45$1_0$18 ==.
                           00003C   517 	XG$sioTX$0$0 ==.
      00003C 22               [24]  518 	ret
                                    519 ;------------------------------------------------------------
                                    520 ;Allocation info for local variables in function 'sioTXStr'
                                    521 ;------------------------------------------------------------
                                    522 ;s                         Allocated to stack - _bp -5
                                    523 ;device                    Allocated to registers r7 
                                    524 ;------------------------------------------------------------
                           00003D   525 	G$sioTXStr$0$0 ==.
                           00003D   526 	C$sio.c$47$1_0$20 ==.
                                    527 ;	sio.c:47: void sioTXStr(char device, const char* s)
                                    528 ;	-----------------------------------------
                                    529 ;	 function sioTXStr
                                    530 ;	-----------------------------------------
      00003D                        531 _sioTXStr:
      00003D C0*00            [24]  532 	push	_bp
      00003F 85 81*00         [24]  533 	mov	_bp,sp
      000042 AF 82            [24]  534 	mov	r7,dpl
                           000044   535 	C$sio.c$51$1_0$20 ==.
                                    536 ;	sio.c:51: do
      000044 E5*00            [12]  537 	mov	a,_bp
      000046 24 FB            [12]  538 	add	a,#0xfb
      000048 F8               [12]  539 	mov	r0,a
      000049 86 04            [24]  540 	mov	ar4,@r0
      00004B 08               [12]  541 	inc	r0
      00004C 86 05            [24]  542 	mov	ar5,@r0
      00004E 08               [12]  543 	inc	r0
      00004F 86 06            [24]  544 	mov	ar6,@r0
      000051                        545 00101$:
                           000051   546 	C$sio.c$53$2_0$21 ==.
                                    547 ;	sio.c:53: sioTX(device, *s);
      000051 8C 82            [24]  548 	mov	dpl,r4
      000053 8D 83            [24]  549 	mov	dph,r5
      000055 8E F0            [24]  550 	mov	b,r6
      000057 12r00r00         [24]  551 	lcall	__gptrget
      00005A FB               [12]  552 	mov	r3,a
      00005B C0 07            [24]  553 	push	ar7
      00005D C0 06            [24]  554 	push	ar6
      00005F C0 05            [24]  555 	push	ar5
      000061 C0 04            [24]  556 	push	ar4
      000063 C0 03            [24]  557 	push	ar3
      000065 8F 82            [24]  558 	mov	dpl,r7
      000067 12r00r29         [24]  559 	lcall	_sioTX
      00006A 15 81            [12]  560 	dec	sp
      00006C D0 04            [24]  561 	pop	ar4
      00006E D0 05            [24]  562 	pop	ar5
      000070 D0 06            [24]  563 	pop	ar6
      000072 D0 07            [24]  564 	pop	ar7
                           000074   565 	C$sio.c$54$1_0$20 ==.
                                    566 ;	sio.c:54: }while(*s++);
      000074 8C 82            [24]  567 	mov	dpl,r4
      000076 8D 83            [24]  568 	mov	dph,r5
      000078 8E F0            [24]  569 	mov	b,r6
      00007A 12r00r00         [24]  570 	lcall	__gptrget
      00007D FB               [12]  571 	mov	r3,a
      00007E A3               [24]  572 	inc	dptr
      00007F AC 82            [24]  573 	mov	r4,dpl
      000081 AD 83            [24]  574 	mov	r5,dph
      000083 EB               [12]  575 	mov	a,r3
      000084 70 CB            [24]  576 	jnz	00101$
                           000086   577 	C$sio.c$55$1_0$20 ==.
                                    578 ;	sio.c:55: }
      000086 D0*00            [24]  579 	pop	_bp
                           000088   580 	C$sio.c$55$1_0$20 ==.
                           000088   581 	XG$sioTXStr$0$0 ==.
      000088 22               [24]  582 	ret
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'sioTXBuf'
                                    585 ;------------------------------------------------------------
                                    586 ;buf                       Allocated to stack - _bp -5
                                    587 ;size                      Allocated to stack - _bp -7
                                    588 ;device                    Allocated to stack - _bp +1
                                    589 ;i                         Allocated to registers r5 r6 
                                    590 ;------------------------------------------------------------
                           000089   591 	G$sioTXBuf$0$0 ==.
                           000089   592 	C$sio.c$57$1_0$23 ==.
                                    593 ;	sio.c:57: void sioTXBuf(char device, const char* buf, unsigned int size)
                                    594 ;	-----------------------------------------
                                    595 ;	 function sioTXBuf
                                    596 ;	-----------------------------------------
      000089                        597 _sioTXBuf:
      000089 C0*00            [24]  598 	push	_bp
      00008B 85 81*00         [24]  599 	mov	_bp,sp
      00008E C0 82            [24]  600 	push	dpl
                           000090   601 	C$sio.c$63$1_0$23 ==.
                                    602 ;	sio.c:63: while(size--)
      000090 E4               [12]  603 	clr	a
      000091 FD               [12]  604 	mov	r5,a
      000092 FE               [12]  605 	mov	r6,a
      000093 E5*00            [12]  606 	mov	a,_bp
      000095 24 F9            [12]  607 	add	a,#0xf9
      000097 F8               [12]  608 	mov	r0,a
      000098 86 03            [24]  609 	mov	ar3,@r0
      00009A 08               [12]  610 	inc	r0
      00009B 86 04            [24]  611 	mov	ar4,@r0
      00009D                        612 00101$:
      00009D 8B 02            [24]  613 	mov	ar2,r3
      00009F 8C 07            [24]  614 	mov	ar7,r4
      0000A1 1B               [12]  615 	dec	r3
      0000A2 BB FF 01         [24]  616 	cjne	r3,#0xff,00115$
      0000A5 1C               [12]  617 	dec	r4
      0000A6                        618 00115$:
      0000A6 EA               [12]  619 	mov	a,r2
      0000A7 4F               [12]  620 	orl	a,r7
      0000A8 60 48            [24]  621 	jz	00104$
                           0000AA   622 	C$sio.c$65$1_0$23 ==.
                                    623 ;	sio.c:65: sioTX(device, buf[i++]);
      0000AA C0 03            [24]  624 	push	ar3
      0000AC C0 04            [24]  625 	push	ar4
      0000AE 8D 02            [24]  626 	mov	ar2,r5
      0000B0 8E 07            [24]  627 	mov	ar7,r6
      0000B2 0D               [12]  628 	inc	r5
      0000B3 BD 00 01         [24]  629 	cjne	r5,#0x00,00117$
      0000B6 0E               [12]  630 	inc	r6
      0000B7                        631 00117$:
      0000B7 E5*00            [12]  632 	mov	a,_bp
      0000B9 24 FB            [12]  633 	add	a,#0xfb
      0000BB F8               [12]  634 	mov	r0,a
      0000BC EA               [12]  635 	mov	a,r2
      0000BD 26               [12]  636 	add	a,@r0
      0000BE FA               [12]  637 	mov	r2,a
      0000BF EF               [12]  638 	mov	a,r7
      0000C0 08               [12]  639 	inc	r0
      0000C1 36               [12]  640 	addc	a,@r0
      0000C2 FC               [12]  641 	mov	r4,a
      0000C3 08               [12]  642 	inc	r0
      0000C4 86 07            [24]  643 	mov	ar7,@r0
      0000C6 8A 82            [24]  644 	mov	dpl,r2
      0000C8 8C 83            [24]  645 	mov	dph,r4
      0000CA 8F F0            [24]  646 	mov	b,r7
      0000CC 12r00r00         [24]  647 	lcall	__gptrget
      0000CF FA               [12]  648 	mov	r2,a
      0000D0 C0 06            [24]  649 	push	ar6
      0000D2 C0 05            [24]  650 	push	ar5
      0000D4 C0 04            [24]  651 	push	ar4
      0000D6 C0 03            [24]  652 	push	ar3
      0000D8 C0 02            [24]  653 	push	ar2
      0000DA A8*00            [24]  654 	mov	r0,_bp
      0000DC 08               [12]  655 	inc	r0
      0000DD 86 82            [24]  656 	mov	dpl,@r0
      0000DF 12r00r29         [24]  657 	lcall	_sioTX
      0000E2 15 81            [12]  658 	dec	sp
      0000E4 D0 03            [24]  659 	pop	ar3
      0000E6 D0 04            [24]  660 	pop	ar4
      0000E8 D0 05            [24]  661 	pop	ar5
      0000EA D0 06            [24]  662 	pop	ar6
      0000EC D0 04            [24]  663 	pop	ar4
      0000EE D0 03            [24]  664 	pop	ar3
      0000F0 80 AB            [24]  665 	sjmp	00101$
      0000F2                        666 00104$:
                           0000F2   667 	C$sio.c$67$1_0$23 ==.
                                    668 ;	sio.c:67: }
      0000F2 15 81            [12]  669 	dec	sp
      0000F4 D0*00            [24]  670 	pop	_bp
                           0000F6   671 	C$sio.c$67$1_0$23 ==.
                           0000F6   672 	XG$sioTXBuf$0$0 ==.
      0000F6 22               [24]  673 	ret
                                    674 ;------------------------------------------------------------
                                    675 ;Allocation info for local variables in function 'sioWaitRXDone'
                                    676 ;------------------------------------------------------------
                                    677 ;device                    Allocated to registers 
                                    678 ;------------------------------------------------------------
                           0000F7   679 	G$sioWaitRXDone$0$0 ==.
                           0000F7   680 	C$sio.c$69$1_0$26 ==.
                                    681 ;	sio.c:69: void sioWaitRXDone(char device)
                                    682 ;	-----------------------------------------
                                    683 ;	 function sioWaitRXDone
                                    684 ;	-----------------------------------------
      0000F7                        685 _sioWaitRXDone:
                           0000F7   686 	C$sio.c$73$1_0$26 ==.
                                    687 ;	sio.c:73: while(!RI);
      0000F7                        688 00101$:
      0000F7 30 98 FD         [24]  689 	jnb	_RI,00101$
                           0000FA   690 	C$sio.c$74$1_0$26 ==.
                                    691 ;	sio.c:74: }
                           0000FA   692 	C$sio.c$74$1_0$26 ==.
                           0000FA   693 	XG$sioWaitRXDone$0$0 ==.
      0000FA 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'sioRX'
                                    697 ;------------------------------------------------------------
                                    698 ;device                    Allocated to registers 
                                    699 ;d                         Allocated to registers r7 
                                    700 ;------------------------------------------------------------
                           0000FB   701 	G$sioRX$0$0 ==.
                           0000FB   702 	C$sio.c$76$1_0$28 ==.
                                    703 ;	sio.c:76: char sioRX(char device)
                                    704 ;	-----------------------------------------
                                    705 ;	 function sioRX
                                    706 ;	-----------------------------------------
      0000FB                        707 _sioRX:
                           0000FB   708 	C$sio.c$82$1_0$28 ==.
                                    709 ;	sio.c:82: while(!RI) /* assumes UART is initialized */ ;
      0000FB                        710 00101$:
      0000FB 30 98 FD         [24]  711 	jnb	_RI,00101$
                           0000FE   712 	C$sio.c$83$1_0$28 ==.
                                    713 ;	sio.c:83: d = SBUF;
      0000FE AF 99            [24]  714 	mov	r7,_SBUF
                           000100   715 	C$sio.c$84$1_0$28 ==.
                                    716 ;	sio.c:84: RI = 0;
                                    717 ;	assignBit
      000100 C2 98            [12]  718 	clr	_RI
                           000102   719 	C$sio.c$86$1_0$28 ==.
                                    720 ;	sio.c:86: return d;
      000102 8F 82            [24]  721 	mov	dpl,r7
                           000104   722 	C$sio.c$87$1_0$28 ==.
                                    723 ;	sio.c:87: }
                           000104   724 	C$sio.c$87$1_0$28 ==.
                           000104   725 	XG$sioRX$0$0 ==.
      000104 22               [24]  726 	ret
                                    727 ;------------------------------------------------------------
                                    728 ;Allocation info for local variables in function 'sioRXStr'
                                    729 ;------------------------------------------------------------
                                    730 ;s                         Allocated to stack - _bp -5
                                    731 ;size                      Allocated to stack - _bp -7
                                    732 ;device                    Allocated to stack - _bp +1
                                    733 ;i                         Allocated to registers r5 r6 
                                    734 ;------------------------------------------------------------
                           000105   735 	G$sioRXStr$0$0 ==.
                           000105   736 	C$sio.c$89$1_0$30 ==.
                                    737 ;	sio.c:89: void sioRXStr(char device, char* s, unsigned int size)
                                    738 ;	-----------------------------------------
                                    739 ;	 function sioRXStr
                                    740 ;	-----------------------------------------
      000105                        741 _sioRXStr:
      000105 C0*00            [24]  742 	push	_bp
      000107 85 81*00         [24]  743 	mov	_bp,sp
      00010A C0 82            [24]  744 	push	dpl
                           00010C   745 	C$sio.c$95$1_0$30 ==.
                                    746 ;	sio.c:95: while(size--)
      00010C E4               [12]  747 	clr	a
      00010D FD               [12]  748 	mov	r5,a
      00010E FE               [12]  749 	mov	r6,a
      00010F E5*00            [12]  750 	mov	a,_bp
      000111 24 F9            [12]  751 	add	a,#0xf9
      000113 F8               [12]  752 	mov	r0,a
      000114 86 03            [24]  753 	mov	ar3,@r0
      000116 08               [12]  754 	inc	r0
      000117 86 04            [24]  755 	mov	ar4,@r0
      000119                        756 00103$:
      000119 8B 02            [24]  757 	mov	ar2,r3
      00011B 8C 07            [24]  758 	mov	ar7,r4
      00011D 1B               [12]  759 	dec	r3
      00011E BB FF 01         [24]  760 	cjne	r3,#0xff,00117$
      000121 1C               [12]  761 	dec	r4
      000122                        762 00117$:
      000122 EA               [12]  763 	mov	a,r2
      000123 4F               [12]  764 	orl	a,r7
      000124 60 4A            [24]  765 	jz	00106$
                           000126   766 	C$sio.c$97$1_0$30 ==.
                                    767 ;	sio.c:97: if((s[i++] = sioRX(device))==0)
      000126 C0 03            [24]  768 	push	ar3
      000128 C0 04            [24]  769 	push	ar4
      00012A 8D 02            [24]  770 	mov	ar2,r5
      00012C 8E 07            [24]  771 	mov	ar7,r6
      00012E 0D               [12]  772 	inc	r5
      00012F BD 00 01         [24]  773 	cjne	r5,#0x00,00119$
      000132 0E               [12]  774 	inc	r6
      000133                        775 00119$:
      000133 E5*00            [12]  776 	mov	a,_bp
      000135 24 FB            [12]  777 	add	a,#0xfb
      000137 F8               [12]  778 	mov	r0,a
      000138 EA               [12]  779 	mov	a,r2
      000139 26               [12]  780 	add	a,@r0
      00013A FA               [12]  781 	mov	r2,a
      00013B EF               [12]  782 	mov	a,r7
      00013C 08               [12]  783 	inc	r0
      00013D 36               [12]  784 	addc	a,@r0
      00013E FC               [12]  785 	mov	r4,a
      00013F 08               [12]  786 	inc	r0
      000140 86 07            [24]  787 	mov	ar7,@r0
      000142 A8*00            [24]  788 	mov	r0,_bp
      000144 08               [12]  789 	inc	r0
      000145 86 82            [24]  790 	mov	dpl,@r0
      000147 C0 07            [24]  791 	push	ar7
      000149 C0 06            [24]  792 	push	ar6
      00014B C0 05            [24]  793 	push	ar5
      00014D C0 04            [24]  794 	push	ar4
      00014F C0 02            [24]  795 	push	ar2
      000151 12r00rFB         [24]  796 	lcall	_sioRX
      000154 AB 82            [24]  797 	mov	r3,dpl
      000156 D0 02            [24]  798 	pop	ar2
      000158 D0 04            [24]  799 	pop	ar4
      00015A D0 05            [24]  800 	pop	ar5
      00015C D0 06            [24]  801 	pop	ar6
      00015E D0 07            [24]  802 	pop	ar7
      000160 8A 82            [24]  803 	mov	dpl,r2
      000162 8C 83            [24]  804 	mov	dph,r4
      000164 8F F0            [24]  805 	mov	b,r7
      000166 EB               [12]  806 	mov	a,r3
      000167 12r00r00         [24]  807 	lcall	__gptrput
      00016A D0 04            [24]  808 	pop	ar4
      00016C D0 03            [24]  809 	pop	ar3
      00016E 70 A9            [24]  810 	jnz	00103$
                           000170   811 	C$sio.c$98$1_0$30 ==.
                                    812 ;	sio.c:98: break;
      000170                        813 00106$:
                           000170   814 	C$sio.c$100$1_0$30 ==.
                                    815 ;	sio.c:100: }
      000170 15 81            [12]  816 	dec	sp
      000172 D0*00            [24]  817 	pop	_bp
                           000174   818 	C$sio.c$100$1_0$30 ==.
                           000174   819 	XG$sioRXStr$0$0 ==.
      000174 22               [24]  820 	ret
                                    821 ;------------------------------------------------------------
                                    822 ;Allocation info for local variables in function 'sioRXBuf'
                                    823 ;------------------------------------------------------------
                                    824 ;buf                       Allocated to stack - _bp -5
                                    825 ;size                      Allocated to stack - _bp -7
                                    826 ;device                    Allocated to stack - _bp +1
                                    827 ;i                         Allocated to registers r5 r6 
                                    828 ;------------------------------------------------------------
                           000175   829 	G$sioRXBuf$0$0 ==.
                           000175   830 	C$sio.c$102$1_0$33 ==.
                                    831 ;	sio.c:102: void sioRXBuf(char device, char* buf, unsigned int size)
                                    832 ;	-----------------------------------------
                                    833 ;	 function sioRXBuf
                                    834 ;	-----------------------------------------
      000175                        835 _sioRXBuf:
      000175 C0*00            [24]  836 	push	_bp
      000177 85 81*00         [24]  837 	mov	_bp,sp
      00017A C0 82            [24]  838 	push	dpl
                           00017C   839 	C$sio.c$108$1_0$33 ==.
                                    840 ;	sio.c:108: while(size--)
      00017C E4               [12]  841 	clr	a
      00017D FD               [12]  842 	mov	r5,a
      00017E FE               [12]  843 	mov	r6,a
      00017F E5*00            [12]  844 	mov	a,_bp
      000181 24 F9            [12]  845 	add	a,#0xf9
      000183 F8               [12]  846 	mov	r0,a
      000184 86 03            [24]  847 	mov	ar3,@r0
      000186 08               [12]  848 	inc	r0
      000187 86 04            [24]  849 	mov	ar4,@r0
      000189                        850 00101$:
      000189 8B 02            [24]  851 	mov	ar2,r3
      00018B 8C 07            [24]  852 	mov	ar7,r4
      00018D 1B               [12]  853 	dec	r3
      00018E BB FF 01         [24]  854 	cjne	r3,#0xff,00115$
      000191 1C               [12]  855 	dec	r4
      000192                        856 00115$:
      000192 EA               [12]  857 	mov	a,r2
      000193 4F               [12]  858 	orl	a,r7
      000194 60 4A            [24]  859 	jz	00104$
                           000196   860 	C$sio.c$110$1_0$33 ==.
                                    861 ;	sio.c:110: buf[i++] = sioRX(device);
      000196 C0 03            [24]  862 	push	ar3
      000198 C0 04            [24]  863 	push	ar4
      00019A 8D 02            [24]  864 	mov	ar2,r5
      00019C 8E 07            [24]  865 	mov	ar7,r6
      00019E 0D               [12]  866 	inc	r5
      00019F BD 00 01         [24]  867 	cjne	r5,#0x00,00117$
      0001A2 0E               [12]  868 	inc	r6
      0001A3                        869 00117$:
      0001A3 E5*00            [12]  870 	mov	a,_bp
      0001A5 24 FB            [12]  871 	add	a,#0xfb
      0001A7 F8               [12]  872 	mov	r0,a
      0001A8 EA               [12]  873 	mov	a,r2
      0001A9 26               [12]  874 	add	a,@r0
      0001AA FA               [12]  875 	mov	r2,a
      0001AB EF               [12]  876 	mov	a,r7
      0001AC 08               [12]  877 	inc	r0
      0001AD 36               [12]  878 	addc	a,@r0
      0001AE FC               [12]  879 	mov	r4,a
      0001AF 08               [12]  880 	inc	r0
      0001B0 86 07            [24]  881 	mov	ar7,@r0
      0001B2 A8*00            [24]  882 	mov	r0,_bp
      0001B4 08               [12]  883 	inc	r0
      0001B5 86 82            [24]  884 	mov	dpl,@r0
      0001B7 C0 07            [24]  885 	push	ar7
      0001B9 C0 06            [24]  886 	push	ar6
      0001BB C0 05            [24]  887 	push	ar5
      0001BD C0 04            [24]  888 	push	ar4
      0001BF C0 02            [24]  889 	push	ar2
      0001C1 12r00rFB         [24]  890 	lcall	_sioRX
      0001C4 AB 82            [24]  891 	mov	r3,dpl
      0001C6 D0 02            [24]  892 	pop	ar2
      0001C8 D0 04            [24]  893 	pop	ar4
      0001CA D0 05            [24]  894 	pop	ar5
      0001CC D0 06            [24]  895 	pop	ar6
      0001CE D0 07            [24]  896 	pop	ar7
      0001D0 8A 82            [24]  897 	mov	dpl,r2
      0001D2 8C 83            [24]  898 	mov	dph,r4
      0001D4 8F F0            [24]  899 	mov	b,r7
      0001D6 EB               [12]  900 	mov	a,r3
      0001D7 12r00r00         [24]  901 	lcall	__gptrput
      0001DA D0 04            [24]  902 	pop	ar4
      0001DC D0 03            [24]  903 	pop	ar3
      0001DE 80 A9            [24]  904 	sjmp	00101$
      0001E0                        905 00104$:
                           0001E0   906 	C$sio.c$112$1_0$33 ==.
                                    907 ;	sio.c:112: }
      0001E0 15 81            [12]  908 	dec	sp
      0001E2 D0*00            [24]  909 	pop	_bp
                           0001E4   910 	C$sio.c$112$1_0$33 ==.
                           0001E4   911 	XG$sioRXBuf$0$0 ==.
      0001E4 22               [24]  912 	ret
                                    913 	.area CSEG    (CODE)
                                    914 	.area CONST   (CODE)
                                    915 	.area XINIT   (CODE)
                                    916 	.area CABS    (ABS,CODE)
