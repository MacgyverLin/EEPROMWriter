                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module compactflash
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CY
                                     12 	.globl _AC
                                     13 	.globl _F0
                                     14 	.globl _RS1
                                     15 	.globl _RS0
                                     16 	.globl _OV
                                     17 	.globl _F1
                                     18 	.globl _P
                                     19 	.globl _PS
                                     20 	.globl _PT1
                                     21 	.globl _PX1
                                     22 	.globl _PT0
                                     23 	.globl _PX0
                                     24 	.globl _RD
                                     25 	.globl _WR
                                     26 	.globl _T1
                                     27 	.globl _T0
                                     28 	.globl _INT1
                                     29 	.globl _INT0
                                     30 	.globl _TXD
                                     31 	.globl _RXD
                                     32 	.globl _P3_7
                                     33 	.globl _P3_6
                                     34 	.globl _P3_5
                                     35 	.globl _P3_4
                                     36 	.globl _P3_3
                                     37 	.globl _P3_2
                                     38 	.globl _P3_1
                                     39 	.globl _P3_0
                                     40 	.globl _EA
                                     41 	.globl _ES
                                     42 	.globl _ET1
                                     43 	.globl _EX1
                                     44 	.globl _ET0
                                     45 	.globl _EX0
                                     46 	.globl _P2_7
                                     47 	.globl _P2_6
                                     48 	.globl _P2_5
                                     49 	.globl _P2_4
                                     50 	.globl _P2_3
                                     51 	.globl _P2_2
                                     52 	.globl _P2_1
                                     53 	.globl _P2_0
                                     54 	.globl _SM0
                                     55 	.globl _SM1
                                     56 	.globl _SM2
                                     57 	.globl _REN
                                     58 	.globl _TB8
                                     59 	.globl _RB8
                                     60 	.globl _TI
                                     61 	.globl _RI
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _TF1
                                     71 	.globl _TR1
                                     72 	.globl _TF0
                                     73 	.globl _TR0
                                     74 	.globl _IE1
                                     75 	.globl _IT1
                                     76 	.globl _IE0
                                     77 	.globl _IT0
                                     78 	.globl _P0_7
                                     79 	.globl _P0_6
                                     80 	.globl _P0_5
                                     81 	.globl _P0_4
                                     82 	.globl _P0_3
                                     83 	.globl _P0_2
                                     84 	.globl _P0_1
                                     85 	.globl _P0_0
                                     86 	.globl _B
                                     87 	.globl _ACC
                                     88 	.globl _PSW
                                     89 	.globl _IP
                                     90 	.globl _P3
                                     91 	.globl _IE
                                     92 	.globl _P2
                                     93 	.globl _SBUF
                                     94 	.globl _SCON
                                     95 	.globl _P1
                                     96 	.globl _TH1
                                     97 	.globl _TH0
                                     98 	.globl _TL1
                                     99 	.globl _TL0
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _PCON
                                    103 	.globl _DPH
                                    104 	.globl _DPL
                                    105 	.globl _SP
                                    106 	.globl _P0
                                    107 	.globl _cfInit
                                    108 	.globl _cfWaitIdle
                                    109 	.globl _cfWaitCommandReady
                                    110 	.globl _cfWaitDataReady
                                    111 	.globl _cfReadSector
                                    112 	.globl _cfWriteSector
                                    113 	.globl _cfDiskGetSectorCount
                                    114 ;--------------------------------------------------------
                                    115 ; special function registers
                                    116 ;--------------------------------------------------------
                                    117 	.area RSEG    (ABS,DATA)
      000000                        118 	.org 0x0000
                           000080   119 G$P0$0_0$0 == 0x0080
                           000080   120 _P0	=	0x0080
                           000081   121 G$SP$0_0$0 == 0x0081
                           000081   122 _SP	=	0x0081
                           000082   123 G$DPL$0_0$0 == 0x0082
                           000082   124 _DPL	=	0x0082
                           000083   125 G$DPH$0_0$0 == 0x0083
                           000083   126 _DPH	=	0x0083
                           000087   127 G$PCON$0_0$0 == 0x0087
                           000087   128 _PCON	=	0x0087
                           000088   129 G$TCON$0_0$0 == 0x0088
                           000088   130 _TCON	=	0x0088
                           000089   131 G$TMOD$0_0$0 == 0x0089
                           000089   132 _TMOD	=	0x0089
                           00008A   133 G$TL0$0_0$0 == 0x008a
                           00008A   134 _TL0	=	0x008a
                           00008B   135 G$TL1$0_0$0 == 0x008b
                           00008B   136 _TL1	=	0x008b
                           00008C   137 G$TH0$0_0$0 == 0x008c
                           00008C   138 _TH0	=	0x008c
                           00008D   139 G$TH1$0_0$0 == 0x008d
                           00008D   140 _TH1	=	0x008d
                           000090   141 G$P1$0_0$0 == 0x0090
                           000090   142 _P1	=	0x0090
                           000098   143 G$SCON$0_0$0 == 0x0098
                           000098   144 _SCON	=	0x0098
                           000099   145 G$SBUF$0_0$0 == 0x0099
                           000099   146 _SBUF	=	0x0099
                           0000A0   147 G$P2$0_0$0 == 0x00a0
                           0000A0   148 _P2	=	0x00a0
                           0000A8   149 G$IE$0_0$0 == 0x00a8
                           0000A8   150 _IE	=	0x00a8
                           0000B0   151 G$P3$0_0$0 == 0x00b0
                           0000B0   152 _P3	=	0x00b0
                           0000B8   153 G$IP$0_0$0 == 0x00b8
                           0000B8   154 _IP	=	0x00b8
                           0000D0   155 G$PSW$0_0$0 == 0x00d0
                           0000D0   156 _PSW	=	0x00d0
                           0000E0   157 G$ACC$0_0$0 == 0x00e0
                           0000E0   158 _ACC	=	0x00e0
                           0000F0   159 G$B$0_0$0 == 0x00f0
                           0000F0   160 _B	=	0x00f0
                                    161 ;--------------------------------------------------------
                                    162 ; special function bits
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
                           000080   166 G$P0_0$0_0$0 == 0x0080
                           000080   167 _P0_0	=	0x0080
                           000081   168 G$P0_1$0_0$0 == 0x0081
                           000081   169 _P0_1	=	0x0081
                           000082   170 G$P0_2$0_0$0 == 0x0082
                           000082   171 _P0_2	=	0x0082
                           000083   172 G$P0_3$0_0$0 == 0x0083
                           000083   173 _P0_3	=	0x0083
                           000084   174 G$P0_4$0_0$0 == 0x0084
                           000084   175 _P0_4	=	0x0084
                           000085   176 G$P0_5$0_0$0 == 0x0085
                           000085   177 _P0_5	=	0x0085
                           000086   178 G$P0_6$0_0$0 == 0x0086
                           000086   179 _P0_6	=	0x0086
                           000087   180 G$P0_7$0_0$0 == 0x0087
                           000087   181 _P0_7	=	0x0087
                           000088   182 G$IT0$0_0$0 == 0x0088
                           000088   183 _IT0	=	0x0088
                           000089   184 G$IE0$0_0$0 == 0x0089
                           000089   185 _IE0	=	0x0089
                           00008A   186 G$IT1$0_0$0 == 0x008a
                           00008A   187 _IT1	=	0x008a
                           00008B   188 G$IE1$0_0$0 == 0x008b
                           00008B   189 _IE1	=	0x008b
                           00008C   190 G$TR0$0_0$0 == 0x008c
                           00008C   191 _TR0	=	0x008c
                           00008D   192 G$TF0$0_0$0 == 0x008d
                           00008D   193 _TF0	=	0x008d
                           00008E   194 G$TR1$0_0$0 == 0x008e
                           00008E   195 _TR1	=	0x008e
                           00008F   196 G$TF1$0_0$0 == 0x008f
                           00008F   197 _TF1	=	0x008f
                           000090   198 G$P1_0$0_0$0 == 0x0090
                           000090   199 _P1_0	=	0x0090
                           000091   200 G$P1_1$0_0$0 == 0x0091
                           000091   201 _P1_1	=	0x0091
                           000092   202 G$P1_2$0_0$0 == 0x0092
                           000092   203 _P1_2	=	0x0092
                           000093   204 G$P1_3$0_0$0 == 0x0093
                           000093   205 _P1_3	=	0x0093
                           000094   206 G$P1_4$0_0$0 == 0x0094
                           000094   207 _P1_4	=	0x0094
                           000095   208 G$P1_5$0_0$0 == 0x0095
                           000095   209 _P1_5	=	0x0095
                           000096   210 G$P1_6$0_0$0 == 0x0096
                           000096   211 _P1_6	=	0x0096
                           000097   212 G$P1_7$0_0$0 == 0x0097
                           000097   213 _P1_7	=	0x0097
                           000098   214 G$RI$0_0$0 == 0x0098
                           000098   215 _RI	=	0x0098
                           000099   216 G$TI$0_0$0 == 0x0099
                           000099   217 _TI	=	0x0099
                           00009A   218 G$RB8$0_0$0 == 0x009a
                           00009A   219 _RB8	=	0x009a
                           00009B   220 G$TB8$0_0$0 == 0x009b
                           00009B   221 _TB8	=	0x009b
                           00009C   222 G$REN$0_0$0 == 0x009c
                           00009C   223 _REN	=	0x009c
                           00009D   224 G$SM2$0_0$0 == 0x009d
                           00009D   225 _SM2	=	0x009d
                           00009E   226 G$SM1$0_0$0 == 0x009e
                           00009E   227 _SM1	=	0x009e
                           00009F   228 G$SM0$0_0$0 == 0x009f
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 G$P2_0$0_0$0 == 0x00a0
                           0000A0   231 _P2_0	=	0x00a0
                           0000A1   232 G$P2_1$0_0$0 == 0x00a1
                           0000A1   233 _P2_1	=	0x00a1
                           0000A2   234 G$P2_2$0_0$0 == 0x00a2
                           0000A2   235 _P2_2	=	0x00a2
                           0000A3   236 G$P2_3$0_0$0 == 0x00a3
                           0000A3   237 _P2_3	=	0x00a3
                           0000A4   238 G$P2_4$0_0$0 == 0x00a4
                           0000A4   239 _P2_4	=	0x00a4
                           0000A5   240 G$P2_5$0_0$0 == 0x00a5
                           0000A5   241 _P2_5	=	0x00a5
                           0000A6   242 G$P2_6$0_0$0 == 0x00a6
                           0000A6   243 _P2_6	=	0x00a6
                           0000A7   244 G$P2_7$0_0$0 == 0x00a7
                           0000A7   245 _P2_7	=	0x00a7
                           0000A8   246 G$EX0$0_0$0 == 0x00a8
                           0000A8   247 _EX0	=	0x00a8
                           0000A9   248 G$ET0$0_0$0 == 0x00a9
                           0000A9   249 _ET0	=	0x00a9
                           0000AA   250 G$EX1$0_0$0 == 0x00aa
                           0000AA   251 _EX1	=	0x00aa
                           0000AB   252 G$ET1$0_0$0 == 0x00ab
                           0000AB   253 _ET1	=	0x00ab
                           0000AC   254 G$ES$0_0$0 == 0x00ac
                           0000AC   255 _ES	=	0x00ac
                           0000AF   256 G$EA$0_0$0 == 0x00af
                           0000AF   257 _EA	=	0x00af
                           0000B0   258 G$P3_0$0_0$0 == 0x00b0
                           0000B0   259 _P3_0	=	0x00b0
                           0000B1   260 G$P3_1$0_0$0 == 0x00b1
                           0000B1   261 _P3_1	=	0x00b1
                           0000B2   262 G$P3_2$0_0$0 == 0x00b2
                           0000B2   263 _P3_2	=	0x00b2
                           0000B3   264 G$P3_3$0_0$0 == 0x00b3
                           0000B3   265 _P3_3	=	0x00b3
                           0000B4   266 G$P3_4$0_0$0 == 0x00b4
                           0000B4   267 _P3_4	=	0x00b4
                           0000B5   268 G$P3_5$0_0$0 == 0x00b5
                           0000B5   269 _P3_5	=	0x00b5
                           0000B6   270 G$P3_6$0_0$0 == 0x00b6
                           0000B6   271 _P3_6	=	0x00b6
                           0000B7   272 G$P3_7$0_0$0 == 0x00b7
                           0000B7   273 _P3_7	=	0x00b7
                           0000B0   274 G$RXD$0_0$0 == 0x00b0
                           0000B0   275 _RXD	=	0x00b0
                           0000B1   276 G$TXD$0_0$0 == 0x00b1
                           0000B1   277 _TXD	=	0x00b1
                           0000B2   278 G$INT0$0_0$0 == 0x00b2
                           0000B2   279 _INT0	=	0x00b2
                           0000B3   280 G$INT1$0_0$0 == 0x00b3
                           0000B3   281 _INT1	=	0x00b3
                           0000B4   282 G$T0$0_0$0 == 0x00b4
                           0000B4   283 _T0	=	0x00b4
                           0000B5   284 G$T1$0_0$0 == 0x00b5
                           0000B5   285 _T1	=	0x00b5
                           0000B6   286 G$WR$0_0$0 == 0x00b6
                           0000B6   287 _WR	=	0x00b6
                           0000B7   288 G$RD$0_0$0 == 0x00b7
                           0000B7   289 _RD	=	0x00b7
                           0000B8   290 G$PX0$0_0$0 == 0x00b8
                           0000B8   291 _PX0	=	0x00b8
                           0000B9   292 G$PT0$0_0$0 == 0x00b9
                           0000B9   293 _PT0	=	0x00b9
                           0000BA   294 G$PX1$0_0$0 == 0x00ba
                           0000BA   295 _PX1	=	0x00ba
                           0000BB   296 G$PT1$0_0$0 == 0x00bb
                           0000BB   297 _PT1	=	0x00bb
                           0000BC   298 G$PS$0_0$0 == 0x00bc
                           0000BC   299 _PS	=	0x00bc
                           0000D0   300 G$P$0_0$0 == 0x00d0
                           0000D0   301 _P	=	0x00d0
                           0000D1   302 G$F1$0_0$0 == 0x00d1
                           0000D1   303 _F1	=	0x00d1
                           0000D2   304 G$OV$0_0$0 == 0x00d2
                           0000D2   305 _OV	=	0x00d2
                           0000D3   306 G$RS0$0_0$0 == 0x00d3
                           0000D3   307 _RS0	=	0x00d3
                           0000D4   308 G$RS1$0_0$0 == 0x00d4
                           0000D4   309 _RS1	=	0x00d4
                           0000D5   310 G$F0$0_0$0 == 0x00d5
                           0000D5   311 _F0	=	0x00d5
                           0000D6   312 G$AC$0_0$0 == 0x00d6
                           0000D6   313 _AC	=	0x00d6
                           0000D7   314 G$CY$0_0$0 == 0x00d7
                           0000D7   315 _CY	=	0x00d7
                                    316 ;--------------------------------------------------------
                                    317 ; overlayable register banks
                                    318 ;--------------------------------------------------------
                                    319 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        320 	.ds 8
                                    321 ;--------------------------------------------------------
                                    322 ; internal ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area DSEG    (DATA)
                                    325 ;--------------------------------------------------------
                                    326 ; overlayable items in internal ram 
                                    327 ;--------------------------------------------------------
                                    328 ;--------------------------------------------------------
                                    329 ; indirectly addressable internal ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area ISEG    (DATA)
                                    332 ;--------------------------------------------------------
                                    333 ; absolute internal ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area IABS    (ABS,DATA)
                                    336 	.area IABS    (ABS,DATA)
                                    337 ;--------------------------------------------------------
                                    338 ; bit data
                                    339 ;--------------------------------------------------------
                                    340 	.area BSEG    (BIT)
                                    341 ;--------------------------------------------------------
                                    342 ; paged external ram data
                                    343 ;--------------------------------------------------------
                                    344 	.area PSEG    (PAG,XDATA)
                                    345 ;--------------------------------------------------------
                                    346 ; external ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area XSEG    (XDATA)
                                    349 ;--------------------------------------------------------
                                    350 ; absolute external ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area XABS    (ABS,XDATA)
                                    353 ;--------------------------------------------------------
                                    354 ; external initialized ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area XISEG   (XDATA)
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT0 (CODE)
                                    359 	.area GSINIT1 (CODE)
                                    360 	.area GSINIT2 (CODE)
                                    361 	.area GSINIT3 (CODE)
                                    362 	.area GSINIT4 (CODE)
                                    363 	.area GSINIT5 (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.area GSFINAL (CODE)
                                    366 	.area CSEG    (CODE)
                                    367 ;--------------------------------------------------------
                                    368 ; global & static initialisations
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
                                    371 	.area GSINIT  (CODE)
                                    372 	.area GSFINAL (CODE)
                                    373 	.area GSINIT  (CODE)
                                    374 ;--------------------------------------------------------
                                    375 ; Home
                                    376 ;--------------------------------------------------------
                                    377 	.area HOME    (CODE)
                                    378 	.area HOME    (CODE)
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'cfInit'
                                    385 ;------------------------------------------------------------
                                    386 ;device                    Allocated to registers r7 
                                    387 ;------------------------------------------------------------
                           000000   388 	G$cfInit$0$0 ==.
                           000000   389 	C$compactflash.c$3$0_0$9 ==.
                                    390 ;	compactflash.c:3: void cfInit(char device)
                                    391 ;	-----------------------------------------
                                    392 ;	 function cfInit
                                    393 ;	-----------------------------------------
      000000                        394 _cfInit:
                           000007   395 	ar7 = 0x07
                           000006   396 	ar6 = 0x06
                           000005   397 	ar5 = 0x05
                           000004   398 	ar4 = 0x04
                           000003   399 	ar3 = 0x03
                           000002   400 	ar2 = 0x02
                           000001   401 	ar1 = 0x01
                           000000   402 	ar0 = 0x00
                           000000   403 	C$compactflash.c$5$1_0$9 ==.
                                    404 ;	compactflash.c:5: cfWaitIdle(device);
      000000 AF 82            [24]  405 	mov  r7,dpl
      000002 C0 07            [24]  406 	push	ar7
      000004 12r00r45         [24]  407 	lcall	_cfWaitIdle
      000007 D0 07            [24]  408 	pop	ar7
                           000009   409 	C$compactflash.c$7$1_0$9 ==.
                                    410 ;	compactflash.c:7: cfWriteFeatures(device, 0x01); //  set 8 bit mode to features port
      000009 8F 05            [24]  411 	mov	ar5,r7
      00000B E4               [12]  412 	clr	a
      00000C C4               [12]  413 	swap	a
      00000D 54 F0            [12]  414 	anl	a,#0xf0
      00000F CD               [12]  415 	xch	a,r5
      000010 C4               [12]  416 	swap	a
      000011 CD               [12]  417 	xch	a,r5
      000012 6D               [12]  418 	xrl	a,r5
      000013 CD               [12]  419 	xch	a,r5
      000014 54 F0            [12]  420 	anl	a,#0xf0
      000016 CD               [12]  421 	xch	a,r5
      000017 6D               [12]  422 	xrl	a,r5
      000018 FE               [12]  423 	mov	r6,a
      000019 74 21            [12]  424 	mov	a,#0x21
      00001B 2D               [12]  425 	add	a,r5
      00001C FB               [12]  426 	mov	r3,a
      00001D 74 FF            [12]  427 	mov	a,#0xff
      00001F 3E               [12]  428 	addc	a,r6
      000020 FC               [12]  429 	mov	r4,a
      000021 8B 82            [24]  430 	mov	dpl,r3
      000023 8C 83            [24]  431 	mov	dph,r4
      000025 74 01            [12]  432 	mov	a,#0x01
      000027 F0               [24]  433 	movx	@dptr,a
                           000028   434 	C$compactflash.c$9$1_0$9 ==.
                                    435 ;	compactflash.c:9: cfWaitIdle(device);
      000028 8F 82            [24]  436 	mov	dpl,r7
      00002A C0 06            [24]  437 	push	ar6
      00002C C0 05            [24]  438 	push	ar5
      00002E 12r00r45         [24]  439 	lcall	_cfWaitIdle
      000031 D0 05            [24]  440 	pop	ar5
      000033 D0 06            [24]  441 	pop	ar6
                           000035   442 	C$compactflash.c$11$1_0$9 ==.
                                    443 ;	compactflash.c:11: cfWriteCommand(device, 0xef);  // command 'set features'
      000035 74 27            [12]  444 	mov	a,#0x27
      000037 2D               [12]  445 	add	a,r5
      000038 FD               [12]  446 	mov	r5,a
      000039 74 FF            [12]  447 	mov	a,#0xff
      00003B 3E               [12]  448 	addc	a,r6
      00003C FE               [12]  449 	mov	r6,a
      00003D 8D 82            [24]  450 	mov	dpl,r5
      00003F 8E 83            [24]  451 	mov	dph,r6
      000041 74 EF            [12]  452 	mov	a,#0xef
      000043 F0               [24]  453 	movx	@dptr,a
                           000044   454 	C$compactflash.c$12$1_0$9 ==.
                                    455 ;	compactflash.c:12: }
                           000044   456 	C$compactflash.c$12$1_0$9 ==.
                           000044   457 	XG$cfInit$0$0 ==.
      000044 22               [24]  458 	ret
                                    459 ;------------------------------------------------------------
                                    460 ;Allocation info for local variables in function 'cfWaitIdle'
                                    461 ;------------------------------------------------------------
                                    462 ;device                    Allocated to registers r7 
                                    463 ;status                    Allocated to registers r6 
                                    464 ;------------------------------------------------------------
                           000045   465 	G$cfWaitIdle$0$0 ==.
                           000045   466 	C$compactflash.c$14$1_0$11 ==.
                                    467 ;	compactflash.c:14: void cfWaitIdle(char device)
                                    468 ;	-----------------------------------------
                                    469 ;	 function cfWaitIdle
                                    470 ;	-----------------------------------------
      000045                        471 _cfWaitIdle:
      000045 AF 82            [24]  472 	mov	r7,dpl
                           000047   473 	C$compactflash.c$17$1_0$11 ==.
                                    474 ;	compactflash.c:17: do
      000047                        475 00101$:
                           000047   476 	C$compactflash.c$19$2_0$12 ==.
                                    477 ;	compactflash.c:19: status = cfReadStatus(device);
      000047 8F 05            [24]  478 	mov	ar5,r7
      000049 E4               [12]  479 	clr	a
      00004A C4               [12]  480 	swap	a
      00004B 54 F0            [12]  481 	anl	a,#0xf0
      00004D CD               [12]  482 	xch	a,r5
      00004E C4               [12]  483 	swap	a
      00004F CD               [12]  484 	xch	a,r5
      000050 6D               [12]  485 	xrl	a,r5
      000051 CD               [12]  486 	xch	a,r5
      000052 54 F0            [12]  487 	anl	a,#0xf0
      000054 CD               [12]  488 	xch	a,r5
      000055 6D               [12]  489 	xrl	a,r5
      000056 FE               [12]  490 	mov	r6,a
      000057 74 27            [12]  491 	mov	a,#0x27
      000059 2D               [12]  492 	add	a,r5
      00005A FD               [12]  493 	mov	r5,a
      00005B 74 FF            [12]  494 	mov	a,#0xff
      00005D 3E               [12]  495 	addc	a,r6
      00005E FE               [12]  496 	mov	r6,a
      00005F 8D 82            [24]  497 	mov	dpl,r5
      000061 8E 83            [24]  498 	mov	dph,r6
      000063 E0               [24]  499 	movx	a,@dptr
                           000064   500 	C$compactflash.c$21$1_0$11 ==.
                                    501 ;	compactflash.c:21: while((status & 0x80)!=0);
      000064 20 E7 E0         [24]  502 	jb	acc.7,00101$
                           000067   503 	C$compactflash.c$22$1_0$11 ==.
                                    504 ;	compactflash.c:22: }
                           000067   505 	C$compactflash.c$22$1_0$11 ==.
                           000067   506 	XG$cfWaitIdle$0$0 ==.
      000067 22               [24]  507 	ret
                                    508 ;------------------------------------------------------------
                                    509 ;Allocation info for local variables in function 'cfWaitCommandReady'
                                    510 ;------------------------------------------------------------
                                    511 ;device                    Allocated to registers r7 
                                    512 ;status                    Allocated to registers r6 
                                    513 ;------------------------------------------------------------
                           000068   514 	G$cfWaitCommandReady$0$0 ==.
                           000068   515 	C$compactflash.c$24$1_0$14 ==.
                                    516 ;	compactflash.c:24: void cfWaitCommandReady(char device)
                                    517 ;	-----------------------------------------
                                    518 ;	 function cfWaitCommandReady
                                    519 ;	-----------------------------------------
      000068                        520 _cfWaitCommandReady:
      000068 AF 82            [24]  521 	mov	r7,dpl
                           00006A   522 	C$compactflash.c$28$1_0$14 ==.
                                    523 ;	compactflash.c:28: do
      00006A                        524 00101$:
                           00006A   525 	C$compactflash.c$30$2_0$15 ==.
                                    526 ;	compactflash.c:30: status = cfReadStatus(device);
      00006A 8F 05            [24]  527 	mov	ar5,r7
      00006C E4               [12]  528 	clr	a
      00006D C4               [12]  529 	swap	a
      00006E 54 F0            [12]  530 	anl	a,#0xf0
      000070 CD               [12]  531 	xch	a,r5
      000071 C4               [12]  532 	swap	a
      000072 CD               [12]  533 	xch	a,r5
      000073 6D               [12]  534 	xrl	a,r5
      000074 CD               [12]  535 	xch	a,r5
      000075 54 F0            [12]  536 	anl	a,#0xf0
      000077 CD               [12]  537 	xch	a,r5
      000078 6D               [12]  538 	xrl	a,r5
      000079 FE               [12]  539 	mov	r6,a
      00007A 74 27            [12]  540 	mov	a,#0x27
      00007C 2D               [12]  541 	add	a,r5
      00007D FD               [12]  542 	mov	r5,a
      00007E 74 FF            [12]  543 	mov	a,#0xff
      000080 3E               [12]  544 	addc	a,r6
      000081 FE               [12]  545 	mov	r6,a
      000082 8D 82            [24]  546 	mov	dpl,r5
      000084 8E 83            [24]  547 	mov	dph,r6
      000086 E0               [24]  548 	movx	a,@dptr
      000087 FE               [12]  549 	mov	r6,a
                           000088   550 	C$compactflash.c$32$1_0$14 ==.
                                    551 ;	compactflash.c:32: while((status & 0xc0)!=0x40);
      000088 53 06 C0         [24]  552 	anl	ar6,#0xc0
      00008B 7D 00            [12]  553 	mov	r5,#0x00
      00008D BE 40 DA         [24]  554 	cjne	r6,#0x40,00101$
      000090 BD 00 D7         [24]  555 	cjne	r5,#0x00,00101$
                           000093   556 	C$compactflash.c$33$1_0$14 ==.
                                    557 ;	compactflash.c:33: }
                           000093   558 	C$compactflash.c$33$1_0$14 ==.
                           000093   559 	XG$cfWaitCommandReady$0$0 ==.
      000093 22               [24]  560 	ret
                                    561 ;------------------------------------------------------------
                                    562 ;Allocation info for local variables in function 'cfWaitDataReady'
                                    563 ;------------------------------------------------------------
                                    564 ;device                    Allocated to registers r7 
                                    565 ;status                    Allocated to registers r6 
                                    566 ;------------------------------------------------------------
                           000094   567 	G$cfWaitDataReady$0$0 ==.
                           000094   568 	C$compactflash.c$35$1_0$17 ==.
                                    569 ;	compactflash.c:35: void cfWaitDataReady(char device)
                                    570 ;	-----------------------------------------
                                    571 ;	 function cfWaitDataReady
                                    572 ;	-----------------------------------------
      000094                        573 _cfWaitDataReady:
      000094 AF 82            [24]  574 	mov	r7,dpl
                           000096   575 	C$compactflash.c$38$1_0$17 ==.
                                    576 ;	compactflash.c:38: do
      000096                        577 00101$:
                           000096   578 	C$compactflash.c$40$2_0$18 ==.
                                    579 ;	compactflash.c:40: status = cfReadStatus(device);
      000096 8F 05            [24]  580 	mov	ar5,r7
      000098 E4               [12]  581 	clr	a
      000099 C4               [12]  582 	swap	a
      00009A 54 F0            [12]  583 	anl	a,#0xf0
      00009C CD               [12]  584 	xch	a,r5
      00009D C4               [12]  585 	swap	a
      00009E CD               [12]  586 	xch	a,r5
      00009F 6D               [12]  587 	xrl	a,r5
      0000A0 CD               [12]  588 	xch	a,r5
      0000A1 54 F0            [12]  589 	anl	a,#0xf0
      0000A3 CD               [12]  590 	xch	a,r5
      0000A4 6D               [12]  591 	xrl	a,r5
      0000A5 FE               [12]  592 	mov	r6,a
      0000A6 74 27            [12]  593 	mov	a,#0x27
      0000A8 2D               [12]  594 	add	a,r5
      0000A9 FD               [12]  595 	mov	r5,a
      0000AA 74 FF            [12]  596 	mov	a,#0xff
      0000AC 3E               [12]  597 	addc	a,r6
      0000AD FE               [12]  598 	mov	r6,a
      0000AE 8D 82            [24]  599 	mov	dpl,r5
      0000B0 8E 83            [24]  600 	mov	dph,r6
      0000B2 E0               [24]  601 	movx	a,@dptr
      0000B3 FE               [12]  602 	mov	r6,a
                           0000B4   603 	C$compactflash.c$42$1_0$17 ==.
                                    604 ;	compactflash.c:42: while((status & 0x88)!=0x08);
      0000B4 53 06 88         [24]  605 	anl	ar6,#0x88
      0000B7 7D 00            [12]  606 	mov	r5,#0x00
      0000B9 BE 08 DA         [24]  607 	cjne	r6,#0x08,00101$
      0000BC BD 00 D7         [24]  608 	cjne	r5,#0x00,00101$
                           0000BF   609 	C$compactflash.c$43$1_0$17 ==.
                                    610 ;	compactflash.c:43: }
                           0000BF   611 	C$compactflash.c$43$1_0$17 ==.
                           0000BF   612 	XG$cfWaitDataReady$0$0 ==.
      0000BF 22               [24]  613 	ret
                                    614 ;------------------------------------------------------------
                                    615 ;Allocation info for local variables in function 'cfReadSector'
                                    616 ;------------------------------------------------------------
                                    617 ;buf                       Allocated to stack - _bp -5
                                    618 ;LBA                       Allocated to stack - _bp -9
                                    619 ;sectorCount               Allocated to stack - _bp -11
                                    620 ;device                    Allocated to stack - _bp +1
                                    621 ;status                    Allocated to registers r2 
                                    622 ;i                         Allocated to stack - _bp +4
                                    623 ;idx                       Allocated to stack - _bp +6
                                    624 ;sloc0                     Allocated to stack - _bp +2
                                    625 ;------------------------------------------------------------
                           0000C0   626 	G$cfReadSector$0$0 ==.
                           0000C0   627 	C$compactflash.c$45$1_0$20 ==.
                                    628 ;	compactflash.c:45: void cfReadSector(char device, char* buf, unsigned long LBA, unsigned int sectorCount)
                                    629 ;	-----------------------------------------
                                    630 ;	 function cfReadSector
                                    631 ;	-----------------------------------------
      0000C0                        632 _cfReadSector:
      0000C0 C0*00            [24]  633 	push	_bp
      0000C2 85 81*00         [24]  634 	mov	_bp,sp
      0000C5 C0 82            [24]  635 	push	dpl
      0000C7 E5 81            [12]  636 	mov	a,sp
      0000C9 24 06            [12]  637 	add	a,#0x06
      0000CB F5 81            [12]  638 	mov	sp,a
                           0000CD   639 	C$compactflash.c$53$1_0$20 ==.
                                    640 ;	compactflash.c:53: P1 = 0xe1;
      0000CD 75 90 E1         [24]  641 	mov	_P1,#0xe1
                           0000D0   642 	C$compactflash.c$54$1_0$20 ==.
                                    643 ;	compactflash.c:54: cfWaitIdle(device);
      0000D0 A8*00            [24]  644 	mov	r0,_bp
      0000D2 08               [12]  645 	inc	r0
      0000D3 86 82            [24]  646 	mov	dpl,@r0
      0000D5 12r00r45         [24]  647 	lcall	_cfWaitIdle
                           0000D8   648 	C$compactflash.c$56$1_0$20 ==.
                                    649 ;	compactflash.c:56: P1 = 0xe2;
      0000D8 75 90 E2         [24]  650 	mov	_P1,#0xe2
                           0000DB   651 	C$compactflash.c$57$1_0$20 ==.
                                    652 ;	compactflash.c:57: cfWriteSectorCount(device, 0x01);
      0000DB A8*00            [24]  653 	mov	r0,_bp
      0000DD 08               [12]  654 	inc	r0
      0000DE 86 05            [24]  655 	mov	ar5,@r0
      0000E0 E4               [12]  656 	clr	a
      0000E1 CD               [12]  657 	xch	a,r5
      0000E2 C4               [12]  658 	swap	a
      0000E3 CD               [12]  659 	xch	a,r5
      0000E4 6D               [12]  660 	xrl	a,r5
      0000E5 CD               [12]  661 	xch	a,r5
      0000E6 54 F0            [12]  662 	anl	a,#0xf0
      0000E8 CD               [12]  663 	xch	a,r5
      0000E9 6D               [12]  664 	xrl	a,r5
      0000EA FE               [12]  665 	mov	r6,a
      0000EB 74 22            [12]  666 	mov	a,#0x22
      0000ED 2D               [12]  667 	add	a,r5
      0000EE FB               [12]  668 	mov	r3,a
      0000EF 74 FF            [12]  669 	mov	a,#0xff
      0000F1 3E               [12]  670 	addc	a,r6
      0000F2 FC               [12]  671 	mov	r4,a
      0000F3 8B 82            [24]  672 	mov	dpl,r3
      0000F5 8C 83            [24]  673 	mov	dph,r4
      0000F7 74 01            [12]  674 	mov	a,#0x01
      0000F9 F0               [24]  675 	movx	@dptr,a
                           0000FA   676 	C$compactflash.c$59$1_0$20 ==.
                                    677 ;	compactflash.c:59: P1 = 0xe3;
      0000FA 75 90 E3         [24]  678 	mov	_P1,#0xe3
                           0000FD   679 	C$compactflash.c$60$1_0$20 ==.
                                    680 ;	compactflash.c:60: cfWaitIdle(device);
      0000FD A8*00            [24]  681 	mov	r0,_bp
      0000FF 08               [12]  682 	inc	r0
      000100 86 82            [24]  683 	mov	dpl,@r0
      000102 C0 06            [24]  684 	push	ar6
      000104 C0 05            [24]  685 	push	ar5
      000106 12r00r45         [24]  686 	lcall	_cfWaitIdle
      000109 D0 05            [24]  687 	pop	ar5
      00010B D0 06            [24]  688 	pop	ar6
                           00010D   689 	C$compactflash.c$62$1_0$20 ==.
                                    690 ;	compactflash.c:62: P1 = 0xe4;
      00010D 75 90 E4         [24]  691 	mov	_P1,#0xe4
                           000110   692 	C$compactflash.c$63$1_0$20 ==.
                                    693 ;	compactflash.c:63: cfWriteLBA0(device, ((LBA   ) & 0xff) );
      000110 74 23            [12]  694 	mov	a,#0x23
      000112 2D               [12]  695 	add	a,r5
      000113 FB               [12]  696 	mov	r3,a
      000114 74 FF            [12]  697 	mov	a,#0xff
      000116 3E               [12]  698 	addc	a,r6
      000117 FC               [12]  699 	mov	r4,a
      000118 E5*00            [12]  700 	mov	a,_bp
      00011A 24 F7            [12]  701 	add	a,#0xf7
      00011C F8               [12]  702 	mov	r0,a
      00011D 86 02            [24]  703 	mov	ar2,@r0
      00011F 8B 82            [24]  704 	mov	dpl,r3
      000121 8C 83            [24]  705 	mov	dph,r4
      000123 EA               [12]  706 	mov	a,r2
      000124 F0               [24]  707 	movx	@dptr,a
                           000125   708 	C$compactflash.c$65$1_0$20 ==.
                                    709 ;	compactflash.c:65: P1 = 0xe5;
      000125 75 90 E5         [24]  710 	mov	_P1,#0xe5
                           000128   711 	C$compactflash.c$66$1_0$20 ==.
                                    712 ;	compactflash.c:66: cfWaitIdle(device);
      000128 A8*00            [24]  713 	mov	r0,_bp
      00012A 08               [12]  714 	inc	r0
      00012B 86 82            [24]  715 	mov	dpl,@r0
      00012D C0 06            [24]  716 	push	ar6
      00012F C0 05            [24]  717 	push	ar5
      000131 12r00r45         [24]  718 	lcall	_cfWaitIdle
      000134 D0 05            [24]  719 	pop	ar5
      000136 D0 06            [24]  720 	pop	ar6
                           000138   721 	C$compactflash.c$68$1_0$20 ==.
                                    722 ;	compactflash.c:68: P1 = 0xe6;
      000138 75 90 E6         [24]  723 	mov	_P1,#0xe6
                           00013B   724 	C$compactflash.c$69$1_0$20 ==.
                                    725 ;	compactflash.c:69: cfWriteLBA1(device, ((LBA>>8) & 0xff) );
      00013B 74 24            [12]  726 	mov	a,#0x24
      00013D 2D               [12]  727 	add	a,r5
      00013E FB               [12]  728 	mov	r3,a
      00013F 74 FF            [12]  729 	mov	a,#0xff
      000141 3E               [12]  730 	addc	a,r6
      000142 FC               [12]  731 	mov	r4,a
      000143 E5*00            [12]  732 	mov	a,_bp
      000145 24 F7            [12]  733 	add	a,#0xf7
      000147 F8               [12]  734 	mov	r0,a
      000148 08               [12]  735 	inc	r0
      000149 86 02            [24]  736 	mov	ar2,@r0
      00014B 8B 82            [24]  737 	mov	dpl,r3
      00014D 8C 83            [24]  738 	mov	dph,r4
      00014F EA               [12]  739 	mov	a,r2
      000150 F0               [24]  740 	movx	@dptr,a
                           000151   741 	C$compactflash.c$71$1_0$20 ==.
                                    742 ;	compactflash.c:71: P1 = 0xe7;
      000151 75 90 E7         [24]  743 	mov	_P1,#0xe7
                           000154   744 	C$compactflash.c$72$1_0$20 ==.
                                    745 ;	compactflash.c:72: cfWaitIdle(device);
      000154 A8*00            [24]  746 	mov	r0,_bp
      000156 08               [12]  747 	inc	r0
      000157 86 82            [24]  748 	mov	dpl,@r0
      000159 C0 06            [24]  749 	push	ar6
      00015B C0 05            [24]  750 	push	ar5
      00015D 12r00r45         [24]  751 	lcall	_cfWaitIdle
      000160 D0 05            [24]  752 	pop	ar5
      000162 D0 06            [24]  753 	pop	ar6
                           000164   754 	C$compactflash.c$74$1_0$20 ==.
                                    755 ;	compactflash.c:74: P1 = 0xe8;
      000164 75 90 E8         [24]  756 	mov	_P1,#0xe8
                           000167   757 	C$compactflash.c$75$1_0$20 ==.
                                    758 ;	compactflash.c:75: cfWriteLBA2(device, ((LBA>>16) & 0xff) );
      000167 74 25            [12]  759 	mov	a,#0x25
      000169 2D               [12]  760 	add	a,r5
      00016A FB               [12]  761 	mov	r3,a
      00016B 74 FF            [12]  762 	mov	a,#0xff
      00016D 3E               [12]  763 	addc	a,r6
      00016E FC               [12]  764 	mov	r4,a
      00016F E5*00            [12]  765 	mov	a,_bp
      000171 24 F7            [12]  766 	add	a,#0xf7
      000173 F8               [12]  767 	mov	r0,a
      000174 08               [12]  768 	inc	r0
      000175 08               [12]  769 	inc	r0
      000176 86 02            [24]  770 	mov	ar2,@r0
      000178 8B 82            [24]  771 	mov	dpl,r3
      00017A 8C 83            [24]  772 	mov	dph,r4
      00017C EA               [12]  773 	mov	a,r2
      00017D F0               [24]  774 	movx	@dptr,a
                           00017E   775 	C$compactflash.c$77$1_0$20 ==.
                                    776 ;	compactflash.c:77: P1 = 0xe9;
      00017E 75 90 E9         [24]  777 	mov	_P1,#0xe9
                           000181   778 	C$compactflash.c$78$1_0$20 ==.
                                    779 ;	compactflash.c:78: cfWaitIdle(device);
      000181 A8*00            [24]  780 	mov	r0,_bp
      000183 08               [12]  781 	inc	r0
      000184 86 82            [24]  782 	mov	dpl,@r0
      000186 C0 06            [24]  783 	push	ar6
      000188 C0 05            [24]  784 	push	ar5
      00018A 12r00r45         [24]  785 	lcall	_cfWaitIdle
      00018D D0 05            [24]  786 	pop	ar5
      00018F D0 06            [24]  787 	pop	ar6
                           000191   788 	C$compactflash.c$80$1_0$20 ==.
                                    789 ;	compactflash.c:80: P1 = 0xea;
      000191 75 90 EA         [24]  790 	mov	_P1,#0xea
                           000194   791 	C$compactflash.c$81$1_0$20 ==.
                                    792 ;	compactflash.c:81: cfWriteLBA3(device, (( ((LBA>>24) & 0x1f) | 0xe0)) );
      000194 74 26            [12]  793 	mov	a,#0x26
      000196 2D               [12]  794 	add	a,r5
      000197 FB               [12]  795 	mov	r3,a
      000198 74 FF            [12]  796 	mov	a,#0xff
      00019A 3E               [12]  797 	addc	a,r6
      00019B FC               [12]  798 	mov	r4,a
      00019C E5*00            [12]  799 	mov	a,_bp
      00019E 24 F7            [12]  800 	add	a,#0xf7
      0001A0 F8               [12]  801 	mov	r0,a
      0001A1 08               [12]  802 	inc	r0
      0001A2 08               [12]  803 	inc	r0
      0001A3 08               [12]  804 	inc	r0
      0001A4 86 02            [24]  805 	mov	ar2,@r0
      0001A6 53 02 1F         [24]  806 	anl	ar2,#0x1f
      0001A9 43 02 E0         [24]  807 	orl	ar2,#0xe0
      0001AC 8B 82            [24]  808 	mov	dpl,r3
      0001AE 8C 83            [24]  809 	mov	dph,r4
      0001B0 EA               [12]  810 	mov	a,r2
      0001B1 F0               [24]  811 	movx	@dptr,a
                           0001B2   812 	C$compactflash.c$84$3_0$22 ==.
                                    813 ;	compactflash.c:84: while(sectorCount--)
      0001B2 74 27            [12]  814 	mov	a,#0x27
      0001B4 2D               [12]  815 	add	a,r5
      0001B5 FC               [12]  816 	mov	r4,a
      0001B6 74 FF            [12]  817 	mov	a,#0xff
      0001B8 3E               [12]  818 	addc	a,r6
      0001B9 FF               [12]  819 	mov	r7,a
      0001BA 74 20            [12]  820 	mov	a,#0x20
      0001BC 2D               [12]  821 	add	a,r5
      0001BD FD               [12]  822 	mov	r5,a
      0001BE 74 FF            [12]  823 	mov	a,#0xff
      0001C0 3E               [12]  824 	addc	a,r6
      0001C1 FE               [12]  825 	mov	r6,a
      0001C2 E5*00            [12]  826 	mov	a,_bp
      0001C4 24 06            [12]  827 	add	a,#0x06
      0001C6 F8               [12]  828 	mov	r0,a
      0001C7 E4               [12]  829 	clr	a
      0001C8 F6               [12]  830 	mov	@r0,a
      0001C9 08               [12]  831 	inc	r0
      0001CA F6               [12]  832 	mov	@r0,a
      0001CB E5*00            [12]  833 	mov	a,_bp
      0001CD 24 F5            [12]  834 	add	a,#0xf5
      0001CF F8               [12]  835 	mov	r0,a
      0001D0 A9*00            [24]  836 	mov	r1,_bp
      0001D2 09               [12]  837 	inc	r1
      0001D3 09               [12]  838 	inc	r1
      0001D4 E6               [12]  839 	mov	a,@r0
      0001D5 F7               [12]  840 	mov	@r1,a
      0001D6 08               [12]  841 	inc	r0
      0001D7 09               [12]  842 	inc	r1
      0001D8 E6               [12]  843 	mov	a,@r0
      0001D9 F7               [12]  844 	mov	@r1,a
      0001DA                        845 00107$:
      0001DA A8*00            [24]  846 	mov	r0,_bp
      0001DC 08               [12]  847 	inc	r0
      0001DD 08               [12]  848 	inc	r0
      0001DE 86 02            [24]  849 	mov	ar2,@r0
      0001E0 08               [12]  850 	inc	r0
      0001E1 86 03            [24]  851 	mov	ar3,@r0
      0001E3 A8*00            [24]  852 	mov	r0,_bp
      0001E5 08               [12]  853 	inc	r0
      0001E6 08               [12]  854 	inc	r0
      0001E7 16               [12]  855 	dec	@r0
      0001E8 B6 FF 02         [24]  856 	cjne	@r0,#0xff,00134$
      0001EB 08               [12]  857 	inc	r0
      0001EC 16               [12]  858 	dec	@r0
      0001ED                        859 00134$:
      0001ED EA               [12]  860 	mov	a,r2
      0001EE 4B               [12]  861 	orl	a,r3
      0001EF 70 03            [24]  862 	jnz	00135$
      0001F1 02r02rD7         [24]  863 	ljmp	00109$
      0001F4                        864 00135$:
                           0001F4   865 	C$compactflash.c$86$2_0$21 ==.
                                    866 ;	compactflash.c:86: do
      0001F4                        867 00101$:
                           0001F4   868 	C$compactflash.c$88$3_0$22 ==.
                                    869 ;	compactflash.c:88: P1 = 0xeb;
      0001F4 75 90 EB         [24]  870 	mov	_P1,#0xeb
                           0001F7   871 	C$compactflash.c$89$3_0$22 ==.
                                    872 ;	compactflash.c:89: cfWaitCommandReady(device);
      0001F7 A8*00            [24]  873 	mov	r0,_bp
      0001F9 08               [12]  874 	inc	r0
      0001FA 86 82            [24]  875 	mov	dpl,@r0
      0001FC C0 07            [24]  876 	push	ar7
      0001FE C0 06            [24]  877 	push	ar6
      000200 C0 05            [24]  878 	push	ar5
      000202 C0 04            [24]  879 	push	ar4
      000204 12r00r68         [24]  880 	lcall	_cfWaitCommandReady
      000207 D0 04            [24]  881 	pop	ar4
      000209 D0 05            [24]  882 	pop	ar5
      00020B D0 06            [24]  883 	pop	ar6
      00020D D0 07            [24]  884 	pop	ar7
                           00020F   885 	C$compactflash.c$91$3_0$22 ==.
                                    886 ;	compactflash.c:91: P1 = 0xec;
      00020F 75 90 EC         [24]  887 	mov	_P1,#0xec
                           000212   888 	C$compactflash.c$92$3_0$22 ==.
                                    889 ;	compactflash.c:92: cfWriteCommand(device, 0x20);
      000212 8C 02            [24]  890 	mov	ar2,r4
      000214 8F 03            [24]  891 	mov	ar3,r7
      000216 8A 82            [24]  892 	mov	dpl,r2
      000218 8B 83            [24]  893 	mov	dph,r3
      00021A 74 20            [12]  894 	mov	a,#0x20
      00021C F0               [24]  895 	movx	@dptr,a
                           00021D   896 	C$compactflash.c$94$3_0$22 ==.
                                    897 ;	compactflash.c:94: P1 = 0xed;
      00021D 75 90 ED         [24]  898 	mov	_P1,#0xed
                           000220   899 	C$compactflash.c$95$3_0$22 ==.
                                    900 ;	compactflash.c:95: cfWaitDataReady(device);
      000220 A8*00            [24]  901 	mov	r0,_bp
      000222 08               [12]  902 	inc	r0
      000223 86 82            [24]  903 	mov	dpl,@r0
      000225 C0 07            [24]  904 	push	ar7
      000227 C0 06            [24]  905 	push	ar6
      000229 C0 05            [24]  906 	push	ar5
      00022B C0 04            [24]  907 	push	ar4
      00022D C0 03            [24]  908 	push	ar3
      00022F C0 02            [24]  909 	push	ar2
      000231 12r00r94         [24]  910 	lcall	_cfWaitDataReady
      000234 D0 02            [24]  911 	pop	ar2
      000236 D0 03            [24]  912 	pop	ar3
      000238 D0 04            [24]  913 	pop	ar4
      00023A D0 05            [24]  914 	pop	ar5
      00023C D0 06            [24]  915 	pop	ar6
      00023E D0 07            [24]  916 	pop	ar7
                           000240   917 	C$compactflash.c$97$3_0$22 ==.
                                    918 ;	compactflash.c:97: P1 = 0xee;
      000240 75 90 EE         [24]  919 	mov	_P1,#0xee
                           000243   920 	C$compactflash.c$98$3_0$22 ==.
                                    921 ;	compactflash.c:98: status = cfReadStatus(device);
      000243 8A 82            [24]  922 	mov	dpl,r2
      000245 8B 83            [24]  923 	mov	dph,r3
      000247 E0               [24]  924 	movx	a,@dptr
                           000248   925 	C$compactflash.c$100$3_0$22 ==.
                                    926 ;	compactflash.c:100: P1 = 0xef;
                           000248   927 	C$compactflash.c$102$2_0$21 ==.
                                    928 ;	compactflash.c:102: while((status & 0x01)!=0);
      000248 FA               [12]  929 	mov	r2,a
      000249 75 90 EF         [24]  930 	mov	_P1,#0xef
      00024C 20 E0 A5         [24]  931 	jb	acc.0,00101$
                           00024F   932 	C$compactflash.c$105$1_0$20 ==.
                                    933 ;	compactflash.c:105: while(i < CF_SECTOR_SIZE)
      00024F E5*00            [12]  934 	mov	a,_bp
      000251 24 04            [12]  935 	add	a,#0x04
      000253 F8               [12]  936 	mov	r0,a
      000254 E4               [12]  937 	clr	a
      000255 F6               [12]  938 	mov	@r0,a
      000256 08               [12]  939 	inc	r0
      000257 F6               [12]  940 	mov	@r0,a
      000258                        941 00104$:
      000258 E5*00            [12]  942 	mov	a,_bp
      00025A 24 04            [12]  943 	add	a,#0x04
      00025C F8               [12]  944 	mov	r0,a
      00025D C3               [12]  945 	clr	c
      00025E 08               [12]  946 	inc	r0
      00025F E6               [12]  947 	mov	a,@r0
      000260 94 02            [12]  948 	subb	a,#0x02
      000262 50 66            [24]  949 	jnc	00106$
                           000264   950 	C$compactflash.c$107$1_0$20 ==.
                                    951 ;	compactflash.c:107: P1 = 0xf0;
      000264 C0 04            [24]  952 	push	ar4
      000266 C0 07            [24]  953 	push	ar7
      000268 75 90 F0         [24]  954 	mov	_P1,#0xf0
                           00026B   955 	C$compactflash.c$108$3_0$23 ==.
                                    956 ;	compactflash.c:108: cfWaitDataReady(device);
      00026B A8*00            [24]  957 	mov	r0,_bp
      00026D 08               [12]  958 	inc	r0
      00026E 86 82            [24]  959 	mov	dpl,@r0
      000270 C0 07            [24]  960 	push	ar7
      000272 C0 06            [24]  961 	push	ar6
      000274 C0 05            [24]  962 	push	ar5
      000276 C0 04            [24]  963 	push	ar4
      000278 12r00r94         [24]  964 	lcall	_cfWaitDataReady
      00027B D0 04            [24]  965 	pop	ar4
      00027D D0 05            [24]  966 	pop	ar5
      00027F D0 06            [24]  967 	pop	ar6
      000281 D0 07            [24]  968 	pop	ar7
                           000283   969 	C$compactflash.c$110$3_0$23 ==.
                                    970 ;	compactflash.c:110: P1 = 0xf1;
      000283 75 90 F1         [24]  971 	mov	_P1,#0xf1
                           000286   972 	C$compactflash.c$111$3_0$23 ==.
                                    973 ;	compactflash.c:111: buf[i+idx] = cfReadData(device);
      000286 E5*00            [12]  974 	mov	a,_bp
      000288 24 04            [12]  975 	add	a,#0x04
      00028A F8               [12]  976 	mov	r0,a
      00028B E5*00            [12]  977 	mov	a,_bp
      00028D 24 06            [12]  978 	add	a,#0x06
      00028F F9               [12]  979 	mov	r1,a
      000290 E7               [12]  980 	mov	a,@r1
      000291 26               [12]  981 	add	a,@r0
      000292 FC               [12]  982 	mov	r4,a
      000293 09               [12]  983 	inc	r1
      000294 E7               [12]  984 	mov	a,@r1
      000295 08               [12]  985 	inc	r0
      000296 36               [12]  986 	addc	a,@r0
      000297 FF               [12]  987 	mov	r7,a
      000298 E5*00            [12]  988 	mov	a,_bp
      00029A 24 FB            [12]  989 	add	a,#0xfb
      00029C F8               [12]  990 	mov	r0,a
      00029D EC               [12]  991 	mov	a,r4
      00029E 26               [12]  992 	add	a,@r0
      00029F FC               [12]  993 	mov	r4,a
      0002A0 EF               [12]  994 	mov	a,r7
      0002A1 08               [12]  995 	inc	r0
      0002A2 36               [12]  996 	addc	a,@r0
      0002A3 FB               [12]  997 	mov	r3,a
      0002A4 08               [12]  998 	inc	r0
      0002A5 86 07            [24]  999 	mov	ar7,@r0
      0002A7 8D 82            [24] 1000 	mov	dpl,r5
      0002A9 8E 83            [24] 1001 	mov	dph,r6
      0002AB E0               [24] 1002 	movx	a,@dptr
      0002AC FA               [12] 1003 	mov	r2,a
      0002AD 8C 82            [24] 1004 	mov	dpl,r4
      0002AF 8B 83            [24] 1005 	mov	dph,r3
      0002B1 8F F0            [24] 1006 	mov	b,r7
      0002B3 12r00r00         [24] 1007 	lcall	__gptrput
                           0002B6  1008 	C$compactflash.c$113$3_0$23 ==.
                                   1009 ;	compactflash.c:113: i++;
      0002B6 E5*00            [12] 1010 	mov	a,_bp
      0002B8 24 04            [12] 1011 	add	a,#0x04
      0002BA F8               [12] 1012 	mov	r0,a
      0002BB 06               [12] 1013 	inc	@r0
      0002BC B6 00 02         [24] 1014 	cjne	@r0,#0x00,00138$
      0002BF 08               [12] 1015 	inc	r0
      0002C0 06               [12] 1016 	inc	@r0
      0002C1                       1017 00138$:
                           0002C1  1018 	C$compactflash.c$115$3_0$23 ==.
                                   1019 ;	compactflash.c:115: P1 = 0xf2;
      0002C1 75 90 F2         [24] 1020 	mov	_P1,#0xf2
      0002C4 D0 07            [24] 1021 	pop	ar7
      0002C6 D0 04            [24] 1022 	pop	ar4
      0002C8 80 8E            [24] 1023 	sjmp	00104$
      0002CA                       1024 00106$:
                           0002CA  1025 	C$compactflash.c$117$2_0$21 ==.
                                   1026 ;	compactflash.c:117: idx += CF_SECTOR_SIZE;
      0002CA E5*00            [12] 1027 	mov	a,_bp
      0002CC 24 06            [12] 1028 	add	a,#0x06
      0002CE F8               [12] 1029 	mov	r0,a
      0002CF 74 02            [12] 1030 	mov	a,#0x02
      0002D1 08               [12] 1031 	inc	r0
      0002D2 26               [12] 1032 	add	a,@r0
      0002D3 F6               [12] 1033 	mov	@r0,a
      0002D4 02r01rDA         [24] 1034 	ljmp	00107$
      0002D7                       1035 00109$:
                           0002D7  1036 	C$compactflash.c$120$1_0$20 ==.
                                   1037 ;	compactflash.c:120: P1 = 0xf3;
      0002D7 75 90 F3         [24] 1038 	mov	_P1,#0xf3
                           0002DA  1039 	C$compactflash.c$121$1_0$20 ==.
                                   1040 ;	compactflash.c:121: }
      0002DA 85*00 81         [24] 1041 	mov	sp,_bp
      0002DD D0*00            [24] 1042 	pop	_bp
                           0002DF  1043 	C$compactflash.c$121$1_0$20 ==.
                           0002DF  1044 	XG$cfReadSector$0$0 ==.
      0002DF 22               [24] 1045 	ret
                                   1046 ;------------------------------------------------------------
                                   1047 ;Allocation info for local variables in function 'cfWriteSector'
                                   1048 ;------------------------------------------------------------
                                   1049 ;buf                       Allocated to stack - _bp -5
                                   1050 ;LBA                       Allocated to stack - _bp -9
                                   1051 ;sectorCount               Allocated to stack - _bp -11
                                   1052 ;device                    Allocated to stack - _bp +1
                                   1053 ;status                    Allocated to registers r2 
                                   1054 ;i                         Allocated to stack - _bp +8
                                   1055 ;idx                       Allocated to stack - _bp +6
                                   1056 ;sloc0                     Allocated to stack - _bp +2
                                   1057 ;sloc1                     Allocated to stack - _bp +4
                                   1058 ;------------------------------------------------------------
                           0002E0  1059 	G$cfWriteSector$0$0 ==.
                           0002E0  1060 	C$compactflash.c$123$1_0$25 ==.
                                   1061 ;	compactflash.c:123: void cfWriteSector(char device, const char* buf, unsigned long LBA, unsigned int sectorCount)
                                   1062 ;	-----------------------------------------
                                   1063 ;	 function cfWriteSector
                                   1064 ;	-----------------------------------------
      0002E0                       1065 _cfWriteSector:
      0002E0 C0*00            [24] 1066 	push	_bp
      0002E2 85 81*00         [24] 1067 	mov	_bp,sp
      0002E5 C0 82            [24] 1068 	push	dpl
      0002E7 E5 81            [12] 1069 	mov	a,sp
      0002E9 24 08            [12] 1070 	add	a,#0x08
      0002EB F5 81            [12] 1071 	mov	sp,a
                           0002ED  1072 	C$compactflash.c$131$1_0$25 ==.
                                   1073 ;	compactflash.c:131: P1 = 0xe1;
      0002ED 75 90 E1         [24] 1074 	mov	_P1,#0xe1
                           0002F0  1075 	C$compactflash.c$132$1_0$25 ==.
                                   1076 ;	compactflash.c:132: cfWaitIdle(device);
      0002F0 A8*00            [24] 1077 	mov	r0,_bp
      0002F2 08               [12] 1078 	inc	r0
      0002F3 86 82            [24] 1079 	mov	dpl,@r0
      0002F5 12r00r45         [24] 1080 	lcall	_cfWaitIdle
                           0002F8  1081 	C$compactflash.c$134$1_0$25 ==.
                                   1082 ;	compactflash.c:134: P1 = 0xe2;
      0002F8 75 90 E2         [24] 1083 	mov	_P1,#0xe2
                           0002FB  1084 	C$compactflash.c$135$1_0$25 ==.
                                   1085 ;	compactflash.c:135: cfWriteSectorCount(device, 0x01);
      0002FB A8*00            [24] 1086 	mov	r0,_bp
      0002FD 08               [12] 1087 	inc	r0
      0002FE 86 05            [24] 1088 	mov	ar5,@r0
      000300 E4               [12] 1089 	clr	a
      000301 CD               [12] 1090 	xch	a,r5
      000302 C4               [12] 1091 	swap	a
      000303 CD               [12] 1092 	xch	a,r5
      000304 6D               [12] 1093 	xrl	a,r5
      000305 CD               [12] 1094 	xch	a,r5
      000306 54 F0            [12] 1095 	anl	a,#0xf0
      000308 CD               [12] 1096 	xch	a,r5
      000309 6D               [12] 1097 	xrl	a,r5
      00030A FE               [12] 1098 	mov	r6,a
      00030B 74 22            [12] 1099 	mov	a,#0x22
      00030D 2D               [12] 1100 	add	a,r5
      00030E FB               [12] 1101 	mov	r3,a
      00030F 74 FF            [12] 1102 	mov	a,#0xff
      000311 3E               [12] 1103 	addc	a,r6
      000312 FC               [12] 1104 	mov	r4,a
      000313 8B 82            [24] 1105 	mov	dpl,r3
      000315 8C 83            [24] 1106 	mov	dph,r4
      000317 74 01            [12] 1107 	mov	a,#0x01
      000319 F0               [24] 1108 	movx	@dptr,a
                           00031A  1109 	C$compactflash.c$137$1_0$25 ==.
                                   1110 ;	compactflash.c:137: P1 = 0xe3;
      00031A 75 90 E3         [24] 1111 	mov	_P1,#0xe3
                           00031D  1112 	C$compactflash.c$138$1_0$25 ==.
                                   1113 ;	compactflash.c:138: cfWaitIdle(device);
      00031D A8*00            [24] 1114 	mov	r0,_bp
      00031F 08               [12] 1115 	inc	r0
      000320 86 82            [24] 1116 	mov	dpl,@r0
      000322 C0 06            [24] 1117 	push	ar6
      000324 C0 05            [24] 1118 	push	ar5
      000326 12r00r45         [24] 1119 	lcall	_cfWaitIdle
      000329 D0 05            [24] 1120 	pop	ar5
      00032B D0 06            [24] 1121 	pop	ar6
                           00032D  1122 	C$compactflash.c$140$1_0$25 ==.
                                   1123 ;	compactflash.c:140: P1 = 0xe4;
      00032D 75 90 E4         [24] 1124 	mov	_P1,#0xe4
                           000330  1125 	C$compactflash.c$141$1_0$25 ==.
                                   1126 ;	compactflash.c:141: cfWriteLBA0(device, ((LBA   ) & 0xff) );
      000330 74 23            [12] 1127 	mov	a,#0x23
      000332 2D               [12] 1128 	add	a,r5
      000333 FB               [12] 1129 	mov	r3,a
      000334 74 FF            [12] 1130 	mov	a,#0xff
      000336 3E               [12] 1131 	addc	a,r6
      000337 FC               [12] 1132 	mov	r4,a
      000338 E5*00            [12] 1133 	mov	a,_bp
      00033A 24 F7            [12] 1134 	add	a,#0xf7
      00033C F8               [12] 1135 	mov	r0,a
      00033D 86 02            [24] 1136 	mov	ar2,@r0
      00033F 8B 82            [24] 1137 	mov	dpl,r3
      000341 8C 83            [24] 1138 	mov	dph,r4
      000343 EA               [12] 1139 	mov	a,r2
      000344 F0               [24] 1140 	movx	@dptr,a
                           000345  1141 	C$compactflash.c$143$1_0$25 ==.
                                   1142 ;	compactflash.c:143: P1 = 0xe5;
      000345 75 90 E5         [24] 1143 	mov	_P1,#0xe5
                           000348  1144 	C$compactflash.c$144$1_0$25 ==.
                                   1145 ;	compactflash.c:144: cfWaitIdle(device);
      000348 A8*00            [24] 1146 	mov	r0,_bp
      00034A 08               [12] 1147 	inc	r0
      00034B 86 82            [24] 1148 	mov	dpl,@r0
      00034D C0 06            [24] 1149 	push	ar6
      00034F C0 05            [24] 1150 	push	ar5
      000351 12r00r45         [24] 1151 	lcall	_cfWaitIdle
      000354 D0 05            [24] 1152 	pop	ar5
      000356 D0 06            [24] 1153 	pop	ar6
                           000358  1154 	C$compactflash.c$146$1_0$25 ==.
                                   1155 ;	compactflash.c:146: P1 = 0xe6;
      000358 75 90 E6         [24] 1156 	mov	_P1,#0xe6
                           00035B  1157 	C$compactflash.c$147$1_0$25 ==.
                                   1158 ;	compactflash.c:147: cfWriteLBA1(device, ((LBA>>8) & 0xff) );
      00035B 74 24            [12] 1159 	mov	a,#0x24
      00035D 2D               [12] 1160 	add	a,r5
      00035E FB               [12] 1161 	mov	r3,a
      00035F 74 FF            [12] 1162 	mov	a,#0xff
      000361 3E               [12] 1163 	addc	a,r6
      000362 FC               [12] 1164 	mov	r4,a
      000363 E5*00            [12] 1165 	mov	a,_bp
      000365 24 F7            [12] 1166 	add	a,#0xf7
      000367 F8               [12] 1167 	mov	r0,a
      000368 08               [12] 1168 	inc	r0
      000369 86 02            [24] 1169 	mov	ar2,@r0
      00036B 8B 82            [24] 1170 	mov	dpl,r3
      00036D 8C 83            [24] 1171 	mov	dph,r4
      00036F EA               [12] 1172 	mov	a,r2
      000370 F0               [24] 1173 	movx	@dptr,a
                           000371  1174 	C$compactflash.c$149$1_0$25 ==.
                                   1175 ;	compactflash.c:149: P1 = 0xe7;
      000371 75 90 E7         [24] 1176 	mov	_P1,#0xe7
                           000374  1177 	C$compactflash.c$150$1_0$25 ==.
                                   1178 ;	compactflash.c:150: cfWaitIdle(device);
      000374 A8*00            [24] 1179 	mov	r0,_bp
      000376 08               [12] 1180 	inc	r0
      000377 86 82            [24] 1181 	mov	dpl,@r0
      000379 C0 06            [24] 1182 	push	ar6
      00037B C0 05            [24] 1183 	push	ar5
      00037D 12r00r45         [24] 1184 	lcall	_cfWaitIdle
      000380 D0 05            [24] 1185 	pop	ar5
      000382 D0 06            [24] 1186 	pop	ar6
                           000384  1187 	C$compactflash.c$152$1_0$25 ==.
                                   1188 ;	compactflash.c:152: P1 = 0xe8;
      000384 75 90 E8         [24] 1189 	mov	_P1,#0xe8
                           000387  1190 	C$compactflash.c$153$1_0$25 ==.
                                   1191 ;	compactflash.c:153: cfWriteLBA2(device, ((LBA>>16) & 0xff) );
      000387 74 25            [12] 1192 	mov	a,#0x25
      000389 2D               [12] 1193 	add	a,r5
      00038A FB               [12] 1194 	mov	r3,a
      00038B 74 FF            [12] 1195 	mov	a,#0xff
      00038D 3E               [12] 1196 	addc	a,r6
      00038E FC               [12] 1197 	mov	r4,a
      00038F E5*00            [12] 1198 	mov	a,_bp
      000391 24 F7            [12] 1199 	add	a,#0xf7
      000393 F8               [12] 1200 	mov	r0,a
      000394 08               [12] 1201 	inc	r0
      000395 08               [12] 1202 	inc	r0
      000396 86 02            [24] 1203 	mov	ar2,@r0
      000398 8B 82            [24] 1204 	mov	dpl,r3
      00039A 8C 83            [24] 1205 	mov	dph,r4
      00039C EA               [12] 1206 	mov	a,r2
      00039D F0               [24] 1207 	movx	@dptr,a
                           00039E  1208 	C$compactflash.c$155$1_0$25 ==.
                                   1209 ;	compactflash.c:155: P1 = 0xe9;
      00039E 75 90 E9         [24] 1210 	mov	_P1,#0xe9
                           0003A1  1211 	C$compactflash.c$156$1_0$25 ==.
                                   1212 ;	compactflash.c:156: cfWaitIdle(device);
      0003A1 A8*00            [24] 1213 	mov	r0,_bp
      0003A3 08               [12] 1214 	inc	r0
      0003A4 86 82            [24] 1215 	mov	dpl,@r0
      0003A6 C0 06            [24] 1216 	push	ar6
      0003A8 C0 05            [24] 1217 	push	ar5
      0003AA 12r00r45         [24] 1218 	lcall	_cfWaitIdle
      0003AD D0 05            [24] 1219 	pop	ar5
      0003AF D0 06            [24] 1220 	pop	ar6
                           0003B1  1221 	C$compactflash.c$158$1_0$25 ==.
                                   1222 ;	compactflash.c:158: P1 = 0xea;
      0003B1 75 90 EA         [24] 1223 	mov	_P1,#0xea
                           0003B4  1224 	C$compactflash.c$159$1_0$25 ==.
                                   1225 ;	compactflash.c:159: cfWriteLBA3(device, (((LBA>>24) | 0xe0) & 0xff) );
      0003B4 74 26            [12] 1226 	mov	a,#0x26
      0003B6 2D               [12] 1227 	add	a,r5
      0003B7 FB               [12] 1228 	mov	r3,a
      0003B8 74 FF            [12] 1229 	mov	a,#0xff
      0003BA 3E               [12] 1230 	addc	a,r6
      0003BB FC               [12] 1231 	mov	r4,a
      0003BC E5*00            [12] 1232 	mov	a,_bp
      0003BE 24 F7            [12] 1233 	add	a,#0xf7
      0003C0 F8               [12] 1234 	mov	r0,a
      0003C1 08               [12] 1235 	inc	r0
      0003C2 08               [12] 1236 	inc	r0
      0003C3 08               [12] 1237 	inc	r0
      0003C4 86 02            [24] 1238 	mov	ar2,@r0
      0003C6 43 02 E0         [24] 1239 	orl	ar2,#0xe0
      0003C9 8B 82            [24] 1240 	mov	dpl,r3
      0003CB 8C 83            [24] 1241 	mov	dph,r4
      0003CD EA               [12] 1242 	mov	a,r2
      0003CE F0               [24] 1243 	movx	@dptr,a
                           0003CF  1244 	C$compactflash.c$162$3_0$27 ==.
                                   1245 ;	compactflash.c:162: while(sectorCount--)
      0003CF 74 27            [12] 1246 	mov	a,#0x27
      0003D1 2D               [12] 1247 	add	a,r5
      0003D2 FC               [12] 1248 	mov	r4,a
      0003D3 74 FF            [12] 1249 	mov	a,#0xff
      0003D5 3E               [12] 1250 	addc	a,r6
      0003D6 FF               [12] 1251 	mov	r7,a
      0003D7 74 20            [12] 1252 	mov	a,#0x20
      0003D9 2D               [12] 1253 	add	a,r5
      0003DA FD               [12] 1254 	mov	r5,a
      0003DB 74 FF            [12] 1255 	mov	a,#0xff
      0003DD 3E               [12] 1256 	addc	a,r6
      0003DE FE               [12] 1257 	mov	r6,a
      0003DF E5*00            [12] 1258 	mov	a,_bp
      0003E1 24 06            [12] 1259 	add	a,#0x06
      0003E3 F8               [12] 1260 	mov	r0,a
      0003E4 E4               [12] 1261 	clr	a
      0003E5 F6               [12] 1262 	mov	@r0,a
      0003E6 08               [12] 1263 	inc	r0
      0003E7 F6               [12] 1264 	mov	@r0,a
      0003E8 E5*00            [12] 1265 	mov	a,_bp
      0003EA 24 F5            [12] 1266 	add	a,#0xf5
      0003EC F8               [12] 1267 	mov	r0,a
      0003ED A9*00            [24] 1268 	mov	r1,_bp
      0003EF 09               [12] 1269 	inc	r1
      0003F0 09               [12] 1270 	inc	r1
      0003F1 E6               [12] 1271 	mov	a,@r0
      0003F2 F7               [12] 1272 	mov	@r1,a
      0003F3 08               [12] 1273 	inc	r0
      0003F4 09               [12] 1274 	inc	r1
      0003F5 E6               [12] 1275 	mov	a,@r0
      0003F6 F7               [12] 1276 	mov	@r1,a
      0003F7                       1277 00107$:
      0003F7 A8*00            [24] 1278 	mov	r0,_bp
      0003F9 08               [12] 1279 	inc	r0
      0003FA 08               [12] 1280 	inc	r0
      0003FB 86 02            [24] 1281 	mov	ar2,@r0
      0003FD 08               [12] 1282 	inc	r0
      0003FE 86 03            [24] 1283 	mov	ar3,@r0
      000400 A8*00            [24] 1284 	mov	r0,_bp
      000402 08               [12] 1285 	inc	r0
      000403 08               [12] 1286 	inc	r0
      000404 16               [12] 1287 	dec	@r0
      000405 B6 FF 02         [24] 1288 	cjne	@r0,#0xff,00134$
      000408 08               [12] 1289 	inc	r0
      000409 16               [12] 1290 	dec	@r0
      00040A                       1291 00134$:
      00040A EA               [12] 1292 	mov	a,r2
      00040B 4B               [12] 1293 	orl	a,r3
      00040C 70 03            [24] 1294 	jnz	00135$
      00040E 02r05r06         [24] 1295 	ljmp	00109$
      000411                       1296 00135$:
                           000411  1297 	C$compactflash.c$164$2_0$26 ==.
                                   1298 ;	compactflash.c:164: do
      000411                       1299 00101$:
                           000411  1300 	C$compactflash.c$166$3_0$27 ==.
                                   1301 ;	compactflash.c:166: P1 = 0xeb;
      000411 75 90 EB         [24] 1302 	mov	_P1,#0xeb
                           000414  1303 	C$compactflash.c$167$3_0$27 ==.
                                   1304 ;	compactflash.c:167: cfWaitCommandReady(device);
      000414 A8*00            [24] 1305 	mov	r0,_bp
      000416 08               [12] 1306 	inc	r0
      000417 86 82            [24] 1307 	mov	dpl,@r0
      000419 C0 07            [24] 1308 	push	ar7
      00041B C0 06            [24] 1309 	push	ar6
      00041D C0 05            [24] 1310 	push	ar5
      00041F C0 04            [24] 1311 	push	ar4
      000421 12r00r68         [24] 1312 	lcall	_cfWaitCommandReady
      000424 D0 04            [24] 1313 	pop	ar4
      000426 D0 05            [24] 1314 	pop	ar5
      000428 D0 06            [24] 1315 	pop	ar6
      00042A D0 07            [24] 1316 	pop	ar7
                           00042C  1317 	C$compactflash.c$169$3_0$27 ==.
                                   1318 ;	compactflash.c:169: P1 = 0xec;
      00042C 75 90 EC         [24] 1319 	mov	_P1,#0xec
                           00042F  1320 	C$compactflash.c$170$3_0$27 ==.
                                   1321 ;	compactflash.c:170: cfWriteCommand(device, 0x30);
      00042F 8C 02            [24] 1322 	mov	ar2,r4
      000431 8F 03            [24] 1323 	mov	ar3,r7
      000433 8A 82            [24] 1324 	mov	dpl,r2
      000435 8B 83            [24] 1325 	mov	dph,r3
      000437 74 30            [12] 1326 	mov	a,#0x30
      000439 F0               [24] 1327 	movx	@dptr,a
                           00043A  1328 	C$compactflash.c$172$3_0$27 ==.
                                   1329 ;	compactflash.c:172: P1 = 0xed;
      00043A 75 90 ED         [24] 1330 	mov	_P1,#0xed
                           00043D  1331 	C$compactflash.c$173$3_0$27 ==.
                                   1332 ;	compactflash.c:173: cfWaitDataReady(device);
      00043D A8*00            [24] 1333 	mov	r0,_bp
      00043F 08               [12] 1334 	inc	r0
      000440 86 82            [24] 1335 	mov	dpl,@r0
      000442 C0 07            [24] 1336 	push	ar7
      000444 C0 06            [24] 1337 	push	ar6
      000446 C0 05            [24] 1338 	push	ar5
      000448 C0 04            [24] 1339 	push	ar4
      00044A C0 03            [24] 1340 	push	ar3
      00044C C0 02            [24] 1341 	push	ar2
      00044E 12r00r94         [24] 1342 	lcall	_cfWaitDataReady
      000451 D0 02            [24] 1343 	pop	ar2
      000453 D0 03            [24] 1344 	pop	ar3
      000455 D0 04            [24] 1345 	pop	ar4
      000457 D0 05            [24] 1346 	pop	ar5
      000459 D0 06            [24] 1347 	pop	ar6
      00045B D0 07            [24] 1348 	pop	ar7
                           00045D  1349 	C$compactflash.c$175$3_0$27 ==.
                                   1350 ;	compactflash.c:175: P1 = 0xee;
      00045D 75 90 EE         [24] 1351 	mov	_P1,#0xee
                           000460  1352 	C$compactflash.c$176$3_0$27 ==.
                                   1353 ;	compactflash.c:176: status = cfReadStatus(device);
      000460 8A 82            [24] 1354 	mov	dpl,r2
      000462 8B 83            [24] 1355 	mov	dph,r3
      000464 E0               [24] 1356 	movx	a,@dptr
                           000465  1357 	C$compactflash.c$178$3_0$27 ==.
                                   1358 ;	compactflash.c:178: P1 = 0xef;
                           000465  1359 	C$compactflash.c$180$2_0$26 ==.
                                   1360 ;	compactflash.c:180: while((status & 0x01)!=0);
      000465 FA               [12] 1361 	mov	r2,a
      000466 75 90 EF         [24] 1362 	mov	_P1,#0xef
      000469 20 E0 A5         [24] 1363 	jb	acc.0,00101$
                           00046C  1364 	C$compactflash.c$183$1_0$25 ==.
                                   1365 ;	compactflash.c:183: while(i < CF_SECTOR_SIZE)
      00046C E5*00            [12] 1366 	mov	a,_bp
      00046E 24 08            [12] 1367 	add	a,#0x08
      000470 F8               [12] 1368 	mov	r0,a
      000471 E4               [12] 1369 	clr	a
      000472 F6               [12] 1370 	mov	@r0,a
      000473 08               [12] 1371 	inc	r0
      000474 F6               [12] 1372 	mov	@r0,a
      000475                       1373 00104$:
      000475 E5*00            [12] 1374 	mov	a,_bp
      000477 24 08            [12] 1375 	add	a,#0x08
      000479 F8               [12] 1376 	mov	r0,a
      00047A C3               [12] 1377 	clr	c
      00047B 08               [12] 1378 	inc	r0
      00047C E6               [12] 1379 	mov	a,@r0
      00047D 94 02            [12] 1380 	subb	a,#0x02
      00047F 50 78            [24] 1381 	jnc	00106$
                           000481  1382 	C$compactflash.c$185$1_0$25 ==.
                                   1383 ;	compactflash.c:185: P1 = 0xf0;
      000481 C0 04            [24] 1384 	push	ar4
      000483 C0 07            [24] 1385 	push	ar7
      000485 75 90 F0         [24] 1386 	mov	_P1,#0xf0
                           000488  1387 	C$compactflash.c$186$3_0$28 ==.
                                   1388 ;	compactflash.c:186: cfWaitDataReady(device);
      000488 A8*00            [24] 1389 	mov	r0,_bp
      00048A 08               [12] 1390 	inc	r0
      00048B 86 82            [24] 1391 	mov	dpl,@r0
      00048D C0 07            [24] 1392 	push	ar7
      00048F C0 06            [24] 1393 	push	ar6
      000491 C0 05            [24] 1394 	push	ar5
      000493 C0 04            [24] 1395 	push	ar4
      000495 12r00r94         [24] 1396 	lcall	_cfWaitDataReady
      000498 D0 04            [24] 1397 	pop	ar4
      00049A D0 05            [24] 1398 	pop	ar5
      00049C D0 06            [24] 1399 	pop	ar6
      00049E D0 07            [24] 1400 	pop	ar7
                           0004A0  1401 	C$compactflash.c$188$3_0$28 ==.
                                   1402 ;	compactflash.c:188: P1 = 0xf1;
      0004A0 75 90 F1         [24] 1403 	mov	_P1,#0xf1
                           0004A3  1404 	C$compactflash.c$189$3_0$28 ==.
                                   1405 ;	compactflash.c:189: cfWriteData(device, buf[i+idx]);
      0004A3 E5*00            [12] 1406 	mov	a,_bp
      0004A5 24 04            [12] 1407 	add	a,#0x04
      0004A7 F8               [12] 1408 	mov	r0,a
      0004A8 A6 05            [24] 1409 	mov	@r0,ar5
      0004AA 08               [12] 1410 	inc	r0
      0004AB A6 06            [24] 1411 	mov	@r0,ar6
      0004AD E5*00            [12] 1412 	mov	a,_bp
      0004AF 24 08            [12] 1413 	add	a,#0x08
      0004B1 F8               [12] 1414 	mov	r0,a
      0004B2 E5*00            [12] 1415 	mov	a,_bp
      0004B4 24 06            [12] 1416 	add	a,#0x06
      0004B6 F9               [12] 1417 	mov	r1,a
      0004B7 E7               [12] 1418 	mov	a,@r1
      0004B8 26               [12] 1419 	add	a,@r0
      0004B9 FA               [12] 1420 	mov	r2,a
      0004BA 09               [12] 1421 	inc	r1
      0004BB E7               [12] 1422 	mov	a,@r1
      0004BC 08               [12] 1423 	inc	r0
      0004BD 36               [12] 1424 	addc	a,@r0
      0004BE FB               [12] 1425 	mov	r3,a
      0004BF E5*00            [12] 1426 	mov	a,_bp
      0004C1 24 FB            [12] 1427 	add	a,#0xfb
      0004C3 F8               [12] 1428 	mov	r0,a
      0004C4 EA               [12] 1429 	mov	a,r2
      0004C5 26               [12] 1430 	add	a,@r0
      0004C6 FA               [12] 1431 	mov	r2,a
      0004C7 EB               [12] 1432 	mov	a,r3
      0004C8 08               [12] 1433 	inc	r0
      0004C9 36               [12] 1434 	addc	a,@r0
      0004CA FB               [12] 1435 	mov	r3,a
      0004CB 08               [12] 1436 	inc	r0
      0004CC 86 07            [24] 1437 	mov	ar7,@r0
      0004CE 8A 82            [24] 1438 	mov	dpl,r2
      0004D0 8B 83            [24] 1439 	mov	dph,r3
      0004D2 8F F0            [24] 1440 	mov	b,r7
      0004D4 12r00r00         [24] 1441 	lcall	__gptrget
      0004D7 FA               [12] 1442 	mov	r2,a
      0004D8 E5*00            [12] 1443 	mov	a,_bp
      0004DA 24 04            [12] 1444 	add	a,#0x04
      0004DC F8               [12] 1445 	mov	r0,a
      0004DD 86 82            [24] 1446 	mov	dpl,@r0
      0004DF 08               [12] 1447 	inc	r0
      0004E0 86 83            [24] 1448 	mov	dph,@r0
      0004E2 EA               [12] 1449 	mov	a,r2
      0004E3 F0               [24] 1450 	movx	@dptr,a
                           0004E4  1451 	C$compactflash.c$191$3_0$28 ==.
                                   1452 ;	compactflash.c:191: i++;
      0004E4 E5*00            [12] 1453 	mov	a,_bp
      0004E6 24 08            [12] 1454 	add	a,#0x08
      0004E8 F8               [12] 1455 	mov	r0,a
      0004E9 06               [12] 1456 	inc	@r0
      0004EA B6 00 02         [24] 1457 	cjne	@r0,#0x00,00138$
      0004ED 08               [12] 1458 	inc	r0
      0004EE 06               [12] 1459 	inc	@r0
      0004EF                       1460 00138$:
                           0004EF  1461 	C$compactflash.c$193$3_0$28 ==.
                                   1462 ;	compactflash.c:193: P1 = 0xf2;
      0004EF 75 90 F2         [24] 1463 	mov	_P1,#0xf2
      0004F2 D0 07            [24] 1464 	pop	ar7
      0004F4 D0 04            [24] 1465 	pop	ar4
      0004F6 02r04r75         [24] 1466 	ljmp	00104$
      0004F9                       1467 00106$:
                           0004F9  1468 	C$compactflash.c$195$2_0$26 ==.
                                   1469 ;	compactflash.c:195: idx += CF_SECTOR_SIZE;
      0004F9 E5*00            [12] 1470 	mov	a,_bp
      0004FB 24 06            [12] 1471 	add	a,#0x06
      0004FD F8               [12] 1472 	mov	r0,a
      0004FE 74 02            [12] 1473 	mov	a,#0x02
      000500 08               [12] 1474 	inc	r0
      000501 26               [12] 1475 	add	a,@r0
      000502 F6               [12] 1476 	mov	@r0,a
      000503 02r03rF7         [24] 1477 	ljmp	00107$
      000506                       1478 00109$:
                           000506  1479 	C$compactflash.c$198$1_0$25 ==.
                                   1480 ;	compactflash.c:198: P1 = 0xf3;
      000506 75 90 F3         [24] 1481 	mov	_P1,#0xf3
                           000509  1482 	C$compactflash.c$199$1_0$25 ==.
                                   1483 ;	compactflash.c:199: }
      000509 85*00 81         [24] 1484 	mov	sp,_bp
      00050C D0*00            [24] 1485 	pop	_bp
                           00050E  1486 	C$compactflash.c$199$1_0$25 ==.
                           00050E  1487 	XG$cfWriteSector$0$0 ==.
      00050E 22               [24] 1488 	ret
                                   1489 ;------------------------------------------------------------
                                   1490 ;Allocation info for local variables in function 'cfDiskGetSectorCount'
                                   1491 ;------------------------------------------------------------
                                   1492 ;device                    Allocated to registers 
                                   1493 ;------------------------------------------------------------
                           00050F  1494 	G$cfDiskGetSectorCount$0$0 ==.
                           00050F  1495 	C$compactflash.c$201$1_0$30 ==.
                                   1496 ;	compactflash.c:201: unsigned long cfDiskGetSectorCount(char device)
                                   1497 ;	-----------------------------------------
                                   1498 ;	 function cfDiskGetSectorCount
                                   1499 ;	-----------------------------------------
      00050F                       1500 _cfDiskGetSectorCount:
                           00050F  1501 	C$compactflash.c$203$1_0$30 ==.
                                   1502 ;	compactflash.c:203: return 10000;
      00050F 90 27 10         [24] 1503 	mov	dptr,#0x2710
      000512 E4               [12] 1504 	clr	a
      000513 F5 F0            [12] 1505 	mov	b,a
                           000515  1506 	C$compactflash.c$204$1_0$30 ==.
                                   1507 ;	compactflash.c:204: }
                           000515  1508 	C$compactflash.c$204$1_0$30 ==.
                           000515  1509 	XG$cfDiskGetSectorCount$0$0 ==.
      000515 22               [24] 1510 	ret
                                   1511 	.area CSEG    (CODE)
                                   1512 	.area CONST   (CODE)
                                   1513 	.area XINIT   (CODE)
                                   1514 	.area CABS    (ABS,CODE)
